
MLX_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08008058  08008058  00018058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008238  08008238  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008238  08008238  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000078  080082b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080082b8  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002590  00000000  00000000  0003098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001138b  00000000  00000000  00034528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ac1  00000000  00000000  000458b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000608d4  00000000  00000000  00056374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f60  00000000  00000000  000b6c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800803c 	.word	0x0800803c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800803c 	.word	0x0800803c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f000 ff33 	bl	80010b0 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fe7d 	bl	8000f54 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ff25 	bl	80010b0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 ff1b 	bl	80010b0 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe9f 	bl	8000fcc <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f000 fe95 	bl	8000fcc <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dadd>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	464f      	mov	r7, r9
 80002b4:	46d6      	mov	lr, sl
 80002b6:	4646      	mov	r6, r8
 80002b8:	000d      	movs	r5, r1
 80002ba:	0001      	movs	r1, r0
 80002bc:	0018      	movs	r0, r3
 80002be:	b5c0      	push	{r6, r7, lr}
 80002c0:	0017      	movs	r7, r2
 80002c2:	032b      	lsls	r3, r5, #12
 80002c4:	0a5a      	lsrs	r2, r3, #9
 80002c6:	0f4b      	lsrs	r3, r1, #29
 80002c8:	4313      	orrs	r3, r2
 80002ca:	00ca      	lsls	r2, r1, #3
 80002cc:	4691      	mov	r9, r2
 80002ce:	0302      	lsls	r2, r0, #12
 80002d0:	006e      	lsls	r6, r5, #1
 80002d2:	0041      	lsls	r1, r0, #1
 80002d4:	0a52      	lsrs	r2, r2, #9
 80002d6:	0fec      	lsrs	r4, r5, #31
 80002d8:	0f7d      	lsrs	r5, r7, #29
 80002da:	4315      	orrs	r5, r2
 80002dc:	0d76      	lsrs	r6, r6, #21
 80002de:	0d49      	lsrs	r1, r1, #21
 80002e0:	0fc0      	lsrs	r0, r0, #31
 80002e2:	4682      	mov	sl, r0
 80002e4:	46ac      	mov	ip, r5
 80002e6:	00ff      	lsls	r7, r7, #3
 80002e8:	1a72      	subs	r2, r6, r1
 80002ea:	4284      	cmp	r4, r0
 80002ec:	d100      	bne.n	80002f0 <__aeabi_dadd+0x40>
 80002ee:	e098      	b.n	8000422 <__aeabi_dadd+0x172>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	dc00      	bgt.n	80002f6 <__aeabi_dadd+0x46>
 80002f4:	e081      	b.n	80003fa <__aeabi_dadd+0x14a>
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d100      	bne.n	80002fc <__aeabi_dadd+0x4c>
 80002fa:	e0b6      	b.n	800046a <__aeabi_dadd+0x1ba>
 80002fc:	49c9      	ldr	r1, [pc, #804]	; (8000624 <__aeabi_dadd+0x374>)
 80002fe:	428e      	cmp	r6, r1
 8000300:	d100      	bne.n	8000304 <__aeabi_dadd+0x54>
 8000302:	e172      	b.n	80005ea <__aeabi_dadd+0x33a>
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	0028      	movs	r0, r5
 8000308:	0409      	lsls	r1, r1, #16
 800030a:	4308      	orrs	r0, r1
 800030c:	4684      	mov	ip, r0
 800030e:	2a38      	cmp	r2, #56	; 0x38
 8000310:	dd00      	ble.n	8000314 <__aeabi_dadd+0x64>
 8000312:	e15e      	b.n	80005d2 <__aeabi_dadd+0x322>
 8000314:	2a1f      	cmp	r2, #31
 8000316:	dd00      	ble.n	800031a <__aeabi_dadd+0x6a>
 8000318:	e1ee      	b.n	80006f8 <__aeabi_dadd+0x448>
 800031a:	2020      	movs	r0, #32
 800031c:	0039      	movs	r1, r7
 800031e:	4665      	mov	r5, ip
 8000320:	1a80      	subs	r0, r0, r2
 8000322:	4087      	lsls	r7, r0
 8000324:	40d1      	lsrs	r1, r2
 8000326:	4085      	lsls	r5, r0
 8000328:	430d      	orrs	r5, r1
 800032a:	0039      	movs	r1, r7
 800032c:	1e4f      	subs	r7, r1, #1
 800032e:	41b9      	sbcs	r1, r7
 8000330:	4667      	mov	r7, ip
 8000332:	40d7      	lsrs	r7, r2
 8000334:	4329      	orrs	r1, r5
 8000336:	1bdb      	subs	r3, r3, r7
 8000338:	464a      	mov	r2, r9
 800033a:	1a55      	subs	r5, r2, r1
 800033c:	45a9      	cmp	r9, r5
 800033e:	4189      	sbcs	r1, r1
 8000340:	4249      	negs	r1, r1
 8000342:	1a5b      	subs	r3, r3, r1
 8000344:	4698      	mov	r8, r3
 8000346:	4643      	mov	r3, r8
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	d400      	bmi.n	800034e <__aeabi_dadd+0x9e>
 800034c:	e0cc      	b.n	80004e8 <__aeabi_dadd+0x238>
 800034e:	4643      	mov	r3, r8
 8000350:	025b      	lsls	r3, r3, #9
 8000352:	0a5b      	lsrs	r3, r3, #9
 8000354:	4698      	mov	r8, r3
 8000356:	4643      	mov	r3, r8
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <__aeabi_dadd+0xae>
 800035c:	e12c      	b.n	80005b8 <__aeabi_dadd+0x308>
 800035e:	4640      	mov	r0, r8
 8000360:	f001 fdbe 	bl	8001ee0 <__clzsi2>
 8000364:	0001      	movs	r1, r0
 8000366:	3908      	subs	r1, #8
 8000368:	2220      	movs	r2, #32
 800036a:	0028      	movs	r0, r5
 800036c:	4643      	mov	r3, r8
 800036e:	1a52      	subs	r2, r2, r1
 8000370:	408b      	lsls	r3, r1
 8000372:	40d0      	lsrs	r0, r2
 8000374:	408d      	lsls	r5, r1
 8000376:	4303      	orrs	r3, r0
 8000378:	428e      	cmp	r6, r1
 800037a:	dd00      	ble.n	800037e <__aeabi_dadd+0xce>
 800037c:	e117      	b.n	80005ae <__aeabi_dadd+0x2fe>
 800037e:	1b8e      	subs	r6, r1, r6
 8000380:	1c72      	adds	r2, r6, #1
 8000382:	2a1f      	cmp	r2, #31
 8000384:	dd00      	ble.n	8000388 <__aeabi_dadd+0xd8>
 8000386:	e1a7      	b.n	80006d8 <__aeabi_dadd+0x428>
 8000388:	2120      	movs	r1, #32
 800038a:	0018      	movs	r0, r3
 800038c:	002e      	movs	r6, r5
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	408d      	lsls	r5, r1
 8000392:	4088      	lsls	r0, r1
 8000394:	40d6      	lsrs	r6, r2
 8000396:	40d3      	lsrs	r3, r2
 8000398:	1e69      	subs	r1, r5, #1
 800039a:	418d      	sbcs	r5, r1
 800039c:	4330      	orrs	r0, r6
 800039e:	4698      	mov	r8, r3
 80003a0:	2600      	movs	r6, #0
 80003a2:	4305      	orrs	r5, r0
 80003a4:	076b      	lsls	r3, r5, #29
 80003a6:	d009      	beq.n	80003bc <__aeabi_dadd+0x10c>
 80003a8:	230f      	movs	r3, #15
 80003aa:	402b      	ands	r3, r5
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d005      	beq.n	80003bc <__aeabi_dadd+0x10c>
 80003b0:	1d2b      	adds	r3, r5, #4
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	41ad      	sbcs	r5, r5
 80003b6:	426d      	negs	r5, r5
 80003b8:	44a8      	add	r8, r5
 80003ba:	001d      	movs	r5, r3
 80003bc:	4643      	mov	r3, r8
 80003be:	021b      	lsls	r3, r3, #8
 80003c0:	d400      	bmi.n	80003c4 <__aeabi_dadd+0x114>
 80003c2:	e094      	b.n	80004ee <__aeabi_dadd+0x23e>
 80003c4:	4b97      	ldr	r3, [pc, #604]	; (8000624 <__aeabi_dadd+0x374>)
 80003c6:	1c72      	adds	r2, r6, #1
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d100      	bne.n	80003ce <__aeabi_dadd+0x11e>
 80003cc:	e09d      	b.n	800050a <__aeabi_dadd+0x25a>
 80003ce:	4641      	mov	r1, r8
 80003d0:	4b95      	ldr	r3, [pc, #596]	; (8000628 <__aeabi_dadd+0x378>)
 80003d2:	08ed      	lsrs	r5, r5, #3
 80003d4:	4019      	ands	r1, r3
 80003d6:	000b      	movs	r3, r1
 80003d8:	0552      	lsls	r2, r2, #21
 80003da:	0749      	lsls	r1, r1, #29
 80003dc:	025b      	lsls	r3, r3, #9
 80003de:	4329      	orrs	r1, r5
 80003e0:	0b1b      	lsrs	r3, r3, #12
 80003e2:	0d52      	lsrs	r2, r2, #21
 80003e4:	0512      	lsls	r2, r2, #20
 80003e6:	4313      	orrs	r3, r2
 80003e8:	07e4      	lsls	r4, r4, #31
 80003ea:	4323      	orrs	r3, r4
 80003ec:	0008      	movs	r0, r1
 80003ee:	0019      	movs	r1, r3
 80003f0:	bce0      	pop	{r5, r6, r7}
 80003f2:	46ba      	mov	sl, r7
 80003f4:	46b1      	mov	r9, r6
 80003f6:	46a8      	mov	r8, r5
 80003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d043      	beq.n	8000486 <__aeabi_dadd+0x1d6>
 80003fe:	1b8a      	subs	r2, r1, r6
 8000400:	2e00      	cmp	r6, #0
 8000402:	d000      	beq.n	8000406 <__aeabi_dadd+0x156>
 8000404:	e12a      	b.n	800065c <__aeabi_dadd+0x3ac>
 8000406:	464c      	mov	r4, r9
 8000408:	431c      	orrs	r4, r3
 800040a:	d100      	bne.n	800040e <__aeabi_dadd+0x15e>
 800040c:	e1d1      	b.n	80007b2 <__aeabi_dadd+0x502>
 800040e:	1e54      	subs	r4, r2, #1
 8000410:	2a01      	cmp	r2, #1
 8000412:	d100      	bne.n	8000416 <__aeabi_dadd+0x166>
 8000414:	e21f      	b.n	8000856 <__aeabi_dadd+0x5a6>
 8000416:	4d83      	ldr	r5, [pc, #524]	; (8000624 <__aeabi_dadd+0x374>)
 8000418:	42aa      	cmp	r2, r5
 800041a:	d100      	bne.n	800041e <__aeabi_dadd+0x16e>
 800041c:	e272      	b.n	8000904 <__aeabi_dadd+0x654>
 800041e:	0022      	movs	r2, r4
 8000420:	e123      	b.n	800066a <__aeabi_dadd+0x3ba>
 8000422:	2a00      	cmp	r2, #0
 8000424:	dc00      	bgt.n	8000428 <__aeabi_dadd+0x178>
 8000426:	e098      	b.n	800055a <__aeabi_dadd+0x2aa>
 8000428:	2900      	cmp	r1, #0
 800042a:	d042      	beq.n	80004b2 <__aeabi_dadd+0x202>
 800042c:	497d      	ldr	r1, [pc, #500]	; (8000624 <__aeabi_dadd+0x374>)
 800042e:	428e      	cmp	r6, r1
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x184>
 8000432:	e0da      	b.n	80005ea <__aeabi_dadd+0x33a>
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0028      	movs	r0, r5
 8000438:	0409      	lsls	r1, r1, #16
 800043a:	4308      	orrs	r0, r1
 800043c:	4684      	mov	ip, r0
 800043e:	2a38      	cmp	r2, #56	; 0x38
 8000440:	dd00      	ble.n	8000444 <__aeabi_dadd+0x194>
 8000442:	e129      	b.n	8000698 <__aeabi_dadd+0x3e8>
 8000444:	2a1f      	cmp	r2, #31
 8000446:	dc00      	bgt.n	800044a <__aeabi_dadd+0x19a>
 8000448:	e187      	b.n	800075a <__aeabi_dadd+0x4aa>
 800044a:	0011      	movs	r1, r2
 800044c:	4665      	mov	r5, ip
 800044e:	3920      	subs	r1, #32
 8000450:	40cd      	lsrs	r5, r1
 8000452:	2a20      	cmp	r2, #32
 8000454:	d004      	beq.n	8000460 <__aeabi_dadd+0x1b0>
 8000456:	2040      	movs	r0, #64	; 0x40
 8000458:	4661      	mov	r1, ip
 800045a:	1a82      	subs	r2, r0, r2
 800045c:	4091      	lsls	r1, r2
 800045e:	430f      	orrs	r7, r1
 8000460:	0039      	movs	r1, r7
 8000462:	1e4f      	subs	r7, r1, #1
 8000464:	41b9      	sbcs	r1, r7
 8000466:	430d      	orrs	r5, r1
 8000468:	e11b      	b.n	80006a2 <__aeabi_dadd+0x3f2>
 800046a:	0029      	movs	r1, r5
 800046c:	4339      	orrs	r1, r7
 800046e:	d100      	bne.n	8000472 <__aeabi_dadd+0x1c2>
 8000470:	e0b5      	b.n	80005de <__aeabi_dadd+0x32e>
 8000472:	1e51      	subs	r1, r2, #1
 8000474:	2a01      	cmp	r2, #1
 8000476:	d100      	bne.n	800047a <__aeabi_dadd+0x1ca>
 8000478:	e1ab      	b.n	80007d2 <__aeabi_dadd+0x522>
 800047a:	486a      	ldr	r0, [pc, #424]	; (8000624 <__aeabi_dadd+0x374>)
 800047c:	4282      	cmp	r2, r0
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x1d2>
 8000480:	e1b2      	b.n	80007e8 <__aeabi_dadd+0x538>
 8000482:	000a      	movs	r2, r1
 8000484:	e743      	b.n	800030e <__aeabi_dadd+0x5e>
 8000486:	4969      	ldr	r1, [pc, #420]	; (800062c <__aeabi_dadd+0x37c>)
 8000488:	1c75      	adds	r5, r6, #1
 800048a:	420d      	tst	r5, r1
 800048c:	d000      	beq.n	8000490 <__aeabi_dadd+0x1e0>
 800048e:	e0cf      	b.n	8000630 <__aeabi_dadd+0x380>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x1e6>
 8000494:	e193      	b.n	80007be <__aeabi_dadd+0x50e>
 8000496:	4649      	mov	r1, r9
 8000498:	4319      	orrs	r1, r3
 800049a:	d100      	bne.n	800049e <__aeabi_dadd+0x1ee>
 800049c:	e1d1      	b.n	8000842 <__aeabi_dadd+0x592>
 800049e:	4661      	mov	r1, ip
 80004a0:	4339      	orrs	r1, r7
 80004a2:	d000      	beq.n	80004a6 <__aeabi_dadd+0x1f6>
 80004a4:	e1e3      	b.n	800086e <__aeabi_dadd+0x5be>
 80004a6:	4649      	mov	r1, r9
 80004a8:	0758      	lsls	r0, r3, #29
 80004aa:	08c9      	lsrs	r1, r1, #3
 80004ac:	4301      	orrs	r1, r0
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	e026      	b.n	8000500 <__aeabi_dadd+0x250>
 80004b2:	0029      	movs	r1, r5
 80004b4:	4339      	orrs	r1, r7
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x20a>
 80004b8:	e091      	b.n	80005de <__aeabi_dadd+0x32e>
 80004ba:	1e51      	subs	r1, r2, #1
 80004bc:	2a01      	cmp	r2, #1
 80004be:	d005      	beq.n	80004cc <__aeabi_dadd+0x21c>
 80004c0:	4858      	ldr	r0, [pc, #352]	; (8000624 <__aeabi_dadd+0x374>)
 80004c2:	4282      	cmp	r2, r0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dadd+0x218>
 80004c6:	e18f      	b.n	80007e8 <__aeabi_dadd+0x538>
 80004c8:	000a      	movs	r2, r1
 80004ca:	e7b8      	b.n	800043e <__aeabi_dadd+0x18e>
 80004cc:	003d      	movs	r5, r7
 80004ce:	444d      	add	r5, r9
 80004d0:	454d      	cmp	r5, r9
 80004d2:	4189      	sbcs	r1, r1
 80004d4:	4463      	add	r3, ip
 80004d6:	4698      	mov	r8, r3
 80004d8:	4249      	negs	r1, r1
 80004da:	4488      	add	r8, r1
 80004dc:	4643      	mov	r3, r8
 80004de:	2602      	movs	r6, #2
 80004e0:	021b      	lsls	r3, r3, #8
 80004e2:	d500      	bpl.n	80004e6 <__aeabi_dadd+0x236>
 80004e4:	e0eb      	b.n	80006be <__aeabi_dadd+0x40e>
 80004e6:	3e01      	subs	r6, #1
 80004e8:	076b      	lsls	r3, r5, #29
 80004ea:	d000      	beq.n	80004ee <__aeabi_dadd+0x23e>
 80004ec:	e75c      	b.n	80003a8 <__aeabi_dadd+0xf8>
 80004ee:	4643      	mov	r3, r8
 80004f0:	08e9      	lsrs	r1, r5, #3
 80004f2:	075a      	lsls	r2, r3, #29
 80004f4:	4311      	orrs	r1, r2
 80004f6:	0032      	movs	r2, r6
 80004f8:	08db      	lsrs	r3, r3, #3
 80004fa:	484a      	ldr	r0, [pc, #296]	; (8000624 <__aeabi_dadd+0x374>)
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d021      	beq.n	8000544 <__aeabi_dadd+0x294>
 8000500:	031b      	lsls	r3, r3, #12
 8000502:	0552      	lsls	r2, r2, #21
 8000504:	0b1b      	lsrs	r3, r3, #12
 8000506:	0d52      	lsrs	r2, r2, #21
 8000508:	e76c      	b.n	80003e4 <__aeabi_dadd+0x134>
 800050a:	2300      	movs	r3, #0
 800050c:	2100      	movs	r1, #0
 800050e:	e769      	b.n	80003e4 <__aeabi_dadd+0x134>
 8000510:	002a      	movs	r2, r5
 8000512:	433a      	orrs	r2, r7
 8000514:	d069      	beq.n	80005ea <__aeabi_dadd+0x33a>
 8000516:	464a      	mov	r2, r9
 8000518:	0758      	lsls	r0, r3, #29
 800051a:	08d1      	lsrs	r1, r2, #3
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	031b      	lsls	r3, r3, #12
 8000522:	4308      	orrs	r0, r1
 8000524:	421a      	tst	r2, r3
 8000526:	d007      	beq.n	8000538 <__aeabi_dadd+0x288>
 8000528:	0029      	movs	r1, r5
 800052a:	08ed      	lsrs	r5, r5, #3
 800052c:	421d      	tst	r5, r3
 800052e:	d103      	bne.n	8000538 <__aeabi_dadd+0x288>
 8000530:	002a      	movs	r2, r5
 8000532:	08ff      	lsrs	r7, r7, #3
 8000534:	0748      	lsls	r0, r1, #29
 8000536:	4338      	orrs	r0, r7
 8000538:	0f43      	lsrs	r3, r0, #29
 800053a:	00c1      	lsls	r1, r0, #3
 800053c:	075b      	lsls	r3, r3, #29
 800053e:	08c9      	lsrs	r1, r1, #3
 8000540:	4319      	orrs	r1, r3
 8000542:	0013      	movs	r3, r2
 8000544:	000a      	movs	r2, r1
 8000546:	431a      	orrs	r2, r3
 8000548:	d100      	bne.n	800054c <__aeabi_dadd+0x29c>
 800054a:	e213      	b.n	8000974 <__aeabi_dadd+0x6c4>
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0312      	lsls	r2, r2, #12
 8000550:	4313      	orrs	r3, r2
 8000552:	031b      	lsls	r3, r3, #12
 8000554:	4a33      	ldr	r2, [pc, #204]	; (8000624 <__aeabi_dadd+0x374>)
 8000556:	0b1b      	lsrs	r3, r3, #12
 8000558:	e744      	b.n	80003e4 <__aeabi_dadd+0x134>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d04b      	beq.n	80005f6 <__aeabi_dadd+0x346>
 800055e:	1b8a      	subs	r2, r1, r6
 8000560:	2e00      	cmp	r6, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x2b6>
 8000564:	e0e7      	b.n	8000736 <__aeabi_dadd+0x486>
 8000566:	482f      	ldr	r0, [pc, #188]	; (8000624 <__aeabi_dadd+0x374>)
 8000568:	4281      	cmp	r1, r0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x2be>
 800056c:	e195      	b.n	800089a <__aeabi_dadd+0x5ea>
 800056e:	2080      	movs	r0, #128	; 0x80
 8000570:	0400      	lsls	r0, r0, #16
 8000572:	4303      	orrs	r3, r0
 8000574:	2a38      	cmp	r2, #56	; 0x38
 8000576:	dd00      	ble.n	800057a <__aeabi_dadd+0x2ca>
 8000578:	e143      	b.n	8000802 <__aeabi_dadd+0x552>
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0x2d0>
 800057e:	e1db      	b.n	8000938 <__aeabi_dadd+0x688>
 8000580:	2020      	movs	r0, #32
 8000582:	001d      	movs	r5, r3
 8000584:	464e      	mov	r6, r9
 8000586:	1a80      	subs	r0, r0, r2
 8000588:	4085      	lsls	r5, r0
 800058a:	40d6      	lsrs	r6, r2
 800058c:	4335      	orrs	r5, r6
 800058e:	464e      	mov	r6, r9
 8000590:	4086      	lsls	r6, r0
 8000592:	0030      	movs	r0, r6
 8000594:	40d3      	lsrs	r3, r2
 8000596:	1e46      	subs	r6, r0, #1
 8000598:	41b0      	sbcs	r0, r6
 800059a:	449c      	add	ip, r3
 800059c:	4305      	orrs	r5, r0
 800059e:	19ed      	adds	r5, r5, r7
 80005a0:	42bd      	cmp	r5, r7
 80005a2:	419b      	sbcs	r3, r3
 80005a4:	425b      	negs	r3, r3
 80005a6:	4463      	add	r3, ip
 80005a8:	4698      	mov	r8, r3
 80005aa:	000e      	movs	r6, r1
 80005ac:	e07f      	b.n	80006ae <__aeabi_dadd+0x3fe>
 80005ae:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <__aeabi_dadd+0x378>)
 80005b0:	1a76      	subs	r6, r6, r1
 80005b2:	4013      	ands	r3, r2
 80005b4:	4698      	mov	r8, r3
 80005b6:	e6f5      	b.n	80003a4 <__aeabi_dadd+0xf4>
 80005b8:	0028      	movs	r0, r5
 80005ba:	f001 fc91 	bl	8001ee0 <__clzsi2>
 80005be:	0001      	movs	r1, r0
 80005c0:	3118      	adds	r1, #24
 80005c2:	291f      	cmp	r1, #31
 80005c4:	dc00      	bgt.n	80005c8 <__aeabi_dadd+0x318>
 80005c6:	e6cf      	b.n	8000368 <__aeabi_dadd+0xb8>
 80005c8:	002b      	movs	r3, r5
 80005ca:	3808      	subs	r0, #8
 80005cc:	4083      	lsls	r3, r0
 80005ce:	2500      	movs	r5, #0
 80005d0:	e6d2      	b.n	8000378 <__aeabi_dadd+0xc8>
 80005d2:	4662      	mov	r2, ip
 80005d4:	433a      	orrs	r2, r7
 80005d6:	0011      	movs	r1, r2
 80005d8:	1e4f      	subs	r7, r1, #1
 80005da:	41b9      	sbcs	r1, r7
 80005dc:	e6ac      	b.n	8000338 <__aeabi_dadd+0x88>
 80005de:	4649      	mov	r1, r9
 80005e0:	0758      	lsls	r0, r3, #29
 80005e2:	08c9      	lsrs	r1, r1, #3
 80005e4:	4301      	orrs	r1, r0
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	e787      	b.n	80004fa <__aeabi_dadd+0x24a>
 80005ea:	4649      	mov	r1, r9
 80005ec:	075a      	lsls	r2, r3, #29
 80005ee:	08c9      	lsrs	r1, r1, #3
 80005f0:	4311      	orrs	r1, r2
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	e7a6      	b.n	8000544 <__aeabi_dadd+0x294>
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <__aeabi_dadd+0x37c>)
 80005f8:	1c70      	adds	r0, r6, #1
 80005fa:	4208      	tst	r0, r1
 80005fc:	d000      	beq.n	8000600 <__aeabi_dadd+0x350>
 80005fe:	e0bb      	b.n	8000778 <__aeabi_dadd+0x4c8>
 8000600:	2e00      	cmp	r6, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_dadd+0x356>
 8000604:	e114      	b.n	8000830 <__aeabi_dadd+0x580>
 8000606:	4649      	mov	r1, r9
 8000608:	4319      	orrs	r1, r3
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x35e>
 800060c:	e175      	b.n	80008fa <__aeabi_dadd+0x64a>
 800060e:	0029      	movs	r1, r5
 8000610:	4339      	orrs	r1, r7
 8000612:	d000      	beq.n	8000616 <__aeabi_dadd+0x366>
 8000614:	e17e      	b.n	8000914 <__aeabi_dadd+0x664>
 8000616:	4649      	mov	r1, r9
 8000618:	0758      	lsls	r0, r3, #29
 800061a:	08c9      	lsrs	r1, r1, #3
 800061c:	4301      	orrs	r1, r0
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	e76e      	b.n	8000500 <__aeabi_dadd+0x250>
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	000007ff 	.word	0x000007ff
 8000628:	ff7fffff 	.word	0xff7fffff
 800062c:	000007fe 	.word	0x000007fe
 8000630:	4649      	mov	r1, r9
 8000632:	1bcd      	subs	r5, r1, r7
 8000634:	4661      	mov	r1, ip
 8000636:	1a58      	subs	r0, r3, r1
 8000638:	45a9      	cmp	r9, r5
 800063a:	4189      	sbcs	r1, r1
 800063c:	4249      	negs	r1, r1
 800063e:	4688      	mov	r8, r1
 8000640:	0001      	movs	r1, r0
 8000642:	4640      	mov	r0, r8
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	4688      	mov	r8, r1
 8000648:	0209      	lsls	r1, r1, #8
 800064a:	d500      	bpl.n	800064e <__aeabi_dadd+0x39e>
 800064c:	e0a6      	b.n	800079c <__aeabi_dadd+0x4ec>
 800064e:	4641      	mov	r1, r8
 8000650:	4329      	orrs	r1, r5
 8000652:	d000      	beq.n	8000656 <__aeabi_dadd+0x3a6>
 8000654:	e67f      	b.n	8000356 <__aeabi_dadd+0xa6>
 8000656:	2300      	movs	r3, #0
 8000658:	2400      	movs	r4, #0
 800065a:	e751      	b.n	8000500 <__aeabi_dadd+0x250>
 800065c:	4cc7      	ldr	r4, [pc, #796]	; (800097c <__aeabi_dadd+0x6cc>)
 800065e:	42a1      	cmp	r1, r4
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x3b4>
 8000662:	e0c7      	b.n	80007f4 <__aeabi_dadd+0x544>
 8000664:	2480      	movs	r4, #128	; 0x80
 8000666:	0424      	lsls	r4, r4, #16
 8000668:	4323      	orrs	r3, r4
 800066a:	2a38      	cmp	r2, #56	; 0x38
 800066c:	dc54      	bgt.n	8000718 <__aeabi_dadd+0x468>
 800066e:	2a1f      	cmp	r2, #31
 8000670:	dd00      	ble.n	8000674 <__aeabi_dadd+0x3c4>
 8000672:	e0cc      	b.n	800080e <__aeabi_dadd+0x55e>
 8000674:	2420      	movs	r4, #32
 8000676:	4648      	mov	r0, r9
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	001d      	movs	r5, r3
 800067c:	464e      	mov	r6, r9
 800067e:	40a0      	lsls	r0, r4
 8000680:	40d6      	lsrs	r6, r2
 8000682:	40a5      	lsls	r5, r4
 8000684:	0004      	movs	r4, r0
 8000686:	40d3      	lsrs	r3, r2
 8000688:	4662      	mov	r2, ip
 800068a:	4335      	orrs	r5, r6
 800068c:	1e66      	subs	r6, r4, #1
 800068e:	41b4      	sbcs	r4, r6
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	469c      	mov	ip, r3
 8000694:	4325      	orrs	r5, r4
 8000696:	e044      	b.n	8000722 <__aeabi_dadd+0x472>
 8000698:	4662      	mov	r2, ip
 800069a:	433a      	orrs	r2, r7
 800069c:	0015      	movs	r5, r2
 800069e:	1e6f      	subs	r7, r5, #1
 80006a0:	41bd      	sbcs	r5, r7
 80006a2:	444d      	add	r5, r9
 80006a4:	454d      	cmp	r5, r9
 80006a6:	4189      	sbcs	r1, r1
 80006a8:	4249      	negs	r1, r1
 80006aa:	4688      	mov	r8, r1
 80006ac:	4498      	add	r8, r3
 80006ae:	4643      	mov	r3, r8
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_dadd+0x406>
 80006b4:	e718      	b.n	80004e8 <__aeabi_dadd+0x238>
 80006b6:	4bb1      	ldr	r3, [pc, #708]	; (800097c <__aeabi_dadd+0x6cc>)
 80006b8:	3601      	adds	r6, #1
 80006ba:	429e      	cmp	r6, r3
 80006bc:	d049      	beq.n	8000752 <__aeabi_dadd+0x4a2>
 80006be:	4642      	mov	r2, r8
 80006c0:	4baf      	ldr	r3, [pc, #700]	; (8000980 <__aeabi_dadd+0x6d0>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	401a      	ands	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	086a      	lsrs	r2, r5, #1
 80006ca:	400d      	ands	r5, r1
 80006cc:	4315      	orrs	r5, r2
 80006ce:	07d9      	lsls	r1, r3, #31
 80006d0:	085b      	lsrs	r3, r3, #1
 80006d2:	4698      	mov	r8, r3
 80006d4:	430d      	orrs	r5, r1
 80006d6:	e665      	b.n	80003a4 <__aeabi_dadd+0xf4>
 80006d8:	0018      	movs	r0, r3
 80006da:	3e1f      	subs	r6, #31
 80006dc:	40f0      	lsrs	r0, r6
 80006de:	2a20      	cmp	r2, #32
 80006e0:	d003      	beq.n	80006ea <__aeabi_dadd+0x43a>
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	1a8a      	subs	r2, r1, r2
 80006e6:	4093      	lsls	r3, r2
 80006e8:	431d      	orrs	r5, r3
 80006ea:	1e69      	subs	r1, r5, #1
 80006ec:	418d      	sbcs	r5, r1
 80006ee:	2300      	movs	r3, #0
 80006f0:	2600      	movs	r6, #0
 80006f2:	4698      	mov	r8, r3
 80006f4:	4305      	orrs	r5, r0
 80006f6:	e6f7      	b.n	80004e8 <__aeabi_dadd+0x238>
 80006f8:	0011      	movs	r1, r2
 80006fa:	4665      	mov	r5, ip
 80006fc:	3920      	subs	r1, #32
 80006fe:	40cd      	lsrs	r5, r1
 8000700:	2a20      	cmp	r2, #32
 8000702:	d004      	beq.n	800070e <__aeabi_dadd+0x45e>
 8000704:	2040      	movs	r0, #64	; 0x40
 8000706:	4661      	mov	r1, ip
 8000708:	1a82      	subs	r2, r0, r2
 800070a:	4091      	lsls	r1, r2
 800070c:	430f      	orrs	r7, r1
 800070e:	0039      	movs	r1, r7
 8000710:	1e4f      	subs	r7, r1, #1
 8000712:	41b9      	sbcs	r1, r7
 8000714:	4329      	orrs	r1, r5
 8000716:	e60f      	b.n	8000338 <__aeabi_dadd+0x88>
 8000718:	464a      	mov	r2, r9
 800071a:	4313      	orrs	r3, r2
 800071c:	001d      	movs	r5, r3
 800071e:	1e6b      	subs	r3, r5, #1
 8000720:	419d      	sbcs	r5, r3
 8000722:	1b7d      	subs	r5, r7, r5
 8000724:	42af      	cmp	r7, r5
 8000726:	419b      	sbcs	r3, r3
 8000728:	4662      	mov	r2, ip
 800072a:	425b      	negs	r3, r3
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4698      	mov	r8, r3
 8000730:	4654      	mov	r4, sl
 8000732:	000e      	movs	r6, r1
 8000734:	e607      	b.n	8000346 <__aeabi_dadd+0x96>
 8000736:	4648      	mov	r0, r9
 8000738:	4318      	orrs	r0, r3
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0x48e>
 800073c:	e0b3      	b.n	80008a6 <__aeabi_dadd+0x5f6>
 800073e:	1e50      	subs	r0, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x496>
 8000744:	e10d      	b.n	8000962 <__aeabi_dadd+0x6b2>
 8000746:	4d8d      	ldr	r5, [pc, #564]	; (800097c <__aeabi_dadd+0x6cc>)
 8000748:	42aa      	cmp	r2, r5
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x49e>
 800074c:	e0a5      	b.n	800089a <__aeabi_dadd+0x5ea>
 800074e:	0002      	movs	r2, r0
 8000750:	e710      	b.n	8000574 <__aeabi_dadd+0x2c4>
 8000752:	0032      	movs	r2, r6
 8000754:	2300      	movs	r3, #0
 8000756:	2100      	movs	r1, #0
 8000758:	e644      	b.n	80003e4 <__aeabi_dadd+0x134>
 800075a:	2120      	movs	r1, #32
 800075c:	0038      	movs	r0, r7
 800075e:	1a89      	subs	r1, r1, r2
 8000760:	4665      	mov	r5, ip
 8000762:	408f      	lsls	r7, r1
 8000764:	408d      	lsls	r5, r1
 8000766:	40d0      	lsrs	r0, r2
 8000768:	1e79      	subs	r1, r7, #1
 800076a:	418f      	sbcs	r7, r1
 800076c:	4305      	orrs	r5, r0
 800076e:	433d      	orrs	r5, r7
 8000770:	4667      	mov	r7, ip
 8000772:	40d7      	lsrs	r7, r2
 8000774:	19db      	adds	r3, r3, r7
 8000776:	e794      	b.n	80006a2 <__aeabi_dadd+0x3f2>
 8000778:	4a80      	ldr	r2, [pc, #512]	; (800097c <__aeabi_dadd+0x6cc>)
 800077a:	4290      	cmp	r0, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x4d0>
 800077e:	e0ec      	b.n	800095a <__aeabi_dadd+0x6aa>
 8000780:	0039      	movs	r1, r7
 8000782:	4449      	add	r1, r9
 8000784:	4549      	cmp	r1, r9
 8000786:	4192      	sbcs	r2, r2
 8000788:	4463      	add	r3, ip
 800078a:	4252      	negs	r2, r2
 800078c:	189b      	adds	r3, r3, r2
 800078e:	07dd      	lsls	r5, r3, #31
 8000790:	0849      	lsrs	r1, r1, #1
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	4698      	mov	r8, r3
 8000796:	0006      	movs	r6, r0
 8000798:	430d      	orrs	r5, r1
 800079a:	e6a5      	b.n	80004e8 <__aeabi_dadd+0x238>
 800079c:	464a      	mov	r2, r9
 800079e:	1abd      	subs	r5, r7, r2
 80007a0:	42af      	cmp	r7, r5
 80007a2:	4189      	sbcs	r1, r1
 80007a4:	4662      	mov	r2, ip
 80007a6:	4249      	negs	r1, r1
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	1a5b      	subs	r3, r3, r1
 80007ac:	4698      	mov	r8, r3
 80007ae:	4654      	mov	r4, sl
 80007b0:	e5d1      	b.n	8000356 <__aeabi_dadd+0xa6>
 80007b2:	076c      	lsls	r4, r5, #29
 80007b4:	08f9      	lsrs	r1, r7, #3
 80007b6:	4321      	orrs	r1, r4
 80007b8:	08eb      	lsrs	r3, r5, #3
 80007ba:	0004      	movs	r4, r0
 80007bc:	e69d      	b.n	80004fa <__aeabi_dadd+0x24a>
 80007be:	464a      	mov	r2, r9
 80007c0:	431a      	orrs	r2, r3
 80007c2:	d175      	bne.n	80008b0 <__aeabi_dadd+0x600>
 80007c4:	4661      	mov	r1, ip
 80007c6:	4339      	orrs	r1, r7
 80007c8:	d114      	bne.n	80007f4 <__aeabi_dadd+0x544>
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	2400      	movs	r4, #0
 80007ce:	031b      	lsls	r3, r3, #12
 80007d0:	e6bc      	b.n	800054c <__aeabi_dadd+0x29c>
 80007d2:	464a      	mov	r2, r9
 80007d4:	1bd5      	subs	r5, r2, r7
 80007d6:	45a9      	cmp	r9, r5
 80007d8:	4189      	sbcs	r1, r1
 80007da:	4662      	mov	r2, ip
 80007dc:	4249      	negs	r1, r1
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	1a5b      	subs	r3, r3, r1
 80007e2:	4698      	mov	r8, r3
 80007e4:	2601      	movs	r6, #1
 80007e6:	e5ae      	b.n	8000346 <__aeabi_dadd+0x96>
 80007e8:	464a      	mov	r2, r9
 80007ea:	08d1      	lsrs	r1, r2, #3
 80007ec:	075a      	lsls	r2, r3, #29
 80007ee:	4311      	orrs	r1, r2
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	e6a7      	b.n	8000544 <__aeabi_dadd+0x294>
 80007f4:	4663      	mov	r3, ip
 80007f6:	08f9      	lsrs	r1, r7, #3
 80007f8:	075a      	lsls	r2, r3, #29
 80007fa:	4654      	mov	r4, sl
 80007fc:	4311      	orrs	r1, r2
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	e6a0      	b.n	8000544 <__aeabi_dadd+0x294>
 8000802:	464a      	mov	r2, r9
 8000804:	4313      	orrs	r3, r2
 8000806:	001d      	movs	r5, r3
 8000808:	1e6b      	subs	r3, r5, #1
 800080a:	419d      	sbcs	r5, r3
 800080c:	e6c7      	b.n	800059e <__aeabi_dadd+0x2ee>
 800080e:	0014      	movs	r4, r2
 8000810:	001e      	movs	r6, r3
 8000812:	3c20      	subs	r4, #32
 8000814:	40e6      	lsrs	r6, r4
 8000816:	2a20      	cmp	r2, #32
 8000818:	d005      	beq.n	8000826 <__aeabi_dadd+0x576>
 800081a:	2440      	movs	r4, #64	; 0x40
 800081c:	1aa2      	subs	r2, r4, r2
 800081e:	4093      	lsls	r3, r2
 8000820:	464a      	mov	r2, r9
 8000822:	431a      	orrs	r2, r3
 8000824:	4691      	mov	r9, r2
 8000826:	464d      	mov	r5, r9
 8000828:	1e6b      	subs	r3, r5, #1
 800082a:	419d      	sbcs	r5, r3
 800082c:	4335      	orrs	r5, r6
 800082e:	e778      	b.n	8000722 <__aeabi_dadd+0x472>
 8000830:	464a      	mov	r2, r9
 8000832:	431a      	orrs	r2, r3
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x588>
 8000836:	e66b      	b.n	8000510 <__aeabi_dadd+0x260>
 8000838:	076b      	lsls	r3, r5, #29
 800083a:	08f9      	lsrs	r1, r7, #3
 800083c:	4319      	orrs	r1, r3
 800083e:	08eb      	lsrs	r3, r5, #3
 8000840:	e680      	b.n	8000544 <__aeabi_dadd+0x294>
 8000842:	4661      	mov	r1, ip
 8000844:	4339      	orrs	r1, r7
 8000846:	d054      	beq.n	80008f2 <__aeabi_dadd+0x642>
 8000848:	4663      	mov	r3, ip
 800084a:	08f9      	lsrs	r1, r7, #3
 800084c:	075c      	lsls	r4, r3, #29
 800084e:	4321      	orrs	r1, r4
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	0004      	movs	r4, r0
 8000854:	e654      	b.n	8000500 <__aeabi_dadd+0x250>
 8000856:	464a      	mov	r2, r9
 8000858:	1abd      	subs	r5, r7, r2
 800085a:	42af      	cmp	r7, r5
 800085c:	4189      	sbcs	r1, r1
 800085e:	4662      	mov	r2, ip
 8000860:	4249      	negs	r1, r1
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	4698      	mov	r8, r3
 8000868:	0004      	movs	r4, r0
 800086a:	2601      	movs	r6, #1
 800086c:	e56b      	b.n	8000346 <__aeabi_dadd+0x96>
 800086e:	464a      	mov	r2, r9
 8000870:	1bd5      	subs	r5, r2, r7
 8000872:	45a9      	cmp	r9, r5
 8000874:	4189      	sbcs	r1, r1
 8000876:	4662      	mov	r2, ip
 8000878:	4249      	negs	r1, r1
 800087a:	1a9a      	subs	r2, r3, r2
 800087c:	1a52      	subs	r2, r2, r1
 800087e:	4690      	mov	r8, r2
 8000880:	0212      	lsls	r2, r2, #8
 8000882:	d532      	bpl.n	80008ea <__aeabi_dadd+0x63a>
 8000884:	464a      	mov	r2, r9
 8000886:	1abd      	subs	r5, r7, r2
 8000888:	42af      	cmp	r7, r5
 800088a:	4189      	sbcs	r1, r1
 800088c:	4662      	mov	r2, ip
 800088e:	4249      	negs	r1, r1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	1a5b      	subs	r3, r3, r1
 8000894:	4698      	mov	r8, r3
 8000896:	0004      	movs	r4, r0
 8000898:	e584      	b.n	80003a4 <__aeabi_dadd+0xf4>
 800089a:	4663      	mov	r3, ip
 800089c:	08f9      	lsrs	r1, r7, #3
 800089e:	075a      	lsls	r2, r3, #29
 80008a0:	4311      	orrs	r1, r2
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	e64e      	b.n	8000544 <__aeabi_dadd+0x294>
 80008a6:	08f9      	lsrs	r1, r7, #3
 80008a8:	0768      	lsls	r0, r5, #29
 80008aa:	4301      	orrs	r1, r0
 80008ac:	08eb      	lsrs	r3, r5, #3
 80008ae:	e624      	b.n	80004fa <__aeabi_dadd+0x24a>
 80008b0:	4662      	mov	r2, ip
 80008b2:	433a      	orrs	r2, r7
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x608>
 80008b6:	e698      	b.n	80005ea <__aeabi_dadd+0x33a>
 80008b8:	464a      	mov	r2, r9
 80008ba:	08d1      	lsrs	r1, r2, #3
 80008bc:	075a      	lsls	r2, r3, #29
 80008be:	4311      	orrs	r1, r2
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	031b      	lsls	r3, r3, #12
 80008c6:	421a      	tst	r2, r3
 80008c8:	d008      	beq.n	80008dc <__aeabi_dadd+0x62c>
 80008ca:	4660      	mov	r0, ip
 80008cc:	08c5      	lsrs	r5, r0, #3
 80008ce:	421d      	tst	r5, r3
 80008d0:	d104      	bne.n	80008dc <__aeabi_dadd+0x62c>
 80008d2:	4654      	mov	r4, sl
 80008d4:	002a      	movs	r2, r5
 80008d6:	08f9      	lsrs	r1, r7, #3
 80008d8:	0743      	lsls	r3, r0, #29
 80008da:	4319      	orrs	r1, r3
 80008dc:	0f4b      	lsrs	r3, r1, #29
 80008de:	00c9      	lsls	r1, r1, #3
 80008e0:	075b      	lsls	r3, r3, #29
 80008e2:	08c9      	lsrs	r1, r1, #3
 80008e4:	4319      	orrs	r1, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	e62c      	b.n	8000544 <__aeabi_dadd+0x294>
 80008ea:	4641      	mov	r1, r8
 80008ec:	4329      	orrs	r1, r5
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x642>
 80008f0:	e5fa      	b.n	80004e8 <__aeabi_dadd+0x238>
 80008f2:	2300      	movs	r3, #0
 80008f4:	000a      	movs	r2, r1
 80008f6:	2400      	movs	r4, #0
 80008f8:	e602      	b.n	8000500 <__aeabi_dadd+0x250>
 80008fa:	076b      	lsls	r3, r5, #29
 80008fc:	08f9      	lsrs	r1, r7, #3
 80008fe:	4319      	orrs	r1, r3
 8000900:	08eb      	lsrs	r3, r5, #3
 8000902:	e5fd      	b.n	8000500 <__aeabi_dadd+0x250>
 8000904:	4663      	mov	r3, ip
 8000906:	08f9      	lsrs	r1, r7, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	4319      	orrs	r1, r3
 800090c:	4663      	mov	r3, ip
 800090e:	0004      	movs	r4, r0
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	e617      	b.n	8000544 <__aeabi_dadd+0x294>
 8000914:	003d      	movs	r5, r7
 8000916:	444d      	add	r5, r9
 8000918:	4463      	add	r3, ip
 800091a:	454d      	cmp	r5, r9
 800091c:	4189      	sbcs	r1, r1
 800091e:	4698      	mov	r8, r3
 8000920:	4249      	negs	r1, r1
 8000922:	4488      	add	r8, r1
 8000924:	4643      	mov	r3, r8
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	d400      	bmi.n	800092c <__aeabi_dadd+0x67c>
 800092a:	e5dd      	b.n	80004e8 <__aeabi_dadd+0x238>
 800092c:	4642      	mov	r2, r8
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <__aeabi_dadd+0x6d0>)
 8000930:	2601      	movs	r6, #1
 8000932:	401a      	ands	r2, r3
 8000934:	4690      	mov	r8, r2
 8000936:	e5d7      	b.n	80004e8 <__aeabi_dadd+0x238>
 8000938:	0010      	movs	r0, r2
 800093a:	001e      	movs	r6, r3
 800093c:	3820      	subs	r0, #32
 800093e:	40c6      	lsrs	r6, r0
 8000940:	2a20      	cmp	r2, #32
 8000942:	d005      	beq.n	8000950 <__aeabi_dadd+0x6a0>
 8000944:	2040      	movs	r0, #64	; 0x40
 8000946:	1a82      	subs	r2, r0, r2
 8000948:	4093      	lsls	r3, r2
 800094a:	464a      	mov	r2, r9
 800094c:	431a      	orrs	r2, r3
 800094e:	4691      	mov	r9, r2
 8000950:	464d      	mov	r5, r9
 8000952:	1e6b      	subs	r3, r5, #1
 8000954:	419d      	sbcs	r5, r3
 8000956:	4335      	orrs	r5, r6
 8000958:	e621      	b.n	800059e <__aeabi_dadd+0x2ee>
 800095a:	0002      	movs	r2, r0
 800095c:	2300      	movs	r3, #0
 800095e:	2100      	movs	r1, #0
 8000960:	e540      	b.n	80003e4 <__aeabi_dadd+0x134>
 8000962:	464a      	mov	r2, r9
 8000964:	19d5      	adds	r5, r2, r7
 8000966:	42bd      	cmp	r5, r7
 8000968:	4189      	sbcs	r1, r1
 800096a:	4463      	add	r3, ip
 800096c:	4698      	mov	r8, r3
 800096e:	4249      	negs	r1, r1
 8000970:	4488      	add	r8, r1
 8000972:	e5b3      	b.n	80004dc <__aeabi_dadd+0x22c>
 8000974:	2100      	movs	r1, #0
 8000976:	4a01      	ldr	r2, [pc, #4]	; (800097c <__aeabi_dadd+0x6cc>)
 8000978:	000b      	movs	r3, r1
 800097a:	e533      	b.n	80003e4 <__aeabi_dadd+0x134>
 800097c:	000007ff 	.word	0x000007ff
 8000980:	ff7fffff 	.word	0xff7fffff

08000984 <__aeabi_ddiv>:
 8000984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000986:	4657      	mov	r7, sl
 8000988:	464e      	mov	r6, r9
 800098a:	4645      	mov	r5, r8
 800098c:	46de      	mov	lr, fp
 800098e:	b5e0      	push	{r5, r6, r7, lr}
 8000990:	4681      	mov	r9, r0
 8000992:	0005      	movs	r5, r0
 8000994:	030c      	lsls	r4, r1, #12
 8000996:	0048      	lsls	r0, r1, #1
 8000998:	4692      	mov	sl, r2
 800099a:	001f      	movs	r7, r3
 800099c:	b085      	sub	sp, #20
 800099e:	0b24      	lsrs	r4, r4, #12
 80009a0:	0d40      	lsrs	r0, r0, #21
 80009a2:	0fce      	lsrs	r6, r1, #31
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d059      	beq.n	8000a5c <__aeabi_ddiv+0xd8>
 80009a8:	4b87      	ldr	r3, [pc, #540]	; (8000bc8 <__aeabi_ddiv+0x244>)
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d100      	bne.n	80009b0 <__aeabi_ddiv+0x2c>
 80009ae:	e098      	b.n	8000ae2 <__aeabi_ddiv+0x15e>
 80009b0:	0f6b      	lsrs	r3, r5, #29
 80009b2:	00e4      	lsls	r4, r4, #3
 80009b4:	431c      	orrs	r4, r3
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	4323      	orrs	r3, r4
 80009bc:	4698      	mov	r8, r3
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <__aeabi_ddiv+0x248>)
 80009c0:	00ed      	lsls	r5, r5, #3
 80009c2:	469b      	mov	fp, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	4699      	mov	r9, r3
 80009c8:	4483      	add	fp, r0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	033c      	lsls	r4, r7, #12
 80009ce:	007b      	lsls	r3, r7, #1
 80009d0:	4650      	mov	r0, sl
 80009d2:	0b24      	lsrs	r4, r4, #12
 80009d4:	0d5b      	lsrs	r3, r3, #21
 80009d6:	0fff      	lsrs	r7, r7, #31
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d067      	beq.n	8000aac <__aeabi_ddiv+0x128>
 80009dc:	4a7a      	ldr	r2, [pc, #488]	; (8000bc8 <__aeabi_ddiv+0x244>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d018      	beq.n	8000a14 <__aeabi_ddiv+0x90>
 80009e2:	497a      	ldr	r1, [pc, #488]	; (8000bcc <__aeabi_ddiv+0x248>)
 80009e4:	0f42      	lsrs	r2, r0, #29
 80009e6:	468c      	mov	ip, r1
 80009e8:	00e4      	lsls	r4, r4, #3
 80009ea:	4659      	mov	r1, fp
 80009ec:	4314      	orrs	r4, r2
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	4463      	add	r3, ip
 80009f2:	0412      	lsls	r2, r2, #16
 80009f4:	1acb      	subs	r3, r1, r3
 80009f6:	4314      	orrs	r4, r2
 80009f8:	469b      	mov	fp, r3
 80009fa:	00c2      	lsls	r2, r0, #3
 80009fc:	2000      	movs	r0, #0
 80009fe:	0033      	movs	r3, r6
 8000a00:	407b      	eors	r3, r7
 8000a02:	469a      	mov	sl, r3
 8000a04:	464b      	mov	r3, r9
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d900      	bls.n	8000a0c <__aeabi_ddiv+0x88>
 8000a0a:	e0ef      	b.n	8000bec <__aeabi_ddiv+0x268>
 8000a0c:	4970      	ldr	r1, [pc, #448]	; (8000bd0 <__aeabi_ddiv+0x24c>)
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	58cb      	ldr	r3, [r1, r3]
 8000a12:	469f      	mov	pc, r3
 8000a14:	4b6f      	ldr	r3, [pc, #444]	; (8000bd4 <__aeabi_ddiv+0x250>)
 8000a16:	4652      	mov	r2, sl
 8000a18:	469c      	mov	ip, r3
 8000a1a:	4322      	orrs	r2, r4
 8000a1c:	44e3      	add	fp, ip
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_ddiv+0xa0>
 8000a22:	e095      	b.n	8000b50 <__aeabi_ddiv+0x1cc>
 8000a24:	4649      	mov	r1, r9
 8000a26:	2302      	movs	r3, #2
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	4689      	mov	r9, r1
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2002      	movs	r0, #2
 8000a30:	e7e5      	b.n	80009fe <__aeabi_ddiv+0x7a>
 8000a32:	2300      	movs	r3, #0
 8000a34:	2400      	movs	r4, #0
 8000a36:	2500      	movs	r5, #0
 8000a38:	4652      	mov	r2, sl
 8000a3a:	051b      	lsls	r3, r3, #20
 8000a3c:	4323      	orrs	r3, r4
 8000a3e:	07d2      	lsls	r2, r2, #31
 8000a40:	4313      	orrs	r3, r2
 8000a42:	0028      	movs	r0, r5
 8000a44:	0019      	movs	r1, r3
 8000a46:	b005      	add	sp, #20
 8000a48:	bcf0      	pop	{r4, r5, r6, r7}
 8000a4a:	46bb      	mov	fp, r7
 8000a4c:	46b2      	mov	sl, r6
 8000a4e:	46a9      	mov	r9, r5
 8000a50:	46a0      	mov	r8, r4
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	2400      	movs	r4, #0
 8000a56:	2500      	movs	r5, #0
 8000a58:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <__aeabi_ddiv+0x244>)
 8000a5a:	e7ed      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	4698      	mov	r8, r3
 8000a62:	d100      	bne.n	8000a66 <__aeabi_ddiv+0xe2>
 8000a64:	e089      	b.n	8000b7a <__aeabi_ddiv+0x1f6>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_ddiv+0xe8>
 8000a6a:	e1e0      	b.n	8000e2e <__aeabi_ddiv+0x4aa>
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f001 fa37 	bl	8001ee0 <__clzsi2>
 8000a72:	0001      	movs	r1, r0
 8000a74:	0002      	movs	r2, r0
 8000a76:	390b      	subs	r1, #11
 8000a78:	231d      	movs	r3, #29
 8000a7a:	1a5b      	subs	r3, r3, r1
 8000a7c:	4649      	mov	r1, r9
 8000a7e:	0010      	movs	r0, r2
 8000a80:	40d9      	lsrs	r1, r3
 8000a82:	3808      	subs	r0, #8
 8000a84:	4084      	lsls	r4, r0
 8000a86:	000b      	movs	r3, r1
 8000a88:	464d      	mov	r5, r9
 8000a8a:	4323      	orrs	r3, r4
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	4085      	lsls	r5, r0
 8000a90:	4851      	ldr	r0, [pc, #324]	; (8000bd8 <__aeabi_ddiv+0x254>)
 8000a92:	033c      	lsls	r4, r7, #12
 8000a94:	1a83      	subs	r3, r0, r2
 8000a96:	469b      	mov	fp, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	007b      	lsls	r3, r7, #1
 8000aa0:	4650      	mov	r0, sl
 8000aa2:	0b24      	lsrs	r4, r4, #12
 8000aa4:	0d5b      	lsrs	r3, r3, #21
 8000aa6:	0fff      	lsrs	r7, r7, #31
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d197      	bne.n	80009dc <__aeabi_ddiv+0x58>
 8000aac:	4652      	mov	r2, sl
 8000aae:	4322      	orrs	r2, r4
 8000ab0:	d055      	beq.n	8000b5e <__aeabi_ddiv+0x1da>
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_ddiv+0x134>
 8000ab6:	e1ca      	b.n	8000e4e <__aeabi_ddiv+0x4ca>
 8000ab8:	0020      	movs	r0, r4
 8000aba:	f001 fa11 	bl	8001ee0 <__clzsi2>
 8000abe:	0002      	movs	r2, r0
 8000ac0:	3a0b      	subs	r2, #11
 8000ac2:	231d      	movs	r3, #29
 8000ac4:	0001      	movs	r1, r0
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	4652      	mov	r2, sl
 8000aca:	3908      	subs	r1, #8
 8000acc:	40da      	lsrs	r2, r3
 8000ace:	408c      	lsls	r4, r1
 8000ad0:	4314      	orrs	r4, r2
 8000ad2:	4652      	mov	r2, sl
 8000ad4:	408a      	lsls	r2, r1
 8000ad6:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <__aeabi_ddiv+0x258>)
 8000ad8:	4458      	add	r0, fp
 8000ada:	469b      	mov	fp, r3
 8000adc:	4483      	add	fp, r0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e78d      	b.n	80009fe <__aeabi_ddiv+0x7a>
 8000ae2:	464b      	mov	r3, r9
 8000ae4:	4323      	orrs	r3, r4
 8000ae6:	4698      	mov	r8, r3
 8000ae8:	d140      	bne.n	8000b6c <__aeabi_ddiv+0x1e8>
 8000aea:	2308      	movs	r3, #8
 8000aec:	4699      	mov	r9, r3
 8000aee:	3b06      	subs	r3, #6
 8000af0:	2500      	movs	r5, #0
 8000af2:	4683      	mov	fp, r0
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	e769      	b.n	80009cc <__aeabi_ddiv+0x48>
 8000af8:	46b2      	mov	sl, r6
 8000afa:	9b00      	ldr	r3, [sp, #0]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d0a9      	beq.n	8000a54 <__aeabi_ddiv+0xd0>
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0x182>
 8000b04:	e211      	b.n	8000f2a <__aeabi_ddiv+0x5a6>
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d093      	beq.n	8000a32 <__aeabi_ddiv+0xae>
 8000b0a:	4a35      	ldr	r2, [pc, #212]	; (8000be0 <__aeabi_ddiv+0x25c>)
 8000b0c:	445a      	add	r2, fp
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_ddiv+0x190>
 8000b12:	e13c      	b.n	8000d8e <__aeabi_ddiv+0x40a>
 8000b14:	076b      	lsls	r3, r5, #29
 8000b16:	d000      	beq.n	8000b1a <__aeabi_ddiv+0x196>
 8000b18:	e1a7      	b.n	8000e6a <__aeabi_ddiv+0x4e6>
 8000b1a:	08ed      	lsrs	r5, r5, #3
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	d506      	bpl.n	8000b30 <__aeabi_ddiv+0x1ac>
 8000b22:	4642      	mov	r2, r8
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <__aeabi_ddiv+0x260>)
 8000b26:	401a      	ands	r2, r3
 8000b28:	4690      	mov	r8, r2
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	445a      	add	r2, fp
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <__aeabi_ddiv+0x264>)
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dc8e      	bgt.n	8000a54 <__aeabi_ddiv+0xd0>
 8000b36:	4643      	mov	r3, r8
 8000b38:	0552      	lsls	r2, r2, #21
 8000b3a:	0758      	lsls	r0, r3, #29
 8000b3c:	025c      	lsls	r4, r3, #9
 8000b3e:	4305      	orrs	r5, r0
 8000b40:	0b24      	lsrs	r4, r4, #12
 8000b42:	0d53      	lsrs	r3, r2, #21
 8000b44:	e778      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000b46:	46ba      	mov	sl, r7
 8000b48:	46a0      	mov	r8, r4
 8000b4a:	0015      	movs	r5, r2
 8000b4c:	9000      	str	r0, [sp, #0]
 8000b4e:	e7d4      	b.n	8000afa <__aeabi_ddiv+0x176>
 8000b50:	464a      	mov	r2, r9
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4691      	mov	r9, r2
 8000b58:	2003      	movs	r0, #3
 8000b5a:	4652      	mov	r2, sl
 8000b5c:	e74f      	b.n	80009fe <__aeabi_ddiv+0x7a>
 8000b5e:	4649      	mov	r1, r9
 8000b60:	2301      	movs	r3, #1
 8000b62:	4319      	orrs	r1, r3
 8000b64:	4689      	mov	r9, r1
 8000b66:	2400      	movs	r4, #0
 8000b68:	2001      	movs	r0, #1
 8000b6a:	e748      	b.n	80009fe <__aeabi_ddiv+0x7a>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	4699      	mov	r9, r3
 8000b70:	3b09      	subs	r3, #9
 8000b72:	46a0      	mov	r8, r4
 8000b74:	4683      	mov	fp, r0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	e728      	b.n	80009cc <__aeabi_ddiv+0x48>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	469b      	mov	fp, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	2500      	movs	r5, #0
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	e720      	b.n	80009cc <__aeabi_ddiv+0x48>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2480      	movs	r4, #128	; 0x80
 8000b8e:	469a      	mov	sl, r3
 8000b90:	2500      	movs	r5, #0
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <__aeabi_ddiv+0x244>)
 8000b94:	0324      	lsls	r4, r4, #12
 8000b96:	e74f      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	4641      	mov	r1, r8
 8000b9c:	031b      	lsls	r3, r3, #12
 8000b9e:	4219      	tst	r1, r3
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_ddiv+0x230>
 8000ba2:	421c      	tst	r4, r3
 8000ba4:	d106      	bne.n	8000bb4 <__aeabi_ddiv+0x230>
 8000ba6:	431c      	orrs	r4, r3
 8000ba8:	0324      	lsls	r4, r4, #12
 8000baa:	46ba      	mov	sl, r7
 8000bac:	0015      	movs	r5, r2
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <__aeabi_ddiv+0x244>)
 8000bb0:	0b24      	lsrs	r4, r4, #12
 8000bb2:	e741      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000bb4:	2480      	movs	r4, #128	; 0x80
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	0324      	lsls	r4, r4, #12
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	46b2      	mov	sl, r6
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <__aeabi_ddiv+0x244>)
 8000bc2:	0b24      	lsrs	r4, r4, #12
 8000bc4:	e738      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	fffffc01 	.word	0xfffffc01
 8000bd0:	080080a8 	.word	0x080080a8
 8000bd4:	fffff801 	.word	0xfffff801
 8000bd8:	fffffc0d 	.word	0xfffffc0d
 8000bdc:	000003f3 	.word	0x000003f3
 8000be0:	000003ff 	.word	0x000003ff
 8000be4:	feffffff 	.word	0xfeffffff
 8000be8:	000007fe 	.word	0x000007fe
 8000bec:	4544      	cmp	r4, r8
 8000bee:	d200      	bcs.n	8000bf2 <__aeabi_ddiv+0x26e>
 8000bf0:	e116      	b.n	8000e20 <__aeabi_ddiv+0x49c>
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_ddiv+0x272>
 8000bf4:	e111      	b.n	8000e1a <__aeabi_ddiv+0x496>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	425b      	negs	r3, r3
 8000bfa:	469c      	mov	ip, r3
 8000bfc:	002e      	movs	r6, r5
 8000bfe:	4640      	mov	r0, r8
 8000c00:	2500      	movs	r5, #0
 8000c02:	44e3      	add	fp, ip
 8000c04:	0223      	lsls	r3, r4, #8
 8000c06:	0e14      	lsrs	r4, r2, #24
 8000c08:	431c      	orrs	r4, r3
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	0423      	lsls	r3, r4, #16
 8000c10:	0c1f      	lsrs	r7, r3, #16
 8000c12:	0212      	lsls	r2, r2, #8
 8000c14:	4649      	mov	r1, r9
 8000c16:	9200      	str	r2, [sp, #0]
 8000c18:	9701      	str	r7, [sp, #4]
 8000c1a:	f7ff fb05 	bl	8000228 <__aeabi_uidivmod>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	437a      	muls	r2, r7
 8000c22:	040b      	lsls	r3, r1, #16
 8000c24:	0c31      	lsrs	r1, r6, #16
 8000c26:	4680      	mov	r8, r0
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	d90b      	bls.n	8000c46 <__aeabi_ddiv+0x2c2>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	469c      	mov	ip, r3
 8000c34:	1909      	adds	r1, r1, r4
 8000c36:	44e0      	add	r8, ip
 8000c38:	428c      	cmp	r4, r1
 8000c3a:	d804      	bhi.n	8000c46 <__aeabi_ddiv+0x2c2>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	d902      	bls.n	8000c46 <__aeabi_ddiv+0x2c2>
 8000c40:	1e83      	subs	r3, r0, #2
 8000c42:	4698      	mov	r8, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	1a88      	subs	r0, r1, r2
 8000c48:	4649      	mov	r1, r9
 8000c4a:	f7ff faed 	bl	8000228 <__aeabi_uidivmod>
 8000c4e:	0409      	lsls	r1, r1, #16
 8000c50:	468c      	mov	ip, r1
 8000c52:	0431      	lsls	r1, r6, #16
 8000c54:	4666      	mov	r6, ip
 8000c56:	9a01      	ldr	r2, [sp, #4]
 8000c58:	0c09      	lsrs	r1, r1, #16
 8000c5a:	4342      	muls	r2, r0
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	4331      	orrs	r1, r6
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d904      	bls.n	8000c6e <__aeabi_ddiv+0x2ea>
 8000c64:	1909      	adds	r1, r1, r4
 8000c66:	3b01      	subs	r3, #1
 8000c68:	428c      	cmp	r4, r1
 8000c6a:	d800      	bhi.n	8000c6e <__aeabi_ddiv+0x2ea>
 8000c6c:	e111      	b.n	8000e92 <__aeabi_ddiv+0x50e>
 8000c6e:	1a89      	subs	r1, r1, r2
 8000c70:	4642      	mov	r2, r8
 8000c72:	9e00      	ldr	r6, [sp, #0]
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	431a      	orrs	r2, r3
 8000c78:	0c33      	lsrs	r3, r6, #16
 8000c7a:	001f      	movs	r7, r3
 8000c7c:	0c10      	lsrs	r0, r2, #16
 8000c7e:	4690      	mov	r8, r2
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	0413      	lsls	r3, r2, #16
 8000c84:	0432      	lsls	r2, r6, #16
 8000c86:	0c16      	lsrs	r6, r2, #16
 8000c88:	0032      	movs	r2, r6
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	435a      	muls	r2, r3
 8000c8e:	9603      	str	r6, [sp, #12]
 8000c90:	437b      	muls	r3, r7
 8000c92:	4346      	muls	r6, r0
 8000c94:	4378      	muls	r0, r7
 8000c96:	0c17      	lsrs	r7, r2, #16
 8000c98:	46bc      	mov	ip, r7
 8000c9a:	199b      	adds	r3, r3, r6
 8000c9c:	4463      	add	r3, ip
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d903      	bls.n	8000caa <__aeabi_ddiv+0x326>
 8000ca2:	2680      	movs	r6, #128	; 0x80
 8000ca4:	0276      	lsls	r6, r6, #9
 8000ca6:	46b4      	mov	ip, r6
 8000ca8:	4460      	add	r0, ip
 8000caa:	0c1e      	lsrs	r6, r3, #16
 8000cac:	1830      	adds	r0, r6, r0
 8000cae:	0416      	lsls	r6, r2, #16
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	199e      	adds	r6, r3, r6
 8000cb6:	4281      	cmp	r1, r0
 8000cb8:	d200      	bcs.n	8000cbc <__aeabi_ddiv+0x338>
 8000cba:	e09c      	b.n	8000df6 <__aeabi_ddiv+0x472>
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_ddiv+0x33c>
 8000cbe:	e097      	b.n	8000df0 <__aeabi_ddiv+0x46c>
 8000cc0:	1bae      	subs	r6, r5, r6
 8000cc2:	1a09      	subs	r1, r1, r0
 8000cc4:	42b5      	cmp	r5, r6
 8000cc6:	4180      	sbcs	r0, r0
 8000cc8:	4240      	negs	r0, r0
 8000cca:	1a08      	subs	r0, r1, r0
 8000ccc:	4284      	cmp	r4, r0
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_ddiv+0x34e>
 8000cd0:	e111      	b.n	8000ef6 <__aeabi_ddiv+0x572>
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	f7ff faa8 	bl	8000228 <__aeabi_uidivmod>
 8000cd8:	9a01      	ldr	r2, [sp, #4]
 8000cda:	040b      	lsls	r3, r1, #16
 8000cdc:	4342      	muls	r2, r0
 8000cde:	0c31      	lsrs	r1, r6, #16
 8000ce0:	0005      	movs	r5, r0
 8000ce2:	4319      	orrs	r1, r3
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d907      	bls.n	8000cf8 <__aeabi_ddiv+0x374>
 8000ce8:	1909      	adds	r1, r1, r4
 8000cea:	3d01      	subs	r5, #1
 8000cec:	428c      	cmp	r4, r1
 8000cee:	d803      	bhi.n	8000cf8 <__aeabi_ddiv+0x374>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	d901      	bls.n	8000cf8 <__aeabi_ddiv+0x374>
 8000cf4:	1e85      	subs	r5, r0, #2
 8000cf6:	1909      	adds	r1, r1, r4
 8000cf8:	1a88      	subs	r0, r1, r2
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	f7ff fa94 	bl	8000228 <__aeabi_uidivmod>
 8000d00:	0409      	lsls	r1, r1, #16
 8000d02:	468c      	mov	ip, r1
 8000d04:	0431      	lsls	r1, r6, #16
 8000d06:	4666      	mov	r6, ip
 8000d08:	9a01      	ldr	r2, [sp, #4]
 8000d0a:	0c09      	lsrs	r1, r1, #16
 8000d0c:	4342      	muls	r2, r0
 8000d0e:	0003      	movs	r3, r0
 8000d10:	4331      	orrs	r1, r6
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d907      	bls.n	8000d26 <__aeabi_ddiv+0x3a2>
 8000d16:	1909      	adds	r1, r1, r4
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	428c      	cmp	r4, r1
 8000d1c:	d803      	bhi.n	8000d26 <__aeabi_ddiv+0x3a2>
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	d901      	bls.n	8000d26 <__aeabi_ddiv+0x3a2>
 8000d22:	1e83      	subs	r3, r0, #2
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	9e03      	ldr	r6, [sp, #12]
 8000d28:	1a89      	subs	r1, r1, r2
 8000d2a:	0032      	movs	r2, r6
 8000d2c:	042d      	lsls	r5, r5, #16
 8000d2e:	431d      	orrs	r5, r3
 8000d30:	9f02      	ldr	r7, [sp, #8]
 8000d32:	042b      	lsls	r3, r5, #16
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	435a      	muls	r2, r3
 8000d38:	437b      	muls	r3, r7
 8000d3a:	469c      	mov	ip, r3
 8000d3c:	0c28      	lsrs	r0, r5, #16
 8000d3e:	4346      	muls	r6, r0
 8000d40:	0c13      	lsrs	r3, r2, #16
 8000d42:	44b4      	add	ip, r6
 8000d44:	4463      	add	r3, ip
 8000d46:	4378      	muls	r0, r7
 8000d48:	429e      	cmp	r6, r3
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_ddiv+0x3d0>
 8000d4c:	2680      	movs	r6, #128	; 0x80
 8000d4e:	0276      	lsls	r6, r6, #9
 8000d50:	46b4      	mov	ip, r6
 8000d52:	4460      	add	r0, ip
 8000d54:	0c1e      	lsrs	r6, r3, #16
 8000d56:	0412      	lsls	r2, r2, #16
 8000d58:	041b      	lsls	r3, r3, #16
 8000d5a:	0c12      	lsrs	r2, r2, #16
 8000d5c:	1830      	adds	r0, r6, r0
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	4281      	cmp	r1, r0
 8000d62:	d306      	bcc.n	8000d72 <__aeabi_ddiv+0x3ee>
 8000d64:	d002      	beq.n	8000d6c <__aeabi_ddiv+0x3e8>
 8000d66:	2301      	movs	r3, #1
 8000d68:	431d      	orrs	r5, r3
 8000d6a:	e6ce      	b.n	8000b0a <__aeabi_ddiv+0x186>
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x3ee>
 8000d70:	e6cb      	b.n	8000b0a <__aeabi_ddiv+0x186>
 8000d72:	1861      	adds	r1, r4, r1
 8000d74:	1e6e      	subs	r6, r5, #1
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	d200      	bcs.n	8000d7c <__aeabi_ddiv+0x3f8>
 8000d7a:	e0a4      	b.n	8000ec6 <__aeabi_ddiv+0x542>
 8000d7c:	4281      	cmp	r1, r0
 8000d7e:	d200      	bcs.n	8000d82 <__aeabi_ddiv+0x3fe>
 8000d80:	e0c9      	b.n	8000f16 <__aeabi_ddiv+0x592>
 8000d82:	d100      	bne.n	8000d86 <__aeabi_ddiv+0x402>
 8000d84:	e0d9      	b.n	8000f3a <__aeabi_ddiv+0x5b6>
 8000d86:	0035      	movs	r5, r6
 8000d88:	e7ed      	b.n	8000d66 <__aeabi_ddiv+0x3e2>
 8000d8a:	2501      	movs	r5, #1
 8000d8c:	426d      	negs	r5, r5
 8000d8e:	2101      	movs	r1, #1
 8000d90:	1a89      	subs	r1, r1, r2
 8000d92:	2938      	cmp	r1, #56	; 0x38
 8000d94:	dd00      	ble.n	8000d98 <__aeabi_ddiv+0x414>
 8000d96:	e64c      	b.n	8000a32 <__aeabi_ddiv+0xae>
 8000d98:	291f      	cmp	r1, #31
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_ddiv+0x41a>
 8000d9c:	e07f      	b.n	8000e9e <__aeabi_ddiv+0x51a>
 8000d9e:	231f      	movs	r3, #31
 8000da0:	425b      	negs	r3, r3
 8000da2:	1a9a      	subs	r2, r3, r2
 8000da4:	4643      	mov	r3, r8
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2920      	cmp	r1, #32
 8000daa:	d004      	beq.n	8000db6 <__aeabi_ddiv+0x432>
 8000dac:	4644      	mov	r4, r8
 8000dae:	4a65      	ldr	r2, [pc, #404]	; (8000f44 <__aeabi_ddiv+0x5c0>)
 8000db0:	445a      	add	r2, fp
 8000db2:	4094      	lsls	r4, r2
 8000db4:	4325      	orrs	r5, r4
 8000db6:	1e6a      	subs	r2, r5, #1
 8000db8:	4195      	sbcs	r5, r2
 8000dba:	2207      	movs	r2, #7
 8000dbc:	432b      	orrs	r3, r5
 8000dbe:	0015      	movs	r5, r2
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	401d      	ands	r5, r3
 8000dc4:	421a      	tst	r2, r3
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x446>
 8000dc8:	e0a1      	b.n	8000f0e <__aeabi_ddiv+0x58a>
 8000dca:	220f      	movs	r2, #15
 8000dcc:	2400      	movs	r4, #0
 8000dce:	401a      	ands	r2, r3
 8000dd0:	2a04      	cmp	r2, #4
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x452>
 8000dd4:	e098      	b.n	8000f08 <__aeabi_ddiv+0x584>
 8000dd6:	1d1a      	adds	r2, r3, #4
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	419b      	sbcs	r3, r3
 8000ddc:	425b      	negs	r3, r3
 8000dde:	18e4      	adds	r4, r4, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	0222      	lsls	r2, r4, #8
 8000de4:	d400      	bmi.n	8000de8 <__aeabi_ddiv+0x464>
 8000de6:	e08f      	b.n	8000f08 <__aeabi_ddiv+0x584>
 8000de8:	2301      	movs	r3, #1
 8000dea:	2400      	movs	r4, #0
 8000dec:	2500      	movs	r5, #0
 8000dee:	e623      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000df0:	42b5      	cmp	r5, r6
 8000df2:	d300      	bcc.n	8000df6 <__aeabi_ddiv+0x472>
 8000df4:	e764      	b.n	8000cc0 <__aeabi_ddiv+0x33c>
 8000df6:	4643      	mov	r3, r8
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	9b00      	ldr	r3, [sp, #0]
 8000dfc:	469c      	mov	ip, r3
 8000dfe:	4465      	add	r5, ip
 8000e00:	001f      	movs	r7, r3
 8000e02:	429d      	cmp	r5, r3
 8000e04:	419b      	sbcs	r3, r3
 8000e06:	425b      	negs	r3, r3
 8000e08:	191b      	adds	r3, r3, r4
 8000e0a:	18c9      	adds	r1, r1, r3
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d23a      	bcs.n	8000e86 <__aeabi_ddiv+0x502>
 8000e10:	4288      	cmp	r0, r1
 8000e12:	d863      	bhi.n	8000edc <__aeabi_ddiv+0x558>
 8000e14:	d060      	beq.n	8000ed8 <__aeabi_ddiv+0x554>
 8000e16:	4690      	mov	r8, r2
 8000e18:	e752      	b.n	8000cc0 <__aeabi_ddiv+0x33c>
 8000e1a:	42aa      	cmp	r2, r5
 8000e1c:	d900      	bls.n	8000e20 <__aeabi_ddiv+0x49c>
 8000e1e:	e6ea      	b.n	8000bf6 <__aeabi_ddiv+0x272>
 8000e20:	4643      	mov	r3, r8
 8000e22:	07de      	lsls	r6, r3, #31
 8000e24:	0858      	lsrs	r0, r3, #1
 8000e26:	086b      	lsrs	r3, r5, #1
 8000e28:	431e      	orrs	r6, r3
 8000e2a:	07ed      	lsls	r5, r5, #31
 8000e2c:	e6ea      	b.n	8000c04 <__aeabi_ddiv+0x280>
 8000e2e:	4648      	mov	r0, r9
 8000e30:	f001 f856 	bl	8001ee0 <__clzsi2>
 8000e34:	0001      	movs	r1, r0
 8000e36:	0002      	movs	r2, r0
 8000e38:	3115      	adds	r1, #21
 8000e3a:	3220      	adds	r2, #32
 8000e3c:	291c      	cmp	r1, #28
 8000e3e:	dc00      	bgt.n	8000e42 <__aeabi_ddiv+0x4be>
 8000e40:	e61a      	b.n	8000a78 <__aeabi_ddiv+0xf4>
 8000e42:	464b      	mov	r3, r9
 8000e44:	3808      	subs	r0, #8
 8000e46:	4083      	lsls	r3, r0
 8000e48:	2500      	movs	r5, #0
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	e620      	b.n	8000a90 <__aeabi_ddiv+0x10c>
 8000e4e:	f001 f847 	bl	8001ee0 <__clzsi2>
 8000e52:	0003      	movs	r3, r0
 8000e54:	001a      	movs	r2, r3
 8000e56:	3215      	adds	r2, #21
 8000e58:	3020      	adds	r0, #32
 8000e5a:	2a1c      	cmp	r2, #28
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_ddiv+0x4dc>
 8000e5e:	e630      	b.n	8000ac2 <__aeabi_ddiv+0x13e>
 8000e60:	4654      	mov	r4, sl
 8000e62:	3b08      	subs	r3, #8
 8000e64:	2200      	movs	r2, #0
 8000e66:	409c      	lsls	r4, r3
 8000e68:	e635      	b.n	8000ad6 <__aeabi_ddiv+0x152>
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	402b      	ands	r3, r5
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d100      	bne.n	8000e74 <__aeabi_ddiv+0x4f0>
 8000e72:	e652      	b.n	8000b1a <__aeabi_ddiv+0x196>
 8000e74:	2305      	movs	r3, #5
 8000e76:	425b      	negs	r3, r3
 8000e78:	42ab      	cmp	r3, r5
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	3504      	adds	r5, #4
 8000e7e:	425b      	negs	r3, r3
 8000e80:	08ed      	lsrs	r5, r5, #3
 8000e82:	4498      	add	r8, r3
 8000e84:	e64a      	b.n	8000b1c <__aeabi_ddiv+0x198>
 8000e86:	428c      	cmp	r4, r1
 8000e88:	d1c5      	bne.n	8000e16 <__aeabi_ddiv+0x492>
 8000e8a:	42af      	cmp	r7, r5
 8000e8c:	d9c0      	bls.n	8000e10 <__aeabi_ddiv+0x48c>
 8000e8e:	4690      	mov	r8, r2
 8000e90:	e716      	b.n	8000cc0 <__aeabi_ddiv+0x33c>
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d800      	bhi.n	8000e98 <__aeabi_ddiv+0x514>
 8000e96:	e6ea      	b.n	8000c6e <__aeabi_ddiv+0x2ea>
 8000e98:	1e83      	subs	r3, r0, #2
 8000e9a:	1909      	adds	r1, r1, r4
 8000e9c:	e6e7      	b.n	8000c6e <__aeabi_ddiv+0x2ea>
 8000e9e:	4a2a      	ldr	r2, [pc, #168]	; (8000f48 <__aeabi_ddiv+0x5c4>)
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	445a      	add	r2, fp
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	4095      	lsls	r5, r2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	40c8      	lsrs	r0, r1
 8000eac:	1e6a      	subs	r2, r5, #1
 8000eae:	4195      	sbcs	r5, r2
 8000eb0:	4644      	mov	r4, r8
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	432b      	orrs	r3, r5
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	075a      	lsls	r2, r3, #29
 8000eba:	d092      	beq.n	8000de2 <__aeabi_ddiv+0x45e>
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	2a04      	cmp	r2, #4
 8000ec2:	d188      	bne.n	8000dd6 <__aeabi_ddiv+0x452>
 8000ec4:	e78d      	b.n	8000de2 <__aeabi_ddiv+0x45e>
 8000ec6:	0035      	movs	r5, r6
 8000ec8:	4281      	cmp	r1, r0
 8000eca:	d000      	beq.n	8000ece <__aeabi_ddiv+0x54a>
 8000ecc:	e74b      	b.n	8000d66 <__aeabi_ddiv+0x3e2>
 8000ece:	9a00      	ldr	r2, [sp, #0]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_ddiv+0x552>
 8000ed4:	e747      	b.n	8000d66 <__aeabi_ddiv+0x3e2>
 8000ed6:	e618      	b.n	8000b0a <__aeabi_ddiv+0x186>
 8000ed8:	42ae      	cmp	r6, r5
 8000eda:	d99c      	bls.n	8000e16 <__aeabi_ddiv+0x492>
 8000edc:	2302      	movs	r3, #2
 8000ede:	425b      	negs	r3, r3
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	44e0      	add	r8, ip
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	429d      	cmp	r5, r3
 8000eec:	419b      	sbcs	r3, r3
 8000eee:	425b      	negs	r3, r3
 8000ef0:	191b      	adds	r3, r3, r4
 8000ef2:	18c9      	adds	r1, r1, r3
 8000ef4:	e6e4      	b.n	8000cc0 <__aeabi_ddiv+0x33c>
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <__aeabi_ddiv+0x5c8>)
 8000ef8:	445a      	add	r2, fp
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_ddiv+0x57c>
 8000efe:	e744      	b.n	8000d8a <__aeabi_ddiv+0x406>
 8000f00:	2301      	movs	r3, #1
 8000f02:	2500      	movs	r5, #0
 8000f04:	4498      	add	r8, r3
 8000f06:	e609      	b.n	8000b1c <__aeabi_ddiv+0x198>
 8000f08:	0765      	lsls	r5, r4, #29
 8000f0a:	0264      	lsls	r4, r4, #9
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	431d      	orrs	r5, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	e590      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000f16:	9e00      	ldr	r6, [sp, #0]
 8000f18:	3d02      	subs	r5, #2
 8000f1a:	0072      	lsls	r2, r6, #1
 8000f1c:	42b2      	cmp	r2, r6
 8000f1e:	41bf      	sbcs	r7, r7
 8000f20:	427f      	negs	r7, r7
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	1909      	adds	r1, r1, r4
 8000f26:	9200      	str	r2, [sp, #0]
 8000f28:	e7ce      	b.n	8000ec8 <__aeabi_ddiv+0x544>
 8000f2a:	2480      	movs	r4, #128	; 0x80
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	0324      	lsls	r4, r4, #12
 8000f30:	431c      	orrs	r4, r3
 8000f32:	0324      	lsls	r4, r4, #12
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <__aeabi_ddiv+0x5cc>)
 8000f36:	0b24      	lsrs	r4, r4, #12
 8000f38:	e57e      	b.n	8000a38 <__aeabi_ddiv+0xb4>
 8000f3a:	9a00      	ldr	r2, [sp, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3ea      	bcc.n	8000f16 <__aeabi_ddiv+0x592>
 8000f40:	0035      	movs	r5, r6
 8000f42:	e7c4      	b.n	8000ece <__aeabi_ddiv+0x54a>
 8000f44:	0000043e 	.word	0x0000043e
 8000f48:	0000041e 	.word	0x0000041e
 8000f4c:	000003ff 	.word	0x000003ff
 8000f50:	000007ff 	.word	0x000007ff

08000f54 <__eqdf2>:
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	464f      	mov	r7, r9
 8000f58:	4646      	mov	r6, r8
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	4694      	mov	ip, r2
 8000f5e:	4691      	mov	r9, r2
 8000f60:	031a      	lsls	r2, r3, #12
 8000f62:	0b12      	lsrs	r2, r2, #12
 8000f64:	4d18      	ldr	r5, [pc, #96]	; (8000fc8 <__eqdf2+0x74>)
 8000f66:	b5c0      	push	{r6, r7, lr}
 8000f68:	004c      	lsls	r4, r1, #1
 8000f6a:	030f      	lsls	r7, r1, #12
 8000f6c:	4692      	mov	sl, r2
 8000f6e:	005a      	lsls	r2, r3, #1
 8000f70:	0006      	movs	r6, r0
 8000f72:	4680      	mov	r8, r0
 8000f74:	0b3f      	lsrs	r7, r7, #12
 8000f76:	2001      	movs	r0, #1
 8000f78:	0d64      	lsrs	r4, r4, #21
 8000f7a:	0fc9      	lsrs	r1, r1, #31
 8000f7c:	0d52      	lsrs	r2, r2, #21
 8000f7e:	0fdb      	lsrs	r3, r3, #31
 8000f80:	42ac      	cmp	r4, r5
 8000f82:	d00a      	beq.n	8000f9a <__eqdf2+0x46>
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d003      	beq.n	8000f90 <__eqdf2+0x3c>
 8000f88:	4294      	cmp	r4, r2
 8000f8a:	d101      	bne.n	8000f90 <__eqdf2+0x3c>
 8000f8c:	4557      	cmp	r7, sl
 8000f8e:	d00d      	beq.n	8000fac <__eqdf2+0x58>
 8000f90:	bce0      	pop	{r5, r6, r7}
 8000f92:	46ba      	mov	sl, r7
 8000f94:	46b1      	mov	r9, r6
 8000f96:	46a8      	mov	r8, r5
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9a:	003d      	movs	r5, r7
 8000f9c:	4335      	orrs	r5, r6
 8000f9e:	d1f7      	bne.n	8000f90 <__eqdf2+0x3c>
 8000fa0:	42a2      	cmp	r2, r4
 8000fa2:	d1f5      	bne.n	8000f90 <__eqdf2+0x3c>
 8000fa4:	4652      	mov	r2, sl
 8000fa6:	4665      	mov	r5, ip
 8000fa8:	432a      	orrs	r2, r5
 8000faa:	d1f1      	bne.n	8000f90 <__eqdf2+0x3c>
 8000fac:	2001      	movs	r0, #1
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d1ee      	bne.n	8000f90 <__eqdf2+0x3c>
 8000fb2:	4299      	cmp	r1, r3
 8000fb4:	d006      	beq.n	8000fc4 <__eqdf2+0x70>
 8000fb6:	2c00      	cmp	r4, #0
 8000fb8:	d1ea      	bne.n	8000f90 <__eqdf2+0x3c>
 8000fba:	433e      	orrs	r6, r7
 8000fbc:	0030      	movs	r0, r6
 8000fbe:	1e46      	subs	r6, r0, #1
 8000fc0:	41b0      	sbcs	r0, r6
 8000fc2:	e7e5      	b.n	8000f90 <__eqdf2+0x3c>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e7e3      	b.n	8000f90 <__eqdf2+0x3c>
 8000fc8:	000007ff 	.word	0x000007ff

08000fcc <__gedf2>:
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	464e      	mov	r6, r9
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	4657      	mov	r7, sl
 8000fd4:	46de      	mov	lr, fp
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	0018      	movs	r0, r3
 8000fda:	b5e0      	push	{r5, r6, r7, lr}
 8000fdc:	0016      	movs	r6, r2
 8000fde:	031b      	lsls	r3, r3, #12
 8000fe0:	0b1b      	lsrs	r3, r3, #12
 8000fe2:	4d32      	ldr	r5, [pc, #200]	; (80010ac <__gedf2+0xe0>)
 8000fe4:	030f      	lsls	r7, r1, #12
 8000fe6:	004a      	lsls	r2, r1, #1
 8000fe8:	4699      	mov	r9, r3
 8000fea:	0043      	lsls	r3, r0, #1
 8000fec:	46a4      	mov	ip, r4
 8000fee:	46b0      	mov	r8, r6
 8000ff0:	0b3f      	lsrs	r7, r7, #12
 8000ff2:	0d52      	lsrs	r2, r2, #21
 8000ff4:	0fc9      	lsrs	r1, r1, #31
 8000ff6:	0d5b      	lsrs	r3, r3, #21
 8000ff8:	0fc0      	lsrs	r0, r0, #31
 8000ffa:	42aa      	cmp	r2, r5
 8000ffc:	d029      	beq.n	8001052 <__gedf2+0x86>
 8000ffe:	42ab      	cmp	r3, r5
 8001000:	d018      	beq.n	8001034 <__gedf2+0x68>
 8001002:	2a00      	cmp	r2, #0
 8001004:	d12a      	bne.n	800105c <__gedf2+0x90>
 8001006:	433c      	orrs	r4, r7
 8001008:	46a3      	mov	fp, r4
 800100a:	4265      	negs	r5, r4
 800100c:	4165      	adcs	r5, r4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <__gedf2+0x4c>
 8001012:	464c      	mov	r4, r9
 8001014:	4326      	orrs	r6, r4
 8001016:	d027      	beq.n	8001068 <__gedf2+0x9c>
 8001018:	2d00      	cmp	r5, #0
 800101a:	d115      	bne.n	8001048 <__gedf2+0x7c>
 800101c:	4281      	cmp	r1, r0
 800101e:	d028      	beq.n	8001072 <__gedf2+0xa6>
 8001020:	2002      	movs	r0, #2
 8001022:	3901      	subs	r1, #1
 8001024:	4008      	ands	r0, r1
 8001026:	3801      	subs	r0, #1
 8001028:	bcf0      	pop	{r4, r5, r6, r7}
 800102a:	46bb      	mov	fp, r7
 800102c:	46b2      	mov	sl, r6
 800102e:	46a9      	mov	r9, r5
 8001030:	46a0      	mov	r8, r4
 8001032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001034:	464d      	mov	r5, r9
 8001036:	432e      	orrs	r6, r5
 8001038:	d12f      	bne.n	800109a <__gedf2+0xce>
 800103a:	2a00      	cmp	r2, #0
 800103c:	d1ee      	bne.n	800101c <__gedf2+0x50>
 800103e:	433c      	orrs	r4, r7
 8001040:	4265      	negs	r5, r4
 8001042:	4165      	adcs	r5, r4
 8001044:	2d00      	cmp	r5, #0
 8001046:	d0e9      	beq.n	800101c <__gedf2+0x50>
 8001048:	2800      	cmp	r0, #0
 800104a:	d1ed      	bne.n	8001028 <__gedf2+0x5c>
 800104c:	2001      	movs	r0, #1
 800104e:	4240      	negs	r0, r0
 8001050:	e7ea      	b.n	8001028 <__gedf2+0x5c>
 8001052:	003d      	movs	r5, r7
 8001054:	4325      	orrs	r5, r4
 8001056:	d120      	bne.n	800109a <__gedf2+0xce>
 8001058:	4293      	cmp	r3, r2
 800105a:	d0eb      	beq.n	8001034 <__gedf2+0x68>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1dd      	bne.n	800101c <__gedf2+0x50>
 8001060:	464c      	mov	r4, r9
 8001062:	4326      	orrs	r6, r4
 8001064:	d1da      	bne.n	800101c <__gedf2+0x50>
 8001066:	e7db      	b.n	8001020 <__gedf2+0x54>
 8001068:	465b      	mov	r3, fp
 800106a:	2000      	movs	r0, #0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0db      	beq.n	8001028 <__gedf2+0x5c>
 8001070:	e7d6      	b.n	8001020 <__gedf2+0x54>
 8001072:	429a      	cmp	r2, r3
 8001074:	dc0a      	bgt.n	800108c <__gedf2+0xc0>
 8001076:	dbe7      	blt.n	8001048 <__gedf2+0x7c>
 8001078:	454f      	cmp	r7, r9
 800107a:	d8d1      	bhi.n	8001020 <__gedf2+0x54>
 800107c:	d010      	beq.n	80010a0 <__gedf2+0xd4>
 800107e:	2000      	movs	r0, #0
 8001080:	454f      	cmp	r7, r9
 8001082:	d2d1      	bcs.n	8001028 <__gedf2+0x5c>
 8001084:	2900      	cmp	r1, #0
 8001086:	d0e1      	beq.n	800104c <__gedf2+0x80>
 8001088:	0008      	movs	r0, r1
 800108a:	e7cd      	b.n	8001028 <__gedf2+0x5c>
 800108c:	4243      	negs	r3, r0
 800108e:	4158      	adcs	r0, r3
 8001090:	2302      	movs	r3, #2
 8001092:	4240      	negs	r0, r0
 8001094:	4018      	ands	r0, r3
 8001096:	3801      	subs	r0, #1
 8001098:	e7c6      	b.n	8001028 <__gedf2+0x5c>
 800109a:	2002      	movs	r0, #2
 800109c:	4240      	negs	r0, r0
 800109e:	e7c3      	b.n	8001028 <__gedf2+0x5c>
 80010a0:	45c4      	cmp	ip, r8
 80010a2:	d8bd      	bhi.n	8001020 <__gedf2+0x54>
 80010a4:	2000      	movs	r0, #0
 80010a6:	45c4      	cmp	ip, r8
 80010a8:	d2be      	bcs.n	8001028 <__gedf2+0x5c>
 80010aa:	e7eb      	b.n	8001084 <__gedf2+0xb8>
 80010ac:	000007ff 	.word	0x000007ff

080010b0 <__ledf2>:
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	464e      	mov	r6, r9
 80010b4:	4645      	mov	r5, r8
 80010b6:	4657      	mov	r7, sl
 80010b8:	46de      	mov	lr, fp
 80010ba:	0004      	movs	r4, r0
 80010bc:	0018      	movs	r0, r3
 80010be:	b5e0      	push	{r5, r6, r7, lr}
 80010c0:	0016      	movs	r6, r2
 80010c2:	031b      	lsls	r3, r3, #12
 80010c4:	0b1b      	lsrs	r3, r3, #12
 80010c6:	4d31      	ldr	r5, [pc, #196]	; (800118c <__ledf2+0xdc>)
 80010c8:	030f      	lsls	r7, r1, #12
 80010ca:	004a      	lsls	r2, r1, #1
 80010cc:	4699      	mov	r9, r3
 80010ce:	0043      	lsls	r3, r0, #1
 80010d0:	46a4      	mov	ip, r4
 80010d2:	46b0      	mov	r8, r6
 80010d4:	0b3f      	lsrs	r7, r7, #12
 80010d6:	0d52      	lsrs	r2, r2, #21
 80010d8:	0fc9      	lsrs	r1, r1, #31
 80010da:	0d5b      	lsrs	r3, r3, #21
 80010dc:	0fc0      	lsrs	r0, r0, #31
 80010de:	42aa      	cmp	r2, r5
 80010e0:	d011      	beq.n	8001106 <__ledf2+0x56>
 80010e2:	42ab      	cmp	r3, r5
 80010e4:	d014      	beq.n	8001110 <__ledf2+0x60>
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d12f      	bne.n	800114a <__ledf2+0x9a>
 80010ea:	433c      	orrs	r4, r7
 80010ec:	46a3      	mov	fp, r4
 80010ee:	4265      	negs	r5, r4
 80010f0:	4165      	adcs	r5, r4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d114      	bne.n	8001120 <__ledf2+0x70>
 80010f6:	464c      	mov	r4, r9
 80010f8:	4326      	orrs	r6, r4
 80010fa:	d111      	bne.n	8001120 <__ledf2+0x70>
 80010fc:	465b      	mov	r3, fp
 80010fe:	2000      	movs	r0, #0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d017      	beq.n	8001134 <__ledf2+0x84>
 8001104:	e010      	b.n	8001128 <__ledf2+0x78>
 8001106:	003d      	movs	r5, r7
 8001108:	4325      	orrs	r5, r4
 800110a:	d112      	bne.n	8001132 <__ledf2+0x82>
 800110c:	4293      	cmp	r3, r2
 800110e:	d11c      	bne.n	800114a <__ledf2+0x9a>
 8001110:	464d      	mov	r5, r9
 8001112:	432e      	orrs	r6, r5
 8001114:	d10d      	bne.n	8001132 <__ledf2+0x82>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d104      	bne.n	8001124 <__ledf2+0x74>
 800111a:	433c      	orrs	r4, r7
 800111c:	4265      	negs	r5, r4
 800111e:	4165      	adcs	r5, r4
 8001120:	2d00      	cmp	r5, #0
 8001122:	d10d      	bne.n	8001140 <__ledf2+0x90>
 8001124:	4281      	cmp	r1, r0
 8001126:	d016      	beq.n	8001156 <__ledf2+0xa6>
 8001128:	2002      	movs	r0, #2
 800112a:	3901      	subs	r1, #1
 800112c:	4008      	ands	r0, r1
 800112e:	3801      	subs	r0, #1
 8001130:	e000      	b.n	8001134 <__ledf2+0x84>
 8001132:	2002      	movs	r0, #2
 8001134:	bcf0      	pop	{r4, r5, r6, r7}
 8001136:	46bb      	mov	fp, r7
 8001138:	46b2      	mov	sl, r6
 800113a:	46a9      	mov	r9, r5
 800113c:	46a0      	mov	r8, r4
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001140:	2800      	cmp	r0, #0
 8001142:	d1f7      	bne.n	8001134 <__ledf2+0x84>
 8001144:	2001      	movs	r0, #1
 8001146:	4240      	negs	r0, r0
 8001148:	e7f4      	b.n	8001134 <__ledf2+0x84>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ea      	bne.n	8001124 <__ledf2+0x74>
 800114e:	464c      	mov	r4, r9
 8001150:	4326      	orrs	r6, r4
 8001152:	d1e7      	bne.n	8001124 <__ledf2+0x74>
 8001154:	e7e8      	b.n	8001128 <__ledf2+0x78>
 8001156:	429a      	cmp	r2, r3
 8001158:	dd06      	ble.n	8001168 <__ledf2+0xb8>
 800115a:	4243      	negs	r3, r0
 800115c:	4158      	adcs	r0, r3
 800115e:	2302      	movs	r3, #2
 8001160:	4240      	negs	r0, r0
 8001162:	4018      	ands	r0, r3
 8001164:	3801      	subs	r0, #1
 8001166:	e7e5      	b.n	8001134 <__ledf2+0x84>
 8001168:	429a      	cmp	r2, r3
 800116a:	dbe9      	blt.n	8001140 <__ledf2+0x90>
 800116c:	454f      	cmp	r7, r9
 800116e:	d8db      	bhi.n	8001128 <__ledf2+0x78>
 8001170:	d006      	beq.n	8001180 <__ledf2+0xd0>
 8001172:	2000      	movs	r0, #0
 8001174:	454f      	cmp	r7, r9
 8001176:	d2dd      	bcs.n	8001134 <__ledf2+0x84>
 8001178:	2900      	cmp	r1, #0
 800117a:	d0e3      	beq.n	8001144 <__ledf2+0x94>
 800117c:	0008      	movs	r0, r1
 800117e:	e7d9      	b.n	8001134 <__ledf2+0x84>
 8001180:	45c4      	cmp	ip, r8
 8001182:	d8d1      	bhi.n	8001128 <__ledf2+0x78>
 8001184:	2000      	movs	r0, #0
 8001186:	45c4      	cmp	ip, r8
 8001188:	d2d4      	bcs.n	8001134 <__ledf2+0x84>
 800118a:	e7f5      	b.n	8001178 <__ledf2+0xc8>
 800118c:	000007ff 	.word	0x000007ff

08001190 <__aeabi_dmul>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4657      	mov	r7, sl
 8001194:	464e      	mov	r6, r9
 8001196:	4645      	mov	r5, r8
 8001198:	46de      	mov	lr, fp
 800119a:	b5e0      	push	{r5, r6, r7, lr}
 800119c:	4698      	mov	r8, r3
 800119e:	030c      	lsls	r4, r1, #12
 80011a0:	004b      	lsls	r3, r1, #1
 80011a2:	0006      	movs	r6, r0
 80011a4:	4692      	mov	sl, r2
 80011a6:	b087      	sub	sp, #28
 80011a8:	0b24      	lsrs	r4, r4, #12
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	0fcf      	lsrs	r7, r1, #31
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <__aeabi_dmul+0xfc>
 80011b2:	4add      	ldr	r2, [pc, #884]	; (8001528 <__aeabi_dmul+0x398>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d100      	bne.n	80011ba <__aeabi_dmul+0x2a>
 80011b8:	e086      	b.n	80012c8 <__aeabi_dmul+0x138>
 80011ba:	0f42      	lsrs	r2, r0, #29
 80011bc:	00e4      	lsls	r4, r4, #3
 80011be:	4314      	orrs	r4, r2
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0412      	lsls	r2, r2, #16
 80011c4:	4314      	orrs	r4, r2
 80011c6:	4ad9      	ldr	r2, [pc, #868]	; (800152c <__aeabi_dmul+0x39c>)
 80011c8:	00c5      	lsls	r5, r0, #3
 80011ca:	4694      	mov	ip, r2
 80011cc:	4463      	add	r3, ip
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	4699      	mov	r9, r3
 80011d4:	469b      	mov	fp, r3
 80011d6:	4643      	mov	r3, r8
 80011d8:	4642      	mov	r2, r8
 80011da:	031e      	lsls	r6, r3, #12
 80011dc:	0fd2      	lsrs	r2, r2, #31
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4650      	mov	r0, sl
 80011e2:	4690      	mov	r8, r2
 80011e4:	0b36      	lsrs	r6, r6, #12
 80011e6:	0d5b      	lsrs	r3, r3, #21
 80011e8:	d100      	bne.n	80011ec <__aeabi_dmul+0x5c>
 80011ea:	e078      	b.n	80012de <__aeabi_dmul+0x14e>
 80011ec:	4ace      	ldr	r2, [pc, #824]	; (8001528 <__aeabi_dmul+0x398>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01d      	beq.n	800122e <__aeabi_dmul+0x9e>
 80011f2:	49ce      	ldr	r1, [pc, #824]	; (800152c <__aeabi_dmul+0x39c>)
 80011f4:	0f42      	lsrs	r2, r0, #29
 80011f6:	468c      	mov	ip, r1
 80011f8:	9900      	ldr	r1, [sp, #0]
 80011fa:	4463      	add	r3, ip
 80011fc:	00f6      	lsls	r6, r6, #3
 80011fe:	468c      	mov	ip, r1
 8001200:	4316      	orrs	r6, r2
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	449c      	add	ip, r3
 8001206:	0412      	lsls	r2, r2, #16
 8001208:	4663      	mov	r3, ip
 800120a:	4316      	orrs	r6, r2
 800120c:	00c2      	lsls	r2, r0, #3
 800120e:	2000      	movs	r0, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	9900      	ldr	r1, [sp, #0]
 8001214:	4643      	mov	r3, r8
 8001216:	3101      	adds	r1, #1
 8001218:	468c      	mov	ip, r1
 800121a:	4649      	mov	r1, r9
 800121c:	407b      	eors	r3, r7
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	290f      	cmp	r1, #15
 8001222:	d900      	bls.n	8001226 <__aeabi_dmul+0x96>
 8001224:	e07e      	b.n	8001324 <__aeabi_dmul+0x194>
 8001226:	4bc2      	ldr	r3, [pc, #776]	; (8001530 <__aeabi_dmul+0x3a0>)
 8001228:	0089      	lsls	r1, r1, #2
 800122a:	5859      	ldr	r1, [r3, r1]
 800122c:	468f      	mov	pc, r1
 800122e:	4652      	mov	r2, sl
 8001230:	9b00      	ldr	r3, [sp, #0]
 8001232:	4332      	orrs	r2, r6
 8001234:	d000      	beq.n	8001238 <__aeabi_dmul+0xa8>
 8001236:	e156      	b.n	80014e6 <__aeabi_dmul+0x356>
 8001238:	49bb      	ldr	r1, [pc, #748]	; (8001528 <__aeabi_dmul+0x398>)
 800123a:	2600      	movs	r6, #0
 800123c:	468c      	mov	ip, r1
 800123e:	4463      	add	r3, ip
 8001240:	4649      	mov	r1, r9
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2302      	movs	r3, #2
 8001246:	4319      	orrs	r1, r3
 8001248:	4689      	mov	r9, r1
 800124a:	2002      	movs	r0, #2
 800124c:	e7e1      	b.n	8001212 <__aeabi_dmul+0x82>
 800124e:	4643      	mov	r3, r8
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	0034      	movs	r4, r6
 8001254:	0015      	movs	r5, r2
 8001256:	4683      	mov	fp, r0
 8001258:	465b      	mov	r3, fp
 800125a:	2b02      	cmp	r3, #2
 800125c:	d05e      	beq.n	800131c <__aeabi_dmul+0x18c>
 800125e:	2b03      	cmp	r3, #3
 8001260:	d100      	bne.n	8001264 <__aeabi_dmul+0xd4>
 8001262:	e1f3      	b.n	800164c <__aeabi_dmul+0x4bc>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d000      	beq.n	800126a <__aeabi_dmul+0xda>
 8001268:	e118      	b.n	800149c <__aeabi_dmul+0x30c>
 800126a:	2200      	movs	r2, #0
 800126c:	2400      	movs	r4, #0
 800126e:	2500      	movs	r5, #0
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	0512      	lsls	r2, r2, #20
 8001274:	4322      	orrs	r2, r4
 8001276:	07db      	lsls	r3, r3, #31
 8001278:	431a      	orrs	r2, r3
 800127a:	0028      	movs	r0, r5
 800127c:	0011      	movs	r1, r2
 800127e:	b007      	add	sp, #28
 8001280:	bcf0      	pop	{r4, r5, r6, r7}
 8001282:	46bb      	mov	fp, r7
 8001284:	46b2      	mov	sl, r6
 8001286:	46a9      	mov	r9, r5
 8001288:	46a0      	mov	r8, r4
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	0025      	movs	r5, r4
 800128e:	4305      	orrs	r5, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dmul+0x104>
 8001292:	e141      	b.n	8001518 <__aeabi_dmul+0x388>
 8001294:	2c00      	cmp	r4, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dmul+0x10a>
 8001298:	e1ad      	b.n	80015f6 <__aeabi_dmul+0x466>
 800129a:	0020      	movs	r0, r4
 800129c:	f000 fe20 	bl	8001ee0 <__clzsi2>
 80012a0:	0001      	movs	r1, r0
 80012a2:	0002      	movs	r2, r0
 80012a4:	390b      	subs	r1, #11
 80012a6:	231d      	movs	r3, #29
 80012a8:	0010      	movs	r0, r2
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	0031      	movs	r1, r6
 80012ae:	0035      	movs	r5, r6
 80012b0:	3808      	subs	r0, #8
 80012b2:	4084      	lsls	r4, r0
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4085      	lsls	r5, r0
 80012b8:	430c      	orrs	r4, r1
 80012ba:	489e      	ldr	r0, [pc, #632]	; (8001534 <__aeabi_dmul+0x3a4>)
 80012bc:	1a83      	subs	r3, r0, r2
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	4699      	mov	r9, r3
 80012c4:	469b      	mov	fp, r3
 80012c6:	e786      	b.n	80011d6 <__aeabi_dmul+0x46>
 80012c8:	0005      	movs	r5, r0
 80012ca:	4325      	orrs	r5, r4
 80012cc:	d000      	beq.n	80012d0 <__aeabi_dmul+0x140>
 80012ce:	e11c      	b.n	800150a <__aeabi_dmul+0x37a>
 80012d0:	2208      	movs	r2, #8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2302      	movs	r3, #2
 80012d6:	2400      	movs	r4, #0
 80012d8:	4691      	mov	r9, r2
 80012da:	469b      	mov	fp, r3
 80012dc:	e77b      	b.n	80011d6 <__aeabi_dmul+0x46>
 80012de:	4652      	mov	r2, sl
 80012e0:	4332      	orrs	r2, r6
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dmul+0x156>
 80012e4:	e10a      	b.n	80014fc <__aeabi_dmul+0x36c>
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dmul+0x15c>
 80012ea:	e176      	b.n	80015da <__aeabi_dmul+0x44a>
 80012ec:	0030      	movs	r0, r6
 80012ee:	f000 fdf7 	bl	8001ee0 <__clzsi2>
 80012f2:	0002      	movs	r2, r0
 80012f4:	3a0b      	subs	r2, #11
 80012f6:	231d      	movs	r3, #29
 80012f8:	0001      	movs	r1, r0
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	4652      	mov	r2, sl
 80012fe:	3908      	subs	r1, #8
 8001300:	40da      	lsrs	r2, r3
 8001302:	408e      	lsls	r6, r1
 8001304:	4316      	orrs	r6, r2
 8001306:	4652      	mov	r2, sl
 8001308:	408a      	lsls	r2, r1
 800130a:	9b00      	ldr	r3, [sp, #0]
 800130c:	4989      	ldr	r1, [pc, #548]	; (8001534 <__aeabi_dmul+0x3a4>)
 800130e:	1a18      	subs	r0, r3, r0
 8001310:	0003      	movs	r3, r0
 8001312:	468c      	mov	ip, r1
 8001314:	4463      	add	r3, ip
 8001316:	2000      	movs	r0, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	e77a      	b.n	8001212 <__aeabi_dmul+0x82>
 800131c:	2400      	movs	r4, #0
 800131e:	2500      	movs	r5, #0
 8001320:	4a81      	ldr	r2, [pc, #516]	; (8001528 <__aeabi_dmul+0x398>)
 8001322:	e7a5      	b.n	8001270 <__aeabi_dmul+0xe0>
 8001324:	0c2f      	lsrs	r7, r5, #16
 8001326:	042d      	lsls	r5, r5, #16
 8001328:	0c2d      	lsrs	r5, r5, #16
 800132a:	002b      	movs	r3, r5
 800132c:	0c11      	lsrs	r1, r2, #16
 800132e:	0412      	lsls	r2, r2, #16
 8001330:	0c12      	lsrs	r2, r2, #16
 8001332:	4353      	muls	r3, r2
 8001334:	4698      	mov	r8, r3
 8001336:	0013      	movs	r3, r2
 8001338:	0028      	movs	r0, r5
 800133a:	437b      	muls	r3, r7
 800133c:	4699      	mov	r9, r3
 800133e:	4348      	muls	r0, r1
 8001340:	4448      	add	r0, r9
 8001342:	4683      	mov	fp, r0
 8001344:	4640      	mov	r0, r8
 8001346:	000b      	movs	r3, r1
 8001348:	0c00      	lsrs	r0, r0, #16
 800134a:	4682      	mov	sl, r0
 800134c:	4658      	mov	r0, fp
 800134e:	437b      	muls	r3, r7
 8001350:	4450      	add	r0, sl
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	4581      	cmp	r9, r0
 8001356:	d906      	bls.n	8001366 <__aeabi_dmul+0x1d6>
 8001358:	469a      	mov	sl, r3
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	4699      	mov	r9, r3
 8001360:	44ca      	add	sl, r9
 8001362:	4653      	mov	r3, sl
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	0c03      	lsrs	r3, r0, #16
 8001368:	469b      	mov	fp, r3
 800136a:	4643      	mov	r3, r8
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	0400      	lsls	r0, r0, #16
 8001370:	0c1b      	lsrs	r3, r3, #16
 8001372:	4698      	mov	r8, r3
 8001374:	0003      	movs	r3, r0
 8001376:	4443      	add	r3, r8
 8001378:	9304      	str	r3, [sp, #16]
 800137a:	0c33      	lsrs	r3, r6, #16
 800137c:	4699      	mov	r9, r3
 800137e:	002b      	movs	r3, r5
 8001380:	0436      	lsls	r6, r6, #16
 8001382:	0c36      	lsrs	r6, r6, #16
 8001384:	4373      	muls	r3, r6
 8001386:	4698      	mov	r8, r3
 8001388:	0033      	movs	r3, r6
 800138a:	437b      	muls	r3, r7
 800138c:	469a      	mov	sl, r3
 800138e:	464b      	mov	r3, r9
 8001390:	435d      	muls	r5, r3
 8001392:	435f      	muls	r7, r3
 8001394:	4643      	mov	r3, r8
 8001396:	4455      	add	r5, sl
 8001398:	0c18      	lsrs	r0, r3, #16
 800139a:	1940      	adds	r0, r0, r5
 800139c:	4582      	cmp	sl, r0
 800139e:	d903      	bls.n	80013a8 <__aeabi_dmul+0x218>
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	025b      	lsls	r3, r3, #9
 80013a4:	469a      	mov	sl, r3
 80013a6:	4457      	add	r7, sl
 80013a8:	0c05      	lsrs	r5, r0, #16
 80013aa:	19eb      	adds	r3, r5, r7
 80013ac:	9305      	str	r3, [sp, #20]
 80013ae:	4643      	mov	r3, r8
 80013b0:	041d      	lsls	r5, r3, #16
 80013b2:	0c2d      	lsrs	r5, r5, #16
 80013b4:	0400      	lsls	r0, r0, #16
 80013b6:	1940      	adds	r0, r0, r5
 80013b8:	0c25      	lsrs	r5, r4, #16
 80013ba:	0424      	lsls	r4, r4, #16
 80013bc:	0c24      	lsrs	r4, r4, #16
 80013be:	0027      	movs	r7, r4
 80013c0:	4357      	muls	r7, r2
 80013c2:	436a      	muls	r2, r5
 80013c4:	4690      	mov	r8, r2
 80013c6:	002a      	movs	r2, r5
 80013c8:	0c3b      	lsrs	r3, r7, #16
 80013ca:	469a      	mov	sl, r3
 80013cc:	434a      	muls	r2, r1
 80013ce:	4361      	muls	r1, r4
 80013d0:	4441      	add	r1, r8
 80013d2:	4451      	add	r1, sl
 80013d4:	4483      	add	fp, r0
 80013d6:	4588      	cmp	r8, r1
 80013d8:	d903      	bls.n	80013e2 <__aeabi_dmul+0x252>
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	025b      	lsls	r3, r3, #9
 80013de:	4698      	mov	r8, r3
 80013e0:	4442      	add	r2, r8
 80013e2:	043f      	lsls	r7, r7, #16
 80013e4:	0c0b      	lsrs	r3, r1, #16
 80013e6:	0c3f      	lsrs	r7, r7, #16
 80013e8:	0409      	lsls	r1, r1, #16
 80013ea:	19c9      	adds	r1, r1, r7
 80013ec:	0027      	movs	r7, r4
 80013ee:	4698      	mov	r8, r3
 80013f0:	464b      	mov	r3, r9
 80013f2:	4377      	muls	r7, r6
 80013f4:	435c      	muls	r4, r3
 80013f6:	436e      	muls	r6, r5
 80013f8:	435d      	muls	r5, r3
 80013fa:	0c3b      	lsrs	r3, r7, #16
 80013fc:	4699      	mov	r9, r3
 80013fe:	19a4      	adds	r4, r4, r6
 8001400:	444c      	add	r4, r9
 8001402:	4442      	add	r2, r8
 8001404:	9503      	str	r5, [sp, #12]
 8001406:	42a6      	cmp	r6, r4
 8001408:	d904      	bls.n	8001414 <__aeabi_dmul+0x284>
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	025b      	lsls	r3, r3, #9
 800140e:	4698      	mov	r8, r3
 8001410:	4445      	add	r5, r8
 8001412:	9503      	str	r5, [sp, #12]
 8001414:	9b02      	ldr	r3, [sp, #8]
 8001416:	043f      	lsls	r7, r7, #16
 8001418:	445b      	add	r3, fp
 800141a:	001e      	movs	r6, r3
 800141c:	4283      	cmp	r3, r0
 800141e:	4180      	sbcs	r0, r0
 8001420:	0423      	lsls	r3, r4, #16
 8001422:	4698      	mov	r8, r3
 8001424:	9b05      	ldr	r3, [sp, #20]
 8001426:	0c3f      	lsrs	r7, r7, #16
 8001428:	4447      	add	r7, r8
 800142a:	4698      	mov	r8, r3
 800142c:	1876      	adds	r6, r6, r1
 800142e:	428e      	cmp	r6, r1
 8001430:	4189      	sbcs	r1, r1
 8001432:	4447      	add	r7, r8
 8001434:	4240      	negs	r0, r0
 8001436:	183d      	adds	r5, r7, r0
 8001438:	46a8      	mov	r8, r5
 800143a:	4693      	mov	fp, r2
 800143c:	4249      	negs	r1, r1
 800143e:	468a      	mov	sl, r1
 8001440:	44c3      	add	fp, r8
 8001442:	429f      	cmp	r7, r3
 8001444:	41bf      	sbcs	r7, r7
 8001446:	4580      	cmp	r8, r0
 8001448:	4180      	sbcs	r0, r0
 800144a:	9b03      	ldr	r3, [sp, #12]
 800144c:	44da      	add	sl, fp
 800144e:	4698      	mov	r8, r3
 8001450:	4653      	mov	r3, sl
 8001452:	4240      	negs	r0, r0
 8001454:	427f      	negs	r7, r7
 8001456:	4307      	orrs	r7, r0
 8001458:	0c24      	lsrs	r4, r4, #16
 800145a:	4593      	cmp	fp, r2
 800145c:	4192      	sbcs	r2, r2
 800145e:	458a      	cmp	sl, r1
 8001460:	4189      	sbcs	r1, r1
 8001462:	193f      	adds	r7, r7, r4
 8001464:	0ddc      	lsrs	r4, r3, #23
 8001466:	9b04      	ldr	r3, [sp, #16]
 8001468:	0275      	lsls	r5, r6, #9
 800146a:	431d      	orrs	r5, r3
 800146c:	1e68      	subs	r0, r5, #1
 800146e:	4185      	sbcs	r5, r0
 8001470:	4653      	mov	r3, sl
 8001472:	4252      	negs	r2, r2
 8001474:	4249      	negs	r1, r1
 8001476:	430a      	orrs	r2, r1
 8001478:	18bf      	adds	r7, r7, r2
 800147a:	4447      	add	r7, r8
 800147c:	0df6      	lsrs	r6, r6, #23
 800147e:	027f      	lsls	r7, r7, #9
 8001480:	4335      	orrs	r5, r6
 8001482:	025a      	lsls	r2, r3, #9
 8001484:	433c      	orrs	r4, r7
 8001486:	4315      	orrs	r5, r2
 8001488:	01fb      	lsls	r3, r7, #7
 800148a:	d400      	bmi.n	800148e <__aeabi_dmul+0x2fe>
 800148c:	e0c1      	b.n	8001612 <__aeabi_dmul+0x482>
 800148e:	2101      	movs	r1, #1
 8001490:	086a      	lsrs	r2, r5, #1
 8001492:	400d      	ands	r5, r1
 8001494:	4315      	orrs	r5, r2
 8001496:	07e2      	lsls	r2, r4, #31
 8001498:	4315      	orrs	r5, r2
 800149a:	0864      	lsrs	r4, r4, #1
 800149c:	4926      	ldr	r1, [pc, #152]	; (8001538 <__aeabi_dmul+0x3a8>)
 800149e:	4461      	add	r1, ip
 80014a0:	2900      	cmp	r1, #0
 80014a2:	dd56      	ble.n	8001552 <__aeabi_dmul+0x3c2>
 80014a4:	076b      	lsls	r3, r5, #29
 80014a6:	d009      	beq.n	80014bc <__aeabi_dmul+0x32c>
 80014a8:	220f      	movs	r2, #15
 80014aa:	402a      	ands	r2, r5
 80014ac:	2a04      	cmp	r2, #4
 80014ae:	d005      	beq.n	80014bc <__aeabi_dmul+0x32c>
 80014b0:	1d2a      	adds	r2, r5, #4
 80014b2:	42aa      	cmp	r2, r5
 80014b4:	41ad      	sbcs	r5, r5
 80014b6:	426d      	negs	r5, r5
 80014b8:	1964      	adds	r4, r4, r5
 80014ba:	0015      	movs	r5, r2
 80014bc:	01e3      	lsls	r3, r4, #7
 80014be:	d504      	bpl.n	80014ca <__aeabi_dmul+0x33a>
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <__aeabi_dmul+0x3ac>)
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	4014      	ands	r4, r2
 80014c8:	4461      	add	r1, ip
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <__aeabi_dmul+0x3b0>)
 80014cc:	4291      	cmp	r1, r2
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dmul+0x342>
 80014d0:	e724      	b.n	800131c <__aeabi_dmul+0x18c>
 80014d2:	0762      	lsls	r2, r4, #29
 80014d4:	08ed      	lsrs	r5, r5, #3
 80014d6:	0264      	lsls	r4, r4, #9
 80014d8:	0549      	lsls	r1, r1, #21
 80014da:	4315      	orrs	r5, r2
 80014dc:	0b24      	lsrs	r4, r4, #12
 80014de:	0d4a      	lsrs	r2, r1, #21
 80014e0:	e6c6      	b.n	8001270 <__aeabi_dmul+0xe0>
 80014e2:	9701      	str	r7, [sp, #4]
 80014e4:	e6b8      	b.n	8001258 <__aeabi_dmul+0xc8>
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <__aeabi_dmul+0x398>)
 80014e8:	2003      	movs	r0, #3
 80014ea:	4694      	mov	ip, r2
 80014ec:	4463      	add	r3, ip
 80014ee:	464a      	mov	r2, r9
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2303      	movs	r3, #3
 80014f4:	431a      	orrs	r2, r3
 80014f6:	4691      	mov	r9, r2
 80014f8:	4652      	mov	r2, sl
 80014fa:	e68a      	b.n	8001212 <__aeabi_dmul+0x82>
 80014fc:	4649      	mov	r1, r9
 80014fe:	2301      	movs	r3, #1
 8001500:	4319      	orrs	r1, r3
 8001502:	4689      	mov	r9, r1
 8001504:	2600      	movs	r6, #0
 8001506:	2001      	movs	r0, #1
 8001508:	e683      	b.n	8001212 <__aeabi_dmul+0x82>
 800150a:	220c      	movs	r2, #12
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2303      	movs	r3, #3
 8001510:	0005      	movs	r5, r0
 8001512:	4691      	mov	r9, r2
 8001514:	469b      	mov	fp, r3
 8001516:	e65e      	b.n	80011d6 <__aeabi_dmul+0x46>
 8001518:	2304      	movs	r3, #4
 800151a:	4699      	mov	r9, r3
 800151c:	2300      	movs	r3, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	2400      	movs	r4, #0
 8001524:	469b      	mov	fp, r3
 8001526:	e656      	b.n	80011d6 <__aeabi_dmul+0x46>
 8001528:	000007ff 	.word	0x000007ff
 800152c:	fffffc01 	.word	0xfffffc01
 8001530:	080080e8 	.word	0x080080e8
 8001534:	fffffc0d 	.word	0xfffffc0d
 8001538:	000003ff 	.word	0x000003ff
 800153c:	feffffff 	.word	0xfeffffff
 8001540:	000007fe 	.word	0x000007fe
 8001544:	2300      	movs	r3, #0
 8001546:	2480      	movs	r4, #128	; 0x80
 8001548:	2500      	movs	r5, #0
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <__aeabi_dmul+0x4cc>)
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	0324      	lsls	r4, r4, #12
 8001550:	e68e      	b.n	8001270 <__aeabi_dmul+0xe0>
 8001552:	2001      	movs	r0, #1
 8001554:	1a40      	subs	r0, r0, r1
 8001556:	2838      	cmp	r0, #56	; 0x38
 8001558:	dd00      	ble.n	800155c <__aeabi_dmul+0x3cc>
 800155a:	e686      	b.n	800126a <__aeabi_dmul+0xda>
 800155c:	281f      	cmp	r0, #31
 800155e:	dd5b      	ble.n	8001618 <__aeabi_dmul+0x488>
 8001560:	221f      	movs	r2, #31
 8001562:	0023      	movs	r3, r4
 8001564:	4252      	negs	r2, r2
 8001566:	1a51      	subs	r1, r2, r1
 8001568:	40cb      	lsrs	r3, r1
 800156a:	0019      	movs	r1, r3
 800156c:	2820      	cmp	r0, #32
 800156e:	d003      	beq.n	8001578 <__aeabi_dmul+0x3e8>
 8001570:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <__aeabi_dmul+0x4d0>)
 8001572:	4462      	add	r2, ip
 8001574:	4094      	lsls	r4, r2
 8001576:	4325      	orrs	r5, r4
 8001578:	1e6a      	subs	r2, r5, #1
 800157a:	4195      	sbcs	r5, r2
 800157c:	002a      	movs	r2, r5
 800157e:	430a      	orrs	r2, r1
 8001580:	2107      	movs	r1, #7
 8001582:	000d      	movs	r5, r1
 8001584:	2400      	movs	r4, #0
 8001586:	4015      	ands	r5, r2
 8001588:	4211      	tst	r1, r2
 800158a:	d05b      	beq.n	8001644 <__aeabi_dmul+0x4b4>
 800158c:	210f      	movs	r1, #15
 800158e:	2400      	movs	r4, #0
 8001590:	4011      	ands	r1, r2
 8001592:	2904      	cmp	r1, #4
 8001594:	d053      	beq.n	800163e <__aeabi_dmul+0x4ae>
 8001596:	1d11      	adds	r1, r2, #4
 8001598:	4291      	cmp	r1, r2
 800159a:	4192      	sbcs	r2, r2
 800159c:	4252      	negs	r2, r2
 800159e:	18a4      	adds	r4, r4, r2
 80015a0:	000a      	movs	r2, r1
 80015a2:	0223      	lsls	r3, r4, #8
 80015a4:	d54b      	bpl.n	800163e <__aeabi_dmul+0x4ae>
 80015a6:	2201      	movs	r2, #1
 80015a8:	2400      	movs	r4, #0
 80015aa:	2500      	movs	r5, #0
 80015ac:	e660      	b.n	8001270 <__aeabi_dmul+0xe0>
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	421c      	tst	r4, r3
 80015b4:	d009      	beq.n	80015ca <__aeabi_dmul+0x43a>
 80015b6:	421e      	tst	r6, r3
 80015b8:	d107      	bne.n	80015ca <__aeabi_dmul+0x43a>
 80015ba:	4333      	orrs	r3, r6
 80015bc:	031c      	lsls	r4, r3, #12
 80015be:	4643      	mov	r3, r8
 80015c0:	0015      	movs	r5, r2
 80015c2:	0b24      	lsrs	r4, r4, #12
 80015c4:	4a25      	ldr	r2, [pc, #148]	; (800165c <__aeabi_dmul+0x4cc>)
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	e652      	b.n	8001270 <__aeabi_dmul+0xe0>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0312      	lsls	r2, r2, #12
 80015ce:	4314      	orrs	r4, r2
 80015d0:	0324      	lsls	r4, r4, #12
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <__aeabi_dmul+0x4cc>)
 80015d4:	0b24      	lsrs	r4, r4, #12
 80015d6:	9701      	str	r7, [sp, #4]
 80015d8:	e64a      	b.n	8001270 <__aeabi_dmul+0xe0>
 80015da:	f000 fc81 	bl	8001ee0 <__clzsi2>
 80015de:	0003      	movs	r3, r0
 80015e0:	001a      	movs	r2, r3
 80015e2:	3215      	adds	r2, #21
 80015e4:	3020      	adds	r0, #32
 80015e6:	2a1c      	cmp	r2, #28
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dmul+0x45c>
 80015ea:	e684      	b.n	80012f6 <__aeabi_dmul+0x166>
 80015ec:	4656      	mov	r6, sl
 80015ee:	3b08      	subs	r3, #8
 80015f0:	2200      	movs	r2, #0
 80015f2:	409e      	lsls	r6, r3
 80015f4:	e689      	b.n	800130a <__aeabi_dmul+0x17a>
 80015f6:	f000 fc73 	bl	8001ee0 <__clzsi2>
 80015fa:	0001      	movs	r1, r0
 80015fc:	0002      	movs	r2, r0
 80015fe:	3115      	adds	r1, #21
 8001600:	3220      	adds	r2, #32
 8001602:	291c      	cmp	r1, #28
 8001604:	dc00      	bgt.n	8001608 <__aeabi_dmul+0x478>
 8001606:	e64e      	b.n	80012a6 <__aeabi_dmul+0x116>
 8001608:	0034      	movs	r4, r6
 800160a:	3808      	subs	r0, #8
 800160c:	2500      	movs	r5, #0
 800160e:	4084      	lsls	r4, r0
 8001610:	e653      	b.n	80012ba <__aeabi_dmul+0x12a>
 8001612:	9b00      	ldr	r3, [sp, #0]
 8001614:	469c      	mov	ip, r3
 8001616:	e741      	b.n	800149c <__aeabi_dmul+0x30c>
 8001618:	4912      	ldr	r1, [pc, #72]	; (8001664 <__aeabi_dmul+0x4d4>)
 800161a:	0022      	movs	r2, r4
 800161c:	4461      	add	r1, ip
 800161e:	002e      	movs	r6, r5
 8001620:	408d      	lsls	r5, r1
 8001622:	408a      	lsls	r2, r1
 8001624:	40c6      	lsrs	r6, r0
 8001626:	1e69      	subs	r1, r5, #1
 8001628:	418d      	sbcs	r5, r1
 800162a:	4332      	orrs	r2, r6
 800162c:	432a      	orrs	r2, r5
 800162e:	40c4      	lsrs	r4, r0
 8001630:	0753      	lsls	r3, r2, #29
 8001632:	d0b6      	beq.n	80015a2 <__aeabi_dmul+0x412>
 8001634:	210f      	movs	r1, #15
 8001636:	4011      	ands	r1, r2
 8001638:	2904      	cmp	r1, #4
 800163a:	d1ac      	bne.n	8001596 <__aeabi_dmul+0x406>
 800163c:	e7b1      	b.n	80015a2 <__aeabi_dmul+0x412>
 800163e:	0765      	lsls	r5, r4, #29
 8001640:	0264      	lsls	r4, r4, #9
 8001642:	0b24      	lsrs	r4, r4, #12
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	4315      	orrs	r5, r2
 8001648:	2200      	movs	r2, #0
 800164a:	e611      	b.n	8001270 <__aeabi_dmul+0xe0>
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	4314      	orrs	r4, r2
 8001652:	0324      	lsls	r4, r4, #12
 8001654:	4a01      	ldr	r2, [pc, #4]	; (800165c <__aeabi_dmul+0x4cc>)
 8001656:	0b24      	lsrs	r4, r4, #12
 8001658:	e60a      	b.n	8001270 <__aeabi_dmul+0xe0>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	000007ff 	.word	0x000007ff
 8001660:	0000043e 	.word	0x0000043e
 8001664:	0000041e 	.word	0x0000041e

08001668 <__aeabi_dsub>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	4657      	mov	r7, sl
 800166c:	464e      	mov	r6, r9
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	0004      	movs	r4, r0
 8001674:	b5e0      	push	{r5, r6, r7, lr}
 8001676:	001f      	movs	r7, r3
 8001678:	0010      	movs	r0, r2
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0f62      	lsrs	r2, r4, #29
 800167e:	004e      	lsls	r6, r1, #1
 8001680:	0fcd      	lsrs	r5, r1, #31
 8001682:	0a5b      	lsrs	r3, r3, #9
 8001684:	0339      	lsls	r1, r7, #12
 8001686:	4313      	orrs	r3, r2
 8001688:	0a49      	lsrs	r1, r1, #9
 800168a:	00e2      	lsls	r2, r4, #3
 800168c:	0f44      	lsrs	r4, r0, #29
 800168e:	4321      	orrs	r1, r4
 8001690:	4cc2      	ldr	r4, [pc, #776]	; (800199c <__aeabi_dsub+0x334>)
 8001692:	4691      	mov	r9, r2
 8001694:	4692      	mov	sl, r2
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	007a      	lsls	r2, r7, #1
 800169a:	4680      	mov	r8, r0
 800169c:	0d76      	lsrs	r6, r6, #21
 800169e:	0d52      	lsrs	r2, r2, #21
 80016a0:	0fff      	lsrs	r7, r7, #31
 80016a2:	42a2      	cmp	r2, r4
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dsub+0x40>
 80016a6:	e0b4      	b.n	8001812 <__aeabi_dsub+0x1aa>
 80016a8:	2401      	movs	r4, #1
 80016aa:	4067      	eors	r7, r4
 80016ac:	46bb      	mov	fp, r7
 80016ae:	42bd      	cmp	r5, r7
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dsub+0x4c>
 80016b2:	e088      	b.n	80017c6 <__aeabi_dsub+0x15e>
 80016b4:	1ab4      	subs	r4, r6, r2
 80016b6:	46a4      	mov	ip, r4
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	dc00      	bgt.n	80016be <__aeabi_dsub+0x56>
 80016bc:	e0b2      	b.n	8001824 <__aeabi_dsub+0x1bc>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x5c>
 80016c2:	e0c5      	b.n	8001850 <__aeabi_dsub+0x1e8>
 80016c4:	4ab5      	ldr	r2, [pc, #724]	; (800199c <__aeabi_dsub+0x334>)
 80016c6:	4296      	cmp	r6, r2
 80016c8:	d100      	bne.n	80016cc <__aeabi_dsub+0x64>
 80016ca:	e28b      	b.n	8001be4 <__aeabi_dsub+0x57c>
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0412      	lsls	r2, r2, #16
 80016d0:	4311      	orrs	r1, r2
 80016d2:	4662      	mov	r2, ip
 80016d4:	2a38      	cmp	r2, #56	; 0x38
 80016d6:	dd00      	ble.n	80016da <__aeabi_dsub+0x72>
 80016d8:	e1a1      	b.n	8001a1e <__aeabi_dsub+0x3b6>
 80016da:	2a1f      	cmp	r2, #31
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_dsub+0x78>
 80016de:	e216      	b.n	8001b0e <__aeabi_dsub+0x4a6>
 80016e0:	2720      	movs	r7, #32
 80016e2:	000c      	movs	r4, r1
 80016e4:	1abf      	subs	r7, r7, r2
 80016e6:	40bc      	lsls	r4, r7
 80016e8:	0002      	movs	r2, r0
 80016ea:	46a0      	mov	r8, r4
 80016ec:	4664      	mov	r4, ip
 80016ee:	40b8      	lsls	r0, r7
 80016f0:	40e2      	lsrs	r2, r4
 80016f2:	4644      	mov	r4, r8
 80016f4:	4314      	orrs	r4, r2
 80016f6:	0002      	movs	r2, r0
 80016f8:	1e50      	subs	r0, r2, #1
 80016fa:	4182      	sbcs	r2, r0
 80016fc:	4660      	mov	r0, ip
 80016fe:	40c1      	lsrs	r1, r0
 8001700:	4322      	orrs	r2, r4
 8001702:	1a5b      	subs	r3, r3, r1
 8001704:	4649      	mov	r1, r9
 8001706:	1a8c      	subs	r4, r1, r2
 8001708:	45a1      	cmp	r9, r4
 800170a:	4192      	sbcs	r2, r2
 800170c:	4252      	negs	r2, r2
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	4698      	mov	r8, r3
 8001712:	4643      	mov	r3, r8
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	d400      	bmi.n	800171a <__aeabi_dsub+0xb2>
 8001718:	e117      	b.n	800194a <__aeabi_dsub+0x2e2>
 800171a:	4643      	mov	r3, r8
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	0a5b      	lsrs	r3, r3, #9
 8001720:	4698      	mov	r8, r3
 8001722:	4643      	mov	r3, r8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dsub+0xc2>
 8001728:	e16c      	b.n	8001a04 <__aeabi_dsub+0x39c>
 800172a:	4640      	mov	r0, r8
 800172c:	f000 fbd8 	bl	8001ee0 <__clzsi2>
 8001730:	0002      	movs	r2, r0
 8001732:	3a08      	subs	r2, #8
 8001734:	2120      	movs	r1, #32
 8001736:	0020      	movs	r0, r4
 8001738:	4643      	mov	r3, r8
 800173a:	1a89      	subs	r1, r1, r2
 800173c:	4093      	lsls	r3, r2
 800173e:	40c8      	lsrs	r0, r1
 8001740:	4094      	lsls	r4, r2
 8001742:	4303      	orrs	r3, r0
 8001744:	4296      	cmp	r6, r2
 8001746:	dd00      	ble.n	800174a <__aeabi_dsub+0xe2>
 8001748:	e157      	b.n	80019fa <__aeabi_dsub+0x392>
 800174a:	1b96      	subs	r6, r2, r6
 800174c:	1c71      	adds	r1, r6, #1
 800174e:	291f      	cmp	r1, #31
 8001750:	dd00      	ble.n	8001754 <__aeabi_dsub+0xec>
 8001752:	e1cb      	b.n	8001aec <__aeabi_dsub+0x484>
 8001754:	2220      	movs	r2, #32
 8001756:	0018      	movs	r0, r3
 8001758:	0026      	movs	r6, r4
 800175a:	1a52      	subs	r2, r2, r1
 800175c:	4094      	lsls	r4, r2
 800175e:	4090      	lsls	r0, r2
 8001760:	40ce      	lsrs	r6, r1
 8001762:	40cb      	lsrs	r3, r1
 8001764:	1e62      	subs	r2, r4, #1
 8001766:	4194      	sbcs	r4, r2
 8001768:	4330      	orrs	r0, r6
 800176a:	4698      	mov	r8, r3
 800176c:	2600      	movs	r6, #0
 800176e:	4304      	orrs	r4, r0
 8001770:	0763      	lsls	r3, r4, #29
 8001772:	d009      	beq.n	8001788 <__aeabi_dsub+0x120>
 8001774:	230f      	movs	r3, #15
 8001776:	4023      	ands	r3, r4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d005      	beq.n	8001788 <__aeabi_dsub+0x120>
 800177c:	1d23      	adds	r3, r4, #4
 800177e:	42a3      	cmp	r3, r4
 8001780:	41a4      	sbcs	r4, r4
 8001782:	4264      	negs	r4, r4
 8001784:	44a0      	add	r8, r4
 8001786:	001c      	movs	r4, r3
 8001788:	4643      	mov	r3, r8
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	d400      	bmi.n	8001790 <__aeabi_dsub+0x128>
 800178e:	e0df      	b.n	8001950 <__aeabi_dsub+0x2e8>
 8001790:	4b82      	ldr	r3, [pc, #520]	; (800199c <__aeabi_dsub+0x334>)
 8001792:	3601      	adds	r6, #1
 8001794:	429e      	cmp	r6, r3
 8001796:	d100      	bne.n	800179a <__aeabi_dsub+0x132>
 8001798:	e0fb      	b.n	8001992 <__aeabi_dsub+0x32a>
 800179a:	4642      	mov	r2, r8
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <__aeabi_dsub+0x338>)
 800179e:	08e4      	lsrs	r4, r4, #3
 80017a0:	401a      	ands	r2, r3
 80017a2:	0013      	movs	r3, r2
 80017a4:	0571      	lsls	r1, r6, #21
 80017a6:	0752      	lsls	r2, r2, #29
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4322      	orrs	r2, r4
 80017ac:	0b1b      	lsrs	r3, r3, #12
 80017ae:	0d49      	lsrs	r1, r1, #21
 80017b0:	0509      	lsls	r1, r1, #20
 80017b2:	07ed      	lsls	r5, r5, #31
 80017b4:	4319      	orrs	r1, r3
 80017b6:	4329      	orrs	r1, r5
 80017b8:	0010      	movs	r0, r2
 80017ba:	bcf0      	pop	{r4, r5, r6, r7}
 80017bc:	46bb      	mov	fp, r7
 80017be:	46b2      	mov	sl, r6
 80017c0:	46a9      	mov	r9, r5
 80017c2:	46a0      	mov	r8, r4
 80017c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c6:	1ab4      	subs	r4, r6, r2
 80017c8:	46a4      	mov	ip, r4
 80017ca:	2c00      	cmp	r4, #0
 80017cc:	dd58      	ble.n	8001880 <__aeabi_dsub+0x218>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x16c>
 80017d2:	e09e      	b.n	8001912 <__aeabi_dsub+0x2aa>
 80017d4:	4a71      	ldr	r2, [pc, #452]	; (800199c <__aeabi_dsub+0x334>)
 80017d6:	4296      	cmp	r6, r2
 80017d8:	d100      	bne.n	80017dc <__aeabi_dsub+0x174>
 80017da:	e13b      	b.n	8001a54 <__aeabi_dsub+0x3ec>
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	4311      	orrs	r1, r2
 80017e2:	4662      	mov	r2, ip
 80017e4:	2a38      	cmp	r2, #56	; 0x38
 80017e6:	dd00      	ble.n	80017ea <__aeabi_dsub+0x182>
 80017e8:	e0c1      	b.n	800196e <__aeabi_dsub+0x306>
 80017ea:	2a1f      	cmp	r2, #31
 80017ec:	dc00      	bgt.n	80017f0 <__aeabi_dsub+0x188>
 80017ee:	e1bb      	b.n	8001b68 <__aeabi_dsub+0x500>
 80017f0:	000c      	movs	r4, r1
 80017f2:	3a20      	subs	r2, #32
 80017f4:	40d4      	lsrs	r4, r2
 80017f6:	0022      	movs	r2, r4
 80017f8:	4664      	mov	r4, ip
 80017fa:	2c20      	cmp	r4, #32
 80017fc:	d004      	beq.n	8001808 <__aeabi_dsub+0x1a0>
 80017fe:	2740      	movs	r7, #64	; 0x40
 8001800:	1b3f      	subs	r7, r7, r4
 8001802:	40b9      	lsls	r1, r7
 8001804:	4308      	orrs	r0, r1
 8001806:	4680      	mov	r8, r0
 8001808:	4644      	mov	r4, r8
 800180a:	1e61      	subs	r1, r4, #1
 800180c:	418c      	sbcs	r4, r1
 800180e:	4314      	orrs	r4, r2
 8001810:	e0b1      	b.n	8001976 <__aeabi_dsub+0x30e>
 8001812:	000c      	movs	r4, r1
 8001814:	4304      	orrs	r4, r0
 8001816:	d02a      	beq.n	800186e <__aeabi_dsub+0x206>
 8001818:	46bb      	mov	fp, r7
 800181a:	42bd      	cmp	r5, r7
 800181c:	d02d      	beq.n	800187a <__aeabi_dsub+0x212>
 800181e:	4c61      	ldr	r4, [pc, #388]	; (80019a4 <__aeabi_dsub+0x33c>)
 8001820:	46a4      	mov	ip, r4
 8001822:	44b4      	add	ip, r6
 8001824:	4664      	mov	r4, ip
 8001826:	2c00      	cmp	r4, #0
 8001828:	d05c      	beq.n	80018e4 <__aeabi_dsub+0x27c>
 800182a:	1b94      	subs	r4, r2, r6
 800182c:	46a4      	mov	ip, r4
 800182e:	2e00      	cmp	r6, #0
 8001830:	d000      	beq.n	8001834 <__aeabi_dsub+0x1cc>
 8001832:	e115      	b.n	8001a60 <__aeabi_dsub+0x3f8>
 8001834:	464d      	mov	r5, r9
 8001836:	431d      	orrs	r5, r3
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x1d4>
 800183a:	e1c3      	b.n	8001bc4 <__aeabi_dsub+0x55c>
 800183c:	1e65      	subs	r5, r4, #1
 800183e:	2c01      	cmp	r4, #1
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x1dc>
 8001842:	e20c      	b.n	8001c5e <__aeabi_dsub+0x5f6>
 8001844:	4e55      	ldr	r6, [pc, #340]	; (800199c <__aeabi_dsub+0x334>)
 8001846:	42b4      	cmp	r4, r6
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x1e4>
 800184a:	e1f8      	b.n	8001c3e <__aeabi_dsub+0x5d6>
 800184c:	46ac      	mov	ip, r5
 800184e:	e10e      	b.n	8001a6e <__aeabi_dsub+0x406>
 8001850:	000a      	movs	r2, r1
 8001852:	4302      	orrs	r2, r0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x1f0>
 8001856:	e136      	b.n	8001ac6 <__aeabi_dsub+0x45e>
 8001858:	0022      	movs	r2, r4
 800185a:	3a01      	subs	r2, #1
 800185c:	2c01      	cmp	r4, #1
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x1fa>
 8001860:	e1c6      	b.n	8001bf0 <__aeabi_dsub+0x588>
 8001862:	4c4e      	ldr	r4, [pc, #312]	; (800199c <__aeabi_dsub+0x334>)
 8001864:	45a4      	cmp	ip, r4
 8001866:	d100      	bne.n	800186a <__aeabi_dsub+0x202>
 8001868:	e0f4      	b.n	8001a54 <__aeabi_dsub+0x3ec>
 800186a:	4694      	mov	ip, r2
 800186c:	e731      	b.n	80016d2 <__aeabi_dsub+0x6a>
 800186e:	2401      	movs	r4, #1
 8001870:	4067      	eors	r7, r4
 8001872:	46bb      	mov	fp, r7
 8001874:	42bd      	cmp	r5, r7
 8001876:	d000      	beq.n	800187a <__aeabi_dsub+0x212>
 8001878:	e71c      	b.n	80016b4 <__aeabi_dsub+0x4c>
 800187a:	4c4a      	ldr	r4, [pc, #296]	; (80019a4 <__aeabi_dsub+0x33c>)
 800187c:	46a4      	mov	ip, r4
 800187e:	44b4      	add	ip, r6
 8001880:	4664      	mov	r4, ip
 8001882:	2c00      	cmp	r4, #0
 8001884:	d100      	bne.n	8001888 <__aeabi_dsub+0x220>
 8001886:	e0cf      	b.n	8001a28 <__aeabi_dsub+0x3c0>
 8001888:	1b94      	subs	r4, r2, r6
 800188a:	46a4      	mov	ip, r4
 800188c:	2e00      	cmp	r6, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0x22a>
 8001890:	e15c      	b.n	8001b4c <__aeabi_dsub+0x4e4>
 8001892:	4e42      	ldr	r6, [pc, #264]	; (800199c <__aeabi_dsub+0x334>)
 8001894:	42b2      	cmp	r2, r6
 8001896:	d100      	bne.n	800189a <__aeabi_dsub+0x232>
 8001898:	e1ec      	b.n	8001c74 <__aeabi_dsub+0x60c>
 800189a:	2680      	movs	r6, #128	; 0x80
 800189c:	0436      	lsls	r6, r6, #16
 800189e:	4333      	orrs	r3, r6
 80018a0:	4664      	mov	r4, ip
 80018a2:	2c38      	cmp	r4, #56	; 0x38
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dsub+0x240>
 80018a6:	e1b3      	b.n	8001c10 <__aeabi_dsub+0x5a8>
 80018a8:	2c1f      	cmp	r4, #31
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dsub+0x246>
 80018ac:	e238      	b.n	8001d20 <__aeabi_dsub+0x6b8>
 80018ae:	2620      	movs	r6, #32
 80018b0:	1b36      	subs	r6, r6, r4
 80018b2:	001c      	movs	r4, r3
 80018b4:	40b4      	lsls	r4, r6
 80018b6:	464f      	mov	r7, r9
 80018b8:	46a0      	mov	r8, r4
 80018ba:	4664      	mov	r4, ip
 80018bc:	40e7      	lsrs	r7, r4
 80018be:	4644      	mov	r4, r8
 80018c0:	433c      	orrs	r4, r7
 80018c2:	464f      	mov	r7, r9
 80018c4:	40b7      	lsls	r7, r6
 80018c6:	003e      	movs	r6, r7
 80018c8:	1e77      	subs	r7, r6, #1
 80018ca:	41be      	sbcs	r6, r7
 80018cc:	4334      	orrs	r4, r6
 80018ce:	4666      	mov	r6, ip
 80018d0:	40f3      	lsrs	r3, r6
 80018d2:	18c9      	adds	r1, r1, r3
 80018d4:	1824      	adds	r4, r4, r0
 80018d6:	4284      	cmp	r4, r0
 80018d8:	419b      	sbcs	r3, r3
 80018da:	425b      	negs	r3, r3
 80018dc:	4698      	mov	r8, r3
 80018de:	0016      	movs	r6, r2
 80018e0:	4488      	add	r8, r1
 80018e2:	e04e      	b.n	8001982 <__aeabi_dsub+0x31a>
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <__aeabi_dsub+0x340>)
 80018e6:	1c74      	adds	r4, r6, #1
 80018e8:	4214      	tst	r4, r2
 80018ea:	d000      	beq.n	80018ee <__aeabi_dsub+0x286>
 80018ec:	e0d6      	b.n	8001a9c <__aeabi_dsub+0x434>
 80018ee:	464a      	mov	r2, r9
 80018f0:	431a      	orrs	r2, r3
 80018f2:	2e00      	cmp	r6, #0
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dsub+0x290>
 80018f6:	e15b      	b.n	8001bb0 <__aeabi_dsub+0x548>
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d100      	bne.n	80018fe <__aeabi_dsub+0x296>
 80018fc:	e1a5      	b.n	8001c4a <__aeabi_dsub+0x5e2>
 80018fe:	000a      	movs	r2, r1
 8001900:	4302      	orrs	r2, r0
 8001902:	d000      	beq.n	8001906 <__aeabi_dsub+0x29e>
 8001904:	e1bb      	b.n	8001c7e <__aeabi_dsub+0x616>
 8001906:	464a      	mov	r2, r9
 8001908:	0759      	lsls	r1, r3, #29
 800190a:	08d2      	lsrs	r2, r2, #3
 800190c:	430a      	orrs	r2, r1
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	e027      	b.n	8001962 <__aeabi_dsub+0x2fa>
 8001912:	000a      	movs	r2, r1
 8001914:	4302      	orrs	r2, r0
 8001916:	d100      	bne.n	800191a <__aeabi_dsub+0x2b2>
 8001918:	e174      	b.n	8001c04 <__aeabi_dsub+0x59c>
 800191a:	0022      	movs	r2, r4
 800191c:	3a01      	subs	r2, #1
 800191e:	2c01      	cmp	r4, #1
 8001920:	d005      	beq.n	800192e <__aeabi_dsub+0x2c6>
 8001922:	4c1e      	ldr	r4, [pc, #120]	; (800199c <__aeabi_dsub+0x334>)
 8001924:	45a4      	cmp	ip, r4
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x2c2>
 8001928:	e094      	b.n	8001a54 <__aeabi_dsub+0x3ec>
 800192a:	4694      	mov	ip, r2
 800192c:	e759      	b.n	80017e2 <__aeabi_dsub+0x17a>
 800192e:	4448      	add	r0, r9
 8001930:	4548      	cmp	r0, r9
 8001932:	4192      	sbcs	r2, r2
 8001934:	185b      	adds	r3, r3, r1
 8001936:	4698      	mov	r8, r3
 8001938:	0004      	movs	r4, r0
 800193a:	4252      	negs	r2, r2
 800193c:	4490      	add	r8, r2
 800193e:	4643      	mov	r3, r8
 8001940:	2602      	movs	r6, #2
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	d500      	bpl.n	8001948 <__aeabi_dsub+0x2e0>
 8001946:	e0c4      	b.n	8001ad2 <__aeabi_dsub+0x46a>
 8001948:	3e01      	subs	r6, #1
 800194a:	0763      	lsls	r3, r4, #29
 800194c:	d000      	beq.n	8001950 <__aeabi_dsub+0x2e8>
 800194e:	e711      	b.n	8001774 <__aeabi_dsub+0x10c>
 8001950:	4643      	mov	r3, r8
 8001952:	46b4      	mov	ip, r6
 8001954:	0759      	lsls	r1, r3, #29
 8001956:	08e2      	lsrs	r2, r4, #3
 8001958:	430a      	orrs	r2, r1
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <__aeabi_dsub+0x334>)
 800195e:	458c      	cmp	ip, r1
 8001960:	d040      	beq.n	80019e4 <__aeabi_dsub+0x37c>
 8001962:	4661      	mov	r1, ip
 8001964:	031b      	lsls	r3, r3, #12
 8001966:	0549      	lsls	r1, r1, #21
 8001968:	0b1b      	lsrs	r3, r3, #12
 800196a:	0d49      	lsrs	r1, r1, #21
 800196c:	e720      	b.n	80017b0 <__aeabi_dsub+0x148>
 800196e:	4301      	orrs	r1, r0
 8001970:	000c      	movs	r4, r1
 8001972:	1e61      	subs	r1, r4, #1
 8001974:	418c      	sbcs	r4, r1
 8001976:	444c      	add	r4, r9
 8001978:	454c      	cmp	r4, r9
 800197a:	4192      	sbcs	r2, r2
 800197c:	4252      	negs	r2, r2
 800197e:	4690      	mov	r8, r2
 8001980:	4498      	add	r8, r3
 8001982:	4643      	mov	r3, r8
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	d5e0      	bpl.n	800194a <__aeabi_dsub+0x2e2>
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d000      	beq.n	8001992 <__aeabi_dsub+0x32a>
 8001990:	e09f      	b.n	8001ad2 <__aeabi_dsub+0x46a>
 8001992:	0031      	movs	r1, r6
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	e70a      	b.n	80017b0 <__aeabi_dsub+0x148>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff
 80019a0:	ff7fffff 	.word	0xff7fffff
 80019a4:	fffff801 	.word	0xfffff801
 80019a8:	000007fe 	.word	0x000007fe
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dsub+0x34a>
 80019b0:	e160      	b.n	8001c74 <__aeabi_dsub+0x60c>
 80019b2:	000a      	movs	r2, r1
 80019b4:	4302      	orrs	r2, r0
 80019b6:	d04d      	beq.n	8001a54 <__aeabi_dsub+0x3ec>
 80019b8:	464a      	mov	r2, r9
 80019ba:	075c      	lsls	r4, r3, #29
 80019bc:	08d2      	lsrs	r2, r2, #3
 80019be:	4322      	orrs	r2, r4
 80019c0:	2480      	movs	r4, #128	; 0x80
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	4223      	tst	r3, r4
 80019c8:	d007      	beq.n	80019da <__aeabi_dsub+0x372>
 80019ca:	08ce      	lsrs	r6, r1, #3
 80019cc:	4226      	tst	r6, r4
 80019ce:	d104      	bne.n	80019da <__aeabi_dsub+0x372>
 80019d0:	465d      	mov	r5, fp
 80019d2:	0033      	movs	r3, r6
 80019d4:	08c2      	lsrs	r2, r0, #3
 80019d6:	0749      	lsls	r1, r1, #29
 80019d8:	430a      	orrs	r2, r1
 80019da:	0f51      	lsrs	r1, r2, #29
 80019dc:	00d2      	lsls	r2, r2, #3
 80019de:	08d2      	lsrs	r2, r2, #3
 80019e0:	0749      	lsls	r1, r1, #29
 80019e2:	430a      	orrs	r2, r1
 80019e4:	0011      	movs	r1, r2
 80019e6:	4319      	orrs	r1, r3
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x384>
 80019ea:	e1c8      	b.n	8001d7e <__aeabi_dsub+0x716>
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0309      	lsls	r1, r1, #12
 80019f0:	430b      	orrs	r3, r1
 80019f2:	031b      	lsls	r3, r3, #12
 80019f4:	49d5      	ldr	r1, [pc, #852]	; (8001d4c <__aeabi_dsub+0x6e4>)
 80019f6:	0b1b      	lsrs	r3, r3, #12
 80019f8:	e6da      	b.n	80017b0 <__aeabi_dsub+0x148>
 80019fa:	49d5      	ldr	r1, [pc, #852]	; (8001d50 <__aeabi_dsub+0x6e8>)
 80019fc:	1ab6      	subs	r6, r6, r2
 80019fe:	400b      	ands	r3, r1
 8001a00:	4698      	mov	r8, r3
 8001a02:	e6b5      	b.n	8001770 <__aeabi_dsub+0x108>
 8001a04:	0020      	movs	r0, r4
 8001a06:	f000 fa6b 	bl	8001ee0 <__clzsi2>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	3218      	adds	r2, #24
 8001a0e:	2a1f      	cmp	r2, #31
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dsub+0x3ac>
 8001a12:	e68f      	b.n	8001734 <__aeabi_dsub+0xcc>
 8001a14:	0023      	movs	r3, r4
 8001a16:	3808      	subs	r0, #8
 8001a18:	4083      	lsls	r3, r0
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	e692      	b.n	8001744 <__aeabi_dsub+0xdc>
 8001a1e:	4308      	orrs	r0, r1
 8001a20:	0002      	movs	r2, r0
 8001a22:	1e50      	subs	r0, r2, #1
 8001a24:	4182      	sbcs	r2, r0
 8001a26:	e66d      	b.n	8001704 <__aeabi_dsub+0x9c>
 8001a28:	4cca      	ldr	r4, [pc, #808]	; (8001d54 <__aeabi_dsub+0x6ec>)
 8001a2a:	1c72      	adds	r2, r6, #1
 8001a2c:	4222      	tst	r2, r4
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x3ca>
 8001a30:	e0ad      	b.n	8001b8e <__aeabi_dsub+0x526>
 8001a32:	464a      	mov	r2, r9
 8001a34:	431a      	orrs	r2, r3
 8001a36:	2e00      	cmp	r6, #0
 8001a38:	d1b8      	bne.n	80019ac <__aeabi_dsub+0x344>
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x3d8>
 8001a3e:	e158      	b.n	8001cf2 <__aeabi_dsub+0x68a>
 8001a40:	000a      	movs	r2, r1
 8001a42:	4302      	orrs	r2, r0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_dsub+0x3e0>
 8001a46:	e159      	b.n	8001cfc <__aeabi_dsub+0x694>
 8001a48:	464a      	mov	r2, r9
 8001a4a:	0759      	lsls	r1, r3, #29
 8001a4c:	08d2      	lsrs	r2, r2, #3
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	e786      	b.n	8001962 <__aeabi_dsub+0x2fa>
 8001a54:	464a      	mov	r2, r9
 8001a56:	0759      	lsls	r1, r3, #29
 8001a58:	08d2      	lsrs	r2, r2, #3
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	e7c1      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001a60:	4dba      	ldr	r5, [pc, #744]	; (8001d4c <__aeabi_dsub+0x6e4>)
 8001a62:	42aa      	cmp	r2, r5
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x400>
 8001a66:	e11e      	b.n	8001ca6 <__aeabi_dsub+0x63e>
 8001a68:	2580      	movs	r5, #128	; 0x80
 8001a6a:	042d      	lsls	r5, r5, #16
 8001a6c:	432b      	orrs	r3, r5
 8001a6e:	4664      	mov	r4, ip
 8001a70:	2c38      	cmp	r4, #56	; 0x38
 8001a72:	dc5d      	bgt.n	8001b30 <__aeabi_dsub+0x4c8>
 8001a74:	2c1f      	cmp	r4, #31
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0x412>
 8001a78:	e0d0      	b.n	8001c1c <__aeabi_dsub+0x5b4>
 8001a7a:	2520      	movs	r5, #32
 8001a7c:	4667      	mov	r7, ip
 8001a7e:	1b2d      	subs	r5, r5, r4
 8001a80:	464e      	mov	r6, r9
 8001a82:	001c      	movs	r4, r3
 8001a84:	40fe      	lsrs	r6, r7
 8001a86:	40ac      	lsls	r4, r5
 8001a88:	4334      	orrs	r4, r6
 8001a8a:	464e      	mov	r6, r9
 8001a8c:	40ae      	lsls	r6, r5
 8001a8e:	0035      	movs	r5, r6
 8001a90:	40fb      	lsrs	r3, r7
 8001a92:	1e6e      	subs	r6, r5, #1
 8001a94:	41b5      	sbcs	r5, r6
 8001a96:	1ac9      	subs	r1, r1, r3
 8001a98:	432c      	orrs	r4, r5
 8001a9a:	e04e      	b.n	8001b3a <__aeabi_dsub+0x4d2>
 8001a9c:	464a      	mov	r2, r9
 8001a9e:	1a14      	subs	r4, r2, r0
 8001aa0:	45a1      	cmp	r9, r4
 8001aa2:	4192      	sbcs	r2, r2
 8001aa4:	4252      	negs	r2, r2
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	1a5f      	subs	r7, r3, r1
 8001aaa:	003a      	movs	r2, r7
 8001aac:	4647      	mov	r7, r8
 8001aae:	1bd2      	subs	r2, r2, r7
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	0212      	lsls	r2, r2, #8
 8001ab4:	d500      	bpl.n	8001ab8 <__aeabi_dsub+0x450>
 8001ab6:	e08b      	b.n	8001bd0 <__aeabi_dsub+0x568>
 8001ab8:	4642      	mov	r2, r8
 8001aba:	4322      	orrs	r2, r4
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dsub+0x458>
 8001abe:	e630      	b.n	8001722 <__aeabi_dsub+0xba>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	e74d      	b.n	8001962 <__aeabi_dsub+0x2fa>
 8001ac6:	464a      	mov	r2, r9
 8001ac8:	0759      	lsls	r1, r3, #29
 8001aca:	08d2      	lsrs	r2, r2, #3
 8001acc:	430a      	orrs	r2, r1
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	e744      	b.n	800195c <__aeabi_dsub+0x2f4>
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <__aeabi_dsub+0x6e8>)
 8001ad6:	0861      	lsrs	r1, r4, #1
 8001ad8:	401a      	ands	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4014      	ands	r4, r2
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	07da      	lsls	r2, r3, #31
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	e641      	b.n	8001770 <__aeabi_dsub+0x108>
 8001aec:	001a      	movs	r2, r3
 8001aee:	3e1f      	subs	r6, #31
 8001af0:	40f2      	lsrs	r2, r6
 8001af2:	0016      	movs	r6, r2
 8001af4:	2920      	cmp	r1, #32
 8001af6:	d003      	beq.n	8001b00 <__aeabi_dsub+0x498>
 8001af8:	2240      	movs	r2, #64	; 0x40
 8001afa:	1a51      	subs	r1, r2, r1
 8001afc:	408b      	lsls	r3, r1
 8001afe:	431c      	orrs	r4, r3
 8001b00:	1e62      	subs	r2, r4, #1
 8001b02:	4194      	sbcs	r4, r2
 8001b04:	2300      	movs	r3, #0
 8001b06:	4334      	orrs	r4, r6
 8001b08:	4698      	mov	r8, r3
 8001b0a:	2600      	movs	r6, #0
 8001b0c:	e71d      	b.n	800194a <__aeabi_dsub+0x2e2>
 8001b0e:	000c      	movs	r4, r1
 8001b10:	3a20      	subs	r2, #32
 8001b12:	40d4      	lsrs	r4, r2
 8001b14:	0022      	movs	r2, r4
 8001b16:	4664      	mov	r4, ip
 8001b18:	2c20      	cmp	r4, #32
 8001b1a:	d004      	beq.n	8001b26 <__aeabi_dsub+0x4be>
 8001b1c:	2740      	movs	r7, #64	; 0x40
 8001b1e:	1b3f      	subs	r7, r7, r4
 8001b20:	40b9      	lsls	r1, r7
 8001b22:	4308      	orrs	r0, r1
 8001b24:	4680      	mov	r8, r0
 8001b26:	4644      	mov	r4, r8
 8001b28:	1e61      	subs	r1, r4, #1
 8001b2a:	418c      	sbcs	r4, r1
 8001b2c:	4322      	orrs	r2, r4
 8001b2e:	e5e9      	b.n	8001704 <__aeabi_dsub+0x9c>
 8001b30:	464c      	mov	r4, r9
 8001b32:	4323      	orrs	r3, r4
 8001b34:	001c      	movs	r4, r3
 8001b36:	1e63      	subs	r3, r4, #1
 8001b38:	419c      	sbcs	r4, r3
 8001b3a:	1b04      	subs	r4, r0, r4
 8001b3c:	42a0      	cmp	r0, r4
 8001b3e:	419b      	sbcs	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	1acb      	subs	r3, r1, r3
 8001b44:	4698      	mov	r8, r3
 8001b46:	465d      	mov	r5, fp
 8001b48:	0016      	movs	r6, r2
 8001b4a:	e5e2      	b.n	8001712 <__aeabi_dsub+0xaa>
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	431e      	orrs	r6, r3
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x4ec>
 8001b52:	e0ae      	b.n	8001cb2 <__aeabi_dsub+0x64a>
 8001b54:	1e66      	subs	r6, r4, #1
 8001b56:	2c01      	cmp	r4, #1
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x4f4>
 8001b5a:	e0fd      	b.n	8001d58 <__aeabi_dsub+0x6f0>
 8001b5c:	4f7b      	ldr	r7, [pc, #492]	; (8001d4c <__aeabi_dsub+0x6e4>)
 8001b5e:	42bc      	cmp	r4, r7
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x4fc>
 8001b62:	e107      	b.n	8001d74 <__aeabi_dsub+0x70c>
 8001b64:	46b4      	mov	ip, r6
 8001b66:	e69b      	b.n	80018a0 <__aeabi_dsub+0x238>
 8001b68:	4664      	mov	r4, ip
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	1b12      	subs	r2, r2, r4
 8001b6e:	000c      	movs	r4, r1
 8001b70:	4094      	lsls	r4, r2
 8001b72:	0007      	movs	r7, r0
 8001b74:	4090      	lsls	r0, r2
 8001b76:	46a0      	mov	r8, r4
 8001b78:	4664      	mov	r4, ip
 8001b7a:	1e42      	subs	r2, r0, #1
 8001b7c:	4190      	sbcs	r0, r2
 8001b7e:	4662      	mov	r2, ip
 8001b80:	40e7      	lsrs	r7, r4
 8001b82:	4644      	mov	r4, r8
 8001b84:	40d1      	lsrs	r1, r2
 8001b86:	433c      	orrs	r4, r7
 8001b88:	4304      	orrs	r4, r0
 8001b8a:	185b      	adds	r3, r3, r1
 8001b8c:	e6f3      	b.n	8001976 <__aeabi_dsub+0x30e>
 8001b8e:	4c6f      	ldr	r4, [pc, #444]	; (8001d4c <__aeabi_dsub+0x6e4>)
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x52e>
 8001b94:	e0d5      	b.n	8001d42 <__aeabi_dsub+0x6da>
 8001b96:	4448      	add	r0, r9
 8001b98:	185b      	adds	r3, r3, r1
 8001b9a:	4548      	cmp	r0, r9
 8001b9c:	4189      	sbcs	r1, r1
 8001b9e:	4249      	negs	r1, r1
 8001ba0:	185b      	adds	r3, r3, r1
 8001ba2:	07dc      	lsls	r4, r3, #31
 8001ba4:	0840      	lsrs	r0, r0, #1
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	4698      	mov	r8, r3
 8001baa:	0016      	movs	r6, r2
 8001bac:	4304      	orrs	r4, r0
 8001bae:	e6cc      	b.n	800194a <__aeabi_dsub+0x2e2>
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dsub+0x54e>
 8001bb4:	e082      	b.n	8001cbc <__aeabi_dsub+0x654>
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4302      	orrs	r2, r0
 8001bba:	d140      	bne.n	8001c3e <__aeabi_dsub+0x5d6>
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	e713      	b.n	80019ec <__aeabi_dsub+0x384>
 8001bc4:	074b      	lsls	r3, r1, #29
 8001bc6:	08c2      	lsrs	r2, r0, #3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	465d      	mov	r5, fp
 8001bcc:	08cb      	lsrs	r3, r1, #3
 8001bce:	e6c5      	b.n	800195c <__aeabi_dsub+0x2f4>
 8001bd0:	464a      	mov	r2, r9
 8001bd2:	1a84      	subs	r4, r0, r2
 8001bd4:	42a0      	cmp	r0, r4
 8001bd6:	4192      	sbcs	r2, r2
 8001bd8:	1acb      	subs	r3, r1, r3
 8001bda:	4252      	negs	r2, r2
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	4698      	mov	r8, r3
 8001be0:	465d      	mov	r5, fp
 8001be2:	e59e      	b.n	8001722 <__aeabi_dsub+0xba>
 8001be4:	464a      	mov	r2, r9
 8001be6:	0759      	lsls	r1, r3, #29
 8001be8:	08d2      	lsrs	r2, r2, #3
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	e6f9      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001bf0:	464a      	mov	r2, r9
 8001bf2:	1a14      	subs	r4, r2, r0
 8001bf4:	45a1      	cmp	r9, r4
 8001bf6:	4192      	sbcs	r2, r2
 8001bf8:	1a5b      	subs	r3, r3, r1
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	4698      	mov	r8, r3
 8001c00:	2601      	movs	r6, #1
 8001c02:	e586      	b.n	8001712 <__aeabi_dsub+0xaa>
 8001c04:	464a      	mov	r2, r9
 8001c06:	0759      	lsls	r1, r3, #29
 8001c08:	08d2      	lsrs	r2, r2, #3
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	e6a5      	b.n	800195c <__aeabi_dsub+0x2f4>
 8001c10:	464c      	mov	r4, r9
 8001c12:	4323      	orrs	r3, r4
 8001c14:	001c      	movs	r4, r3
 8001c16:	1e63      	subs	r3, r4, #1
 8001c18:	419c      	sbcs	r4, r3
 8001c1a:	e65b      	b.n	80018d4 <__aeabi_dsub+0x26c>
 8001c1c:	4665      	mov	r5, ip
 8001c1e:	001e      	movs	r6, r3
 8001c20:	3d20      	subs	r5, #32
 8001c22:	40ee      	lsrs	r6, r5
 8001c24:	2c20      	cmp	r4, #32
 8001c26:	d005      	beq.n	8001c34 <__aeabi_dsub+0x5cc>
 8001c28:	2540      	movs	r5, #64	; 0x40
 8001c2a:	1b2d      	subs	r5, r5, r4
 8001c2c:	40ab      	lsls	r3, r5
 8001c2e:	464c      	mov	r4, r9
 8001c30:	431c      	orrs	r4, r3
 8001c32:	46a2      	mov	sl, r4
 8001c34:	4654      	mov	r4, sl
 8001c36:	1e63      	subs	r3, r4, #1
 8001c38:	419c      	sbcs	r4, r3
 8001c3a:	4334      	orrs	r4, r6
 8001c3c:	e77d      	b.n	8001b3a <__aeabi_dsub+0x4d2>
 8001c3e:	074b      	lsls	r3, r1, #29
 8001c40:	08c2      	lsrs	r2, r0, #3
 8001c42:	431a      	orrs	r2, r3
 8001c44:	465d      	mov	r5, fp
 8001c46:	08cb      	lsrs	r3, r1, #3
 8001c48:	e6cc      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	4302      	orrs	r2, r0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x5ea>
 8001c50:	e736      	b.n	8001ac0 <__aeabi_dsub+0x458>
 8001c52:	074b      	lsls	r3, r1, #29
 8001c54:	08c2      	lsrs	r2, r0, #3
 8001c56:	431a      	orrs	r2, r3
 8001c58:	465d      	mov	r5, fp
 8001c5a:	08cb      	lsrs	r3, r1, #3
 8001c5c:	e681      	b.n	8001962 <__aeabi_dsub+0x2fa>
 8001c5e:	464a      	mov	r2, r9
 8001c60:	1a84      	subs	r4, r0, r2
 8001c62:	42a0      	cmp	r0, r4
 8001c64:	4192      	sbcs	r2, r2
 8001c66:	1acb      	subs	r3, r1, r3
 8001c68:	4252      	negs	r2, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	465d      	mov	r5, fp
 8001c70:	2601      	movs	r6, #1
 8001c72:	e54e      	b.n	8001712 <__aeabi_dsub+0xaa>
 8001c74:	074b      	lsls	r3, r1, #29
 8001c76:	08c2      	lsrs	r2, r0, #3
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	08cb      	lsrs	r3, r1, #3
 8001c7c:	e6b2      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001c7e:	464a      	mov	r2, r9
 8001c80:	1a14      	subs	r4, r2, r0
 8001c82:	45a1      	cmp	r9, r4
 8001c84:	4192      	sbcs	r2, r2
 8001c86:	1a5f      	subs	r7, r3, r1
 8001c88:	4252      	negs	r2, r2
 8001c8a:	1aba      	subs	r2, r7, r2
 8001c8c:	4690      	mov	r8, r2
 8001c8e:	0212      	lsls	r2, r2, #8
 8001c90:	d56b      	bpl.n	8001d6a <__aeabi_dsub+0x702>
 8001c92:	464a      	mov	r2, r9
 8001c94:	1a84      	subs	r4, r0, r2
 8001c96:	42a0      	cmp	r0, r4
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	1acb      	subs	r3, r1, r3
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	4698      	mov	r8, r3
 8001ca2:	465d      	mov	r5, fp
 8001ca4:	e564      	b.n	8001770 <__aeabi_dsub+0x108>
 8001ca6:	074b      	lsls	r3, r1, #29
 8001ca8:	08c2      	lsrs	r2, r0, #3
 8001caa:	431a      	orrs	r2, r3
 8001cac:	465d      	mov	r5, fp
 8001cae:	08cb      	lsrs	r3, r1, #3
 8001cb0:	e698      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001cb2:	074b      	lsls	r3, r1, #29
 8001cb4:	08c2      	lsrs	r2, r0, #3
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	08cb      	lsrs	r3, r1, #3
 8001cba:	e64f      	b.n	800195c <__aeabi_dsub+0x2f4>
 8001cbc:	000a      	movs	r2, r1
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	d090      	beq.n	8001be4 <__aeabi_dsub+0x57c>
 8001cc2:	464a      	mov	r2, r9
 8001cc4:	075c      	lsls	r4, r3, #29
 8001cc6:	08d2      	lsrs	r2, r2, #3
 8001cc8:	4314      	orrs	r4, r2
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	0312      	lsls	r2, r2, #12
 8001cd0:	4213      	tst	r3, r2
 8001cd2:	d008      	beq.n	8001ce6 <__aeabi_dsub+0x67e>
 8001cd4:	08ce      	lsrs	r6, r1, #3
 8001cd6:	4216      	tst	r6, r2
 8001cd8:	d105      	bne.n	8001ce6 <__aeabi_dsub+0x67e>
 8001cda:	08c0      	lsrs	r0, r0, #3
 8001cdc:	0749      	lsls	r1, r1, #29
 8001cde:	4308      	orrs	r0, r1
 8001ce0:	0004      	movs	r4, r0
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	0033      	movs	r3, r6
 8001ce6:	0f61      	lsrs	r1, r4, #29
 8001ce8:	00e2      	lsls	r2, r4, #3
 8001cea:	0749      	lsls	r1, r1, #29
 8001cec:	08d2      	lsrs	r2, r2, #3
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	e678      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001cf2:	074b      	lsls	r3, r1, #29
 8001cf4:	08c2      	lsrs	r2, r0, #3
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	08cb      	lsrs	r3, r1, #3
 8001cfa:	e632      	b.n	8001962 <__aeabi_dsub+0x2fa>
 8001cfc:	4448      	add	r0, r9
 8001cfe:	185b      	adds	r3, r3, r1
 8001d00:	4548      	cmp	r0, r9
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	4698      	mov	r8, r3
 8001d06:	4252      	negs	r2, r2
 8001d08:	4490      	add	r8, r2
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0004      	movs	r4, r0
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	d400      	bmi.n	8001d14 <__aeabi_dsub+0x6ac>
 8001d12:	e61a      	b.n	800194a <__aeabi_dsub+0x2e2>
 8001d14:	4642      	mov	r2, r8
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <__aeabi_dsub+0x6e8>)
 8001d18:	2601      	movs	r6, #1
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	e614      	b.n	800194a <__aeabi_dsub+0x2e2>
 8001d20:	4666      	mov	r6, ip
 8001d22:	001f      	movs	r7, r3
 8001d24:	3e20      	subs	r6, #32
 8001d26:	40f7      	lsrs	r7, r6
 8001d28:	2c20      	cmp	r4, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x6d0>
 8001d2c:	2640      	movs	r6, #64	; 0x40
 8001d2e:	1b36      	subs	r6, r6, r4
 8001d30:	40b3      	lsls	r3, r6
 8001d32:	464c      	mov	r4, r9
 8001d34:	431c      	orrs	r4, r3
 8001d36:	46a2      	mov	sl, r4
 8001d38:	4654      	mov	r4, sl
 8001d3a:	1e63      	subs	r3, r4, #1
 8001d3c:	419c      	sbcs	r4, r3
 8001d3e:	433c      	orrs	r4, r7
 8001d40:	e5c8      	b.n	80018d4 <__aeabi_dsub+0x26c>
 8001d42:	0011      	movs	r1, r2
 8001d44:	2300      	movs	r3, #0
 8001d46:	2200      	movs	r2, #0
 8001d48:	e532      	b.n	80017b0 <__aeabi_dsub+0x148>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	000007ff 	.word	0x000007ff
 8001d50:	ff7fffff 	.word	0xff7fffff
 8001d54:	000007fe 	.word	0x000007fe
 8001d58:	464a      	mov	r2, r9
 8001d5a:	1814      	adds	r4, r2, r0
 8001d5c:	4284      	cmp	r4, r0
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	185b      	adds	r3, r3, r1
 8001d62:	4698      	mov	r8, r3
 8001d64:	4252      	negs	r2, r2
 8001d66:	4490      	add	r8, r2
 8001d68:	e5e9      	b.n	800193e <__aeabi_dsub+0x2d6>
 8001d6a:	4642      	mov	r2, r8
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x70a>
 8001d70:	e6a6      	b.n	8001ac0 <__aeabi_dsub+0x458>
 8001d72:	e5ea      	b.n	800194a <__aeabi_dsub+0x2e2>
 8001d74:	074b      	lsls	r3, r1, #29
 8001d76:	08c2      	lsrs	r2, r0, #3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	08cb      	lsrs	r3, r1, #3
 8001d7c:	e632      	b.n	80019e4 <__aeabi_dsub+0x37c>
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4901      	ldr	r1, [pc, #4]	; (8001d88 <__aeabi_dsub+0x720>)
 8001d82:	0013      	movs	r3, r2
 8001d84:	e514      	b.n	80017b0 <__aeabi_dsub+0x148>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff

08001d8c <__aeabi_dcmpun>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	0005      	movs	r5, r0
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <__aeabi_dcmpun+0x38>)
 8001d92:	030c      	lsls	r4, r1, #12
 8001d94:	0016      	movs	r6, r2
 8001d96:	0049      	lsls	r1, r1, #1
 8001d98:	031a      	lsls	r2, r3, #12
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	0b24      	lsrs	r4, r4, #12
 8001d9e:	0d49      	lsrs	r1, r1, #21
 8001da0:	0b12      	lsrs	r2, r2, #12
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	4281      	cmp	r1, r0
 8001da6:	d008      	beq.n	8001dba <__aeabi_dcmpun+0x2e>
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <__aeabi_dcmpun+0x38>)
 8001daa:	2000      	movs	r0, #0
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d103      	bne.n	8001db8 <__aeabi_dcmpun+0x2c>
 8001db0:	4332      	orrs	r2, r6
 8001db2:	0010      	movs	r0, r2
 8001db4:	1e42      	subs	r2, r0, #1
 8001db6:	4190      	sbcs	r0, r2
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	2001      	movs	r0, #1
 8001dbc:	432c      	orrs	r4, r5
 8001dbe:	d1fb      	bne.n	8001db8 <__aeabi_dcmpun+0x2c>
 8001dc0:	e7f2      	b.n	8001da8 <__aeabi_dcmpun+0x1c>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	000007ff 	.word	0x000007ff

08001dc8 <__aeabi_d2iz>:
 8001dc8:	000a      	movs	r2, r1
 8001dca:	b530      	push	{r4, r5, lr}
 8001dcc:	4c13      	ldr	r4, [pc, #76]	; (8001e1c <__aeabi_d2iz+0x54>)
 8001dce:	0053      	lsls	r3, r2, #1
 8001dd0:	0309      	lsls	r1, r1, #12
 8001dd2:	0005      	movs	r5, r0
 8001dd4:	0b09      	lsrs	r1, r1, #12
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	0d5b      	lsrs	r3, r3, #21
 8001dda:	0fd2      	lsrs	r2, r2, #31
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	dd04      	ble.n	8001dea <__aeabi_d2iz+0x22>
 8001de0:	480f      	ldr	r0, [pc, #60]	; (8001e20 <__aeabi_d2iz+0x58>)
 8001de2:	4283      	cmp	r3, r0
 8001de4:	dd02      	ble.n	8001dec <__aeabi_d2iz+0x24>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <__aeabi_d2iz+0x5c>)
 8001de8:	18d0      	adds	r0, r2, r3
 8001dea:	bd30      	pop	{r4, r5, pc}
 8001dec:	2080      	movs	r0, #128	; 0x80
 8001dee:	0340      	lsls	r0, r0, #13
 8001df0:	4301      	orrs	r1, r0
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <__aeabi_d2iz+0x60>)
 8001df4:	1ac0      	subs	r0, r0, r3
 8001df6:	281f      	cmp	r0, #31
 8001df8:	dd08      	ble.n	8001e0c <__aeabi_d2iz+0x44>
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <__aeabi_d2iz+0x64>)
 8001dfc:	1ac3      	subs	r3, r0, r3
 8001dfe:	40d9      	lsrs	r1, r3
 8001e00:	000b      	movs	r3, r1
 8001e02:	4258      	negs	r0, r3
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	d1f0      	bne.n	8001dea <__aeabi_d2iz+0x22>
 8001e08:	0018      	movs	r0, r3
 8001e0a:	e7ee      	b.n	8001dea <__aeabi_d2iz+0x22>
 8001e0c:	4c08      	ldr	r4, [pc, #32]	; (8001e30 <__aeabi_d2iz+0x68>)
 8001e0e:	40c5      	lsrs	r5, r0
 8001e10:	46a4      	mov	ip, r4
 8001e12:	4463      	add	r3, ip
 8001e14:	4099      	lsls	r1, r3
 8001e16:	000b      	movs	r3, r1
 8001e18:	432b      	orrs	r3, r5
 8001e1a:	e7f2      	b.n	8001e02 <__aeabi_d2iz+0x3a>
 8001e1c:	000003fe 	.word	0x000003fe
 8001e20:	0000041d 	.word	0x0000041d
 8001e24:	7fffffff 	.word	0x7fffffff
 8001e28:	00000433 	.word	0x00000433
 8001e2c:	00000413 	.word	0x00000413
 8001e30:	fffffbed 	.word	0xfffffbed

08001e34 <__aeabi_i2d>:
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d016      	beq.n	8001e68 <__aeabi_i2d+0x34>
 8001e3a:	17c3      	asrs	r3, r0, #31
 8001e3c:	18c5      	adds	r5, r0, r3
 8001e3e:	405d      	eors	r5, r3
 8001e40:	0fc4      	lsrs	r4, r0, #31
 8001e42:	0028      	movs	r0, r5
 8001e44:	f000 f84c 	bl	8001ee0 <__clzsi2>
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <__aeabi_i2d+0x5c>)
 8001e4a:	1a12      	subs	r2, r2, r0
 8001e4c:	280a      	cmp	r0, #10
 8001e4e:	dc16      	bgt.n	8001e7e <__aeabi_i2d+0x4a>
 8001e50:	0003      	movs	r3, r0
 8001e52:	002e      	movs	r6, r5
 8001e54:	3315      	adds	r3, #21
 8001e56:	409e      	lsls	r6, r3
 8001e58:	230b      	movs	r3, #11
 8001e5a:	1a18      	subs	r0, r3, r0
 8001e5c:	40c5      	lsrs	r5, r0
 8001e5e:	0553      	lsls	r3, r2, #21
 8001e60:	032d      	lsls	r5, r5, #12
 8001e62:	0b2d      	lsrs	r5, r5, #12
 8001e64:	0d5b      	lsrs	r3, r3, #21
 8001e66:	e003      	b.n	8001e70 <__aeabi_i2d+0x3c>
 8001e68:	2400      	movs	r4, #0
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	2600      	movs	r6, #0
 8001e70:	051b      	lsls	r3, r3, #20
 8001e72:	432b      	orrs	r3, r5
 8001e74:	07e4      	lsls	r4, r4, #31
 8001e76:	4323      	orrs	r3, r4
 8001e78:	0030      	movs	r0, r6
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	380b      	subs	r0, #11
 8001e80:	4085      	lsls	r5, r0
 8001e82:	0553      	lsls	r3, r2, #21
 8001e84:	032d      	lsls	r5, r5, #12
 8001e86:	2600      	movs	r6, #0
 8001e88:	0b2d      	lsrs	r5, r5, #12
 8001e8a:	0d5b      	lsrs	r3, r3, #21
 8001e8c:	e7f0      	b.n	8001e70 <__aeabi_i2d+0x3c>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	0000041e 	.word	0x0000041e

08001e94 <__aeabi_ui2d>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	1e04      	subs	r4, r0, #0
 8001e98:	d010      	beq.n	8001ebc <__aeabi_ui2d+0x28>
 8001e9a:	f000 f821 	bl	8001ee0 <__clzsi2>
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <__aeabi_ui2d+0x48>)
 8001ea0:	1a1b      	subs	r3, r3, r0
 8001ea2:	280a      	cmp	r0, #10
 8001ea4:	dc11      	bgt.n	8001eca <__aeabi_ui2d+0x36>
 8001ea6:	220b      	movs	r2, #11
 8001ea8:	0021      	movs	r1, r4
 8001eaa:	1a12      	subs	r2, r2, r0
 8001eac:	40d1      	lsrs	r1, r2
 8001eae:	3015      	adds	r0, #21
 8001eb0:	030a      	lsls	r2, r1, #12
 8001eb2:	055b      	lsls	r3, r3, #21
 8001eb4:	4084      	lsls	r4, r0
 8001eb6:	0b12      	lsrs	r2, r2, #12
 8001eb8:	0d5b      	lsrs	r3, r3, #21
 8001eba:	e001      	b.n	8001ec0 <__aeabi_ui2d+0x2c>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	051b      	lsls	r3, r3, #20
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	0022      	movs	r2, r4
 8001ecc:	380b      	subs	r0, #11
 8001ece:	4082      	lsls	r2, r0
 8001ed0:	055b      	lsls	r3, r3, #21
 8001ed2:	0312      	lsls	r2, r2, #12
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	0b12      	lsrs	r2, r2, #12
 8001ed8:	0d5b      	lsrs	r3, r3, #21
 8001eda:	e7f1      	b.n	8001ec0 <__aeabi_ui2d+0x2c>
 8001edc:	0000041e 	.word	0x0000041e

08001ee0 <__clzsi2>:
 8001ee0:	211c      	movs	r1, #28
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	4298      	cmp	r0, r3
 8001ee8:	d301      	bcc.n	8001eee <__clzsi2+0xe>
 8001eea:	0c00      	lsrs	r0, r0, #16
 8001eec:	3910      	subs	r1, #16
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	4298      	cmp	r0, r3
 8001ef2:	d301      	bcc.n	8001ef8 <__clzsi2+0x18>
 8001ef4:	0a00      	lsrs	r0, r0, #8
 8001ef6:	3908      	subs	r1, #8
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d301      	bcc.n	8001f02 <__clzsi2+0x22>
 8001efe:	0900      	lsrs	r0, r0, #4
 8001f00:	3904      	subs	r1, #4
 8001f02:	a202      	add	r2, pc, #8	; (adr r2, 8001f0c <__clzsi2+0x2c>)
 8001f04:	5c10      	ldrb	r0, [r2, r0]
 8001f06:	1840      	adds	r0, r0, r1
 8001f08:	4770      	bx	lr
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	02020304 	.word	0x02020304
 8001f10:	01010101 	.word	0x01010101
	...

08001f1c <readConfig>:
int16_t irData[64];

//Teste

int16_t readConfig(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af04      	add	r7, sp, #16
	uint8_t configLow = 0, configHigh = 0, buff[2];
 8001f22:	230f      	movs	r3, #15
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	230e      	movs	r3, #14
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
	uint32_t comando = 0x02920001;
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <readConfig+0x78>)
 8001f34:	60bb      	str	r3, [r7, #8]
	while(HAL_I2C_Mem_Read2(&hi2c1, (uint16_t)MLXir<<1, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <readConfig+0x7c>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	0059      	lsls	r1, r3, #1
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4816      	ldr	r0, [pc, #88]	; (8001f9c <readConfig+0x80>)
 8001f42:	23fa      	movs	r3, #250	; 0xfa
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2304      	movs	r3, #4
 8001f52:	f002 fab5 	bl	80044c0 <HAL_I2C_Mem_Read2>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d1ee      	bne.n	8001f38 <readConfig+0x1c>
	configLow = buff[0];
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	1d3a      	adds	r2, r7, #4
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	701a      	strb	r2, [r3, #0]
	configHigh = buff[1];
 8001f64:	200e      	movs	r0, #14
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	1d3a      	adds	r2, r7, #4
 8001f6a:	7852      	ldrb	r2, [r2, #1]
 8001f6c:	701a      	strb	r2, [r3, #0]
	configuration = ((int16_t)(configHigh << 8) | configLow);
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <readConfig+0x84>)
 8001f82:	801a      	strh	r2, [r3, #0]
	return configuration;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <readConfig+0x84>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	02920001 	.word	0x02920001
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	200000a4 	.word	0x200000a4
 8001fa0:	20000096 	.word	0x20000096

08001fa4 <setConfiguration>:

void setConfiguration(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af02      	add	r7, sp, #8
	uint8_t Hz_LSB, buff[5];
	switch (refreshRate){
 8001faa:	2308      	movs	r3, #8
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d820      	bhi.n	8001ff2 <setConfiguration+0x4e>
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <setConfiguration+0xc4>)
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	469f      	mov	pc, r3
	case 0:
		Hz_LSB = 0b00111111;
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	223f      	movs	r2, #63	; 0x3f
 8001fbe:	701a      	strb	r2, [r3, #0]
		break;
 8001fc0:	e01a      	b.n	8001ff8 <setConfiguration+0x54>
	case 1:
		Hz_LSB = 0b00111110;
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	223e      	movs	r2, #62	; 0x3e
 8001fc6:	701a      	strb	r2, [r3, #0]
		break;
 8001fc8:	e016      	b.n	8001ff8 <setConfiguration+0x54>
	case 2:
		Hz_LSB = 0b00111101;
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	223d      	movs	r2, #61	; 0x3d
 8001fce:	701a      	strb	r2, [r3, #0]
		break;
 8001fd0:	e012      	b.n	8001ff8 <setConfiguration+0x54>
	case 4:
		Hz_LSB = 0b00111100;
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	223c      	movs	r2, #60	; 0x3c
 8001fd6:	701a      	strb	r2, [r3, #0]
		break;
 8001fd8:	e00e      	b.n	8001ff8 <setConfiguration+0x54>
	case 8:
		Hz_LSB = 0b00111011;
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	223b      	movs	r2, #59	; 0x3b
 8001fde:	701a      	strb	r2, [r3, #0]
		break;
 8001fe0:	e00a      	b.n	8001ff8 <setConfiguration+0x54>
	case 16:
		Hz_LSB = 0b00111010;
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	223a      	movs	r2, #58	; 0x3a
 8001fe6:	701a      	strb	r2, [r3, #0]
		break;
 8001fe8:	e006      	b.n	8001ff8 <setConfiguration+0x54>
	case 32:
		Hz_LSB = 0b00111001;
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	2239      	movs	r2, #57	; 0x39
 8001fee:	701a      	strb	r2, [r3, #0]
		break;
 8001ff0:	e002      	b.n	8001ff8 <setConfiguration+0x54>
	default:
		Hz_LSB = 0b00111110;
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	223e      	movs	r2, #62	; 0x3e
 8001ff6:	701a      	strb	r2, [r3, #0]
	}
	uint8_t defaultConfig_H = 0b00000100;
 8001ff8:	1dbb      	adds	r3, r7, #6
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	701a      	strb	r2, [r3, #0]
	/*buff[0] = 0x03;
	buff[1] = (Hz_LSB - 0x55);
	buff[2] = Hz_LSB;
	buff[3] = (eepromData[0xF6] - 0x55);
	buff[4] = eepromData[0xF6];*/
	buff[0] = 0x03;
 8001ffe:	003b      	movs	r3, r7
 8002000:	2203      	movs	r2, #3
 8002002:	701a      	strb	r2, [r3, #0]
	buff[1] = ((uint8_t)Hz_LSB - 0x55);
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3b55      	subs	r3, #85	; 0x55
 800200a:	b2da      	uxtb	r2, r3
 800200c:	003b      	movs	r3, r7
 800200e:	705a      	strb	r2, [r3, #1]
	buff[2] = Hz_LSB;
 8002010:	003b      	movs	r3, r7
 8002012:	1dfa      	adds	r2, r7, #7
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	709a      	strb	r2, [r3, #2]
	buff[3] = defaultConfig_H - 0x55;
 8002018:	1dbb      	adds	r3, r7, #6
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3b55      	subs	r3, #85	; 0x55
 800201e:	b2da      	uxtb	r2, r3
 8002020:	003b      	movs	r3, r7
 8002022:	70da      	strb	r2, [r3, #3]
	buff[4] = defaultConfig_H;
 8002024:	003b      	movs	r3, r7
 8002026:	1dba      	adds	r2, r7, #6
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	711a      	strb	r2, [r3, #4]
	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MLXir<<1, buff, 5, 100) != HAL_OK);
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <setConfiguration+0xc8>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	18db      	adds	r3, r3, r3
 8002034:	b299      	uxth	r1, r3
 8002036:	003a      	movs	r2, r7
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <setConfiguration+0xcc>)
 800203a:	2364      	movs	r3, #100	; 0x64
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2305      	movs	r3, #5
 8002040:	f002 f89c 	bl	800417c <HAL_I2C_Master_Transmit>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d1f2      	bne.n	800202e <setConfiguration+0x8a>
	resolution = (readConfig() & 0x30) >> 4;
 8002048:	f7ff ff68 	bl	8001f1c <readConfig>
 800204c:	0003      	movs	r3, r0
 800204e:	b29b      	uxth	r3, r3
 8002050:	111b      	asrs	r3, r3, #4
 8002052:	b21b      	sxth	r3, r3
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	b21a      	sxth	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <setConfiguration+0xd0>)
 800205c:	801a      	strh	r2, [r3, #0]
}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	08008128 	.word	0x08008128
 800206c:	20000000 	.word	0x20000000
 8002070:	200000a4 	.word	0x200000a4
 8002074:	20000094 	.word	0x20000094

08002078 <MLX_Init>:

/*---------------------------------------------*/

MLX * MLX_Init(I2C_HandleTypeDef * hi2c)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b0ca      	sub	sp, #296	; 0x128
 800207c:	af04      	add	r7, sp, #16
 800207e:	6078      	str	r0, [r7, #4]
	uint8_t pacote[5];
	MLX * mlx = malloc(sizeof(*mlx));
 8002080:	23b4      	movs	r3, #180	; 0xb4
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	0018      	movs	r0, r3
 8002086:	f004 fbed 	bl	8006864 <malloc>
 800208a:	0003      	movs	r3, r0
 800208c:	2088      	movs	r0, #136	; 0x88
 800208e:	0040      	lsls	r0, r0, #1
 8002090:	183a      	adds	r2, r7, r0
 8002092:	6013      	str	r3, [r2, #0]
	mlx->hi2c = hi2c;
 8002094:	183b      	adds	r3, r7, r0
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	23b2      	movs	r3, #178	; 0xb2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	50d1      	str	r1, [r2, r3]
	if (NULL == mlx) {return NULL;}
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <MLX_Init+0x34>
 80020a8:	2300      	movs	r3, #0
 80020aa:	e1fb      	b.n	80024a4 <MLX_Init+0x42c>

	//Read EEPROM
	uint8_t eepromData[256];
	uint8_t cmd = 0x00;
 80020ac:	2310      	movs	r3, #16
 80020ae:	33ff      	adds	r3, #255	; 0xff
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
	while(HAL_I2C_Mem_Read(mlx->hi2c,  (uint16_t)0xA0, (uint16_t)0x00, sizeof(cmd), eepromData, 256, 100) != HAL_OK);
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	2488      	movs	r4, #136	; 0x88
 80020ba:	0064      	lsls	r4, r4, #1
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	23b2      	movs	r3, #178	; 0xb2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	58d0      	ldr	r0, [r2, r3]
 80020c6:	2364      	movs	r3, #100	; 0x64
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2508      	movs	r5, #8
 80020d2:	197b      	adds	r3, r7, r5
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2301      	movs	r3, #1
 80020d8:	2200      	movs	r2, #0
 80020da:	21a0      	movs	r1, #160	; 0xa0
 80020dc:	f002 fb20 	bl	8004720 <HAL_I2C_Mem_Read>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d1e9      	bne.n	80020b8 <MLX_Init+0x40>

	//Salvando as constantes de acordo com a tabela 8
	memcpy(mlx->delA, &eepromData, sizeof(*mlx->delA)*NUM_PIXELS);
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3382      	adds	r3, #130	; 0x82
 80020ea:	1979      	adds	r1, r7, r5
 80020ec:	2240      	movs	r2, #64	; 0x40
 80020ee:	0018      	movs	r0, r3
 80020f0:	f004 fbcc 	bl	800688c <memcpy>
	memcpy(mlx->TaDep, &eepromData[0x40], sizeof(*mlx->TaDep)*NUM_PIXELS);
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	33c2      	adds	r3, #194	; 0xc2
 80020fa:	0018      	movs	r0, r3
 80020fc:	197b      	adds	r3, r7, r5
 80020fe:	3340      	adds	r3, #64	; 0x40
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	0019      	movs	r1, r3
 8002104:	f004 fbc2 	bl	800688c <memcpy>
	memcpy(mlx->delAlpha, &eepromData[0x80], sizeof(*mlx->delAlpha)*NUM_PIXELS);
 8002108:	193b      	adds	r3, r7, r4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1cd8      	adds	r0, r3, #3
 800210e:	30ff      	adds	r0, #255	; 0xff
 8002110:	197b      	adds	r3, r7, r5
 8002112:	3380      	adds	r3, #128	; 0x80
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	0019      	movs	r1, r3
 8002118:	f004 fbb8 	bl	800688c <memcpy>
	mlx->Ks_scale = eepromData[0xC0];
 800211c:	4be3      	ldr	r3, [pc, #908]	; (80024ac <MLX_Init+0x434>)
 800211e:	228c      	movs	r2, #140	; 0x8c
 8002120:	0052      	lsls	r2, r2, #1
 8002122:	4694      	mov	ip, r2
 8002124:	44bc      	add	ip, r7
 8002126:	4463      	add	r3, ip
 8002128:	22c0      	movs	r2, #192	; 0xc0
 800212a:	5c99      	ldrb	r1, [r3, r2]
 800212c:	0020      	movs	r0, r4
 800212e:	183b      	adds	r3, r7, r0
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	23a1      	movs	r3, #161	; 0xa1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	54d1      	strb	r1, [r2, r3]
	mlx->Ks4_EE = eepromData[0xC4];
 8002138:	4bdc      	ldr	r3, [pc, #880]	; (80024ac <MLX_Init+0x434>)
 800213a:	228c      	movs	r2, #140	; 0x8c
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	4694      	mov	ip, r2
 8002140:	44bc      	add	ip, r7
 8002142:	4463      	add	r3, ip
 8002144:	22c4      	movs	r2, #196	; 0xc4
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	b259      	sxtb	r1, r3
 800214a:	183b      	adds	r3, r7, r0
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2344      	movs	r3, #68	; 0x44
 8002150:	33ff      	adds	r3, #255	; 0xff
 8002152:	54d1      	strb	r1, [r2, r3]
	mlx->AcommL = eepromData[0xD0];
 8002154:	4bd5      	ldr	r3, [pc, #852]	; (80024ac <MLX_Init+0x434>)
 8002156:	228c      	movs	r2, #140	; 0x8c
 8002158:	0052      	lsls	r2, r2, #1
 800215a:	4694      	mov	ip, r2
 800215c:	44bc      	add	ip, r7
 800215e:	4463      	add	r3, ip
 8002160:	22d0      	movs	r2, #208	; 0xd0
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b259      	sxtb	r1, r3
 8002166:	183b      	adds	r3, r7, r0
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	23a2      	movs	r3, #162	; 0xa2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	54d1      	strb	r1, [r2, r3]
	mlx->AcommH = eepromData[0xD1];
 8002170:	4bce      	ldr	r3, [pc, #824]	; (80024ac <MLX_Init+0x434>)
 8002172:	228c      	movs	r2, #140	; 0x8c
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	4694      	mov	ip, r2
 8002178:	44bc      	add	ip, r7
 800217a:	4463      	add	r3, ip
 800217c:	22d1      	movs	r2, #209	; 0xd1
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	b259      	sxtb	r1, r3
 8002182:	183b      	adds	r3, r7, r0
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2346      	movs	r3, #70	; 0x46
 8002188:	33ff      	adds	r3, #255	; 0xff
 800218a:	54d1      	strb	r1, [r2, r3]
	mlx->AcpL = eepromData[0xD3];
 800218c:	4bc7      	ldr	r3, [pc, #796]	; (80024ac <MLX_Init+0x434>)
 800218e:	228c      	movs	r2, #140	; 0x8c
 8002190:	0052      	lsls	r2, r2, #1
 8002192:	4694      	mov	ip, r2
 8002194:	44bc      	add	ip, r7
 8002196:	4463      	add	r3, ip
 8002198:	22d3      	movs	r2, #211	; 0xd3
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b259      	sxtb	r1, r3
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	23a3      	movs	r3, #163	; 0xa3
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	54d1      	strb	r1, [r2, r3]
	mlx->AcpH = eepromData[0xD4];
 80021a8:	4bc0      	ldr	r3, [pc, #768]	; (80024ac <MLX_Init+0x434>)
 80021aa:	228c      	movs	r2, #140	; 0x8c
 80021ac:	0052      	lsls	r2, r2, #1
 80021ae:	4694      	mov	ip, r2
 80021b0:	44bc      	add	ip, r7
 80021b2:	4463      	add	r3, ip
 80021b4:	22d4      	movs	r2, #212	; 0xd4
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	b259      	sxtb	r1, r3
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2348      	movs	r3, #72	; 0x48
 80021c0:	33ff      	adds	r3, #255	; 0xff
 80021c2:	54d1      	strb	r1, [r2, r3]
	mlx->Bcp = eepromData[0xD5];
 80021c4:	4bb9      	ldr	r3, [pc, #740]	; (80024ac <MLX_Init+0x434>)
 80021c6:	228c      	movs	r2, #140	; 0x8c
 80021c8:	0052      	lsls	r2, r2, #1
 80021ca:	4694      	mov	ip, r2
 80021cc:	44bc      	add	ip, r7
 80021ce:	4463      	add	r3, ip
 80021d0:	22d5      	movs	r2, #213	; 0xd5
 80021d2:	5c99      	ldrb	r1, [r3, r2]
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	23a4      	movs	r3, #164	; 0xa4
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	54d1      	strb	r1, [r2, r3]
	mlx->alphaCPL = eepromData[0xD6];
 80021de:	4bb3      	ldr	r3, [pc, #716]	; (80024ac <MLX_Init+0x434>)
 80021e0:	228c      	movs	r2, #140	; 0x8c
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	4694      	mov	ip, r2
 80021e6:	44bc      	add	ip, r7
 80021e8:	4463      	add	r3, ip
 80021ea:	22d6      	movs	r2, #214	; 0xd6
 80021ec:	5c99      	ldrb	r1, [r3, r2]
 80021ee:	183b      	adds	r3, r7, r0
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	234a      	movs	r3, #74	; 0x4a
 80021f4:	33ff      	adds	r3, #255	; 0xff
 80021f6:	54d1      	strb	r1, [r2, r3]
	mlx->alphaCPH = eepromData[0xD7];
 80021f8:	4bac      	ldr	r3, [pc, #688]	; (80024ac <MLX_Init+0x434>)
 80021fa:	228c      	movs	r2, #140	; 0x8c
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	4694      	mov	ip, r2
 8002200:	44bc      	add	ip, r7
 8002202:	4463      	add	r3, ip
 8002204:	22d7      	movs	r2, #215	; 0xd7
 8002206:	5c99      	ldrb	r1, [r3, r2]
 8002208:	183b      	adds	r3, r7, r0
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	23a5      	movs	r3, #165	; 0xa5
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	54d1      	strb	r1, [r2, r3]
	mlx->tgc = eepromData[0xD8];
 8002212:	4ba6      	ldr	r3, [pc, #664]	; (80024ac <MLX_Init+0x434>)
 8002214:	228c      	movs	r2, #140	; 0x8c
 8002216:	0052      	lsls	r2, r2, #1
 8002218:	4694      	mov	ip, r2
 800221a:	44bc      	add	ip, r7
 800221c:	4463      	add	r3, ip
 800221e:	22d8      	movs	r2, #216	; 0xd8
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	b259      	sxtb	r1, r3
 8002224:	183b      	adds	r3, r7, r0
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	234c      	movs	r3, #76	; 0x4c
 800222a:	33ff      	adds	r3, #255	; 0xff
 800222c:	54d1      	strb	r1, [r2, r3]
	mlx->delAlphaScale = eepromData[0xD9];
 800222e:	4b9f      	ldr	r3, [pc, #636]	; (80024ac <MLX_Init+0x434>)
 8002230:	228c      	movs	r2, #140	; 0x8c
 8002232:	0052      	lsls	r2, r2, #1
 8002234:	4694      	mov	ip, r2
 8002236:	44bc      	add	ip, r7
 8002238:	4463      	add	r3, ip
 800223a:	22d9      	movs	r2, #217	; 0xd9
 800223c:	5c99      	ldrb	r1, [r3, r2]
 800223e:	183b      	adds	r3, r7, r0
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	23ac      	movs	r3, #172	; 0xac
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	54d1      	strb	r1, [r2, r3]
	mlx->Bi_scale = eepromData[0xD9];
 8002248:	4b98      	ldr	r3, [pc, #608]	; (80024ac <MLX_Init+0x434>)
 800224a:	228c      	movs	r2, #140	; 0x8c
 800224c:	0052      	lsls	r2, r2, #1
 800224e:	4694      	mov	ip, r2
 8002250:	44bc      	add	ip, r7
 8002252:	4463      	add	r3, ip
 8002254:	22d9      	movs	r2, #217	; 0xd9
 8002256:	5c99      	ldrb	r1, [r3, r2]
 8002258:	0004      	movs	r4, r0
 800225a:	193b      	adds	r3, r7, r4
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	234e      	movs	r3, #78	; 0x4e
 8002260:	33ff      	adds	r3, #255	; 0xff
 8002262:	54d1      	strb	r1, [r2, r3]
	memcpy(&(mlx->Vth), &eepromData[0xDA], sizeof(mlx->Vth));
 8002264:	193b      	adds	r3, r7, r4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	334f      	adds	r3, #79	; 0x4f
 800226a:	33ff      	adds	r3, #255	; 0xff
 800226c:	0018      	movs	r0, r3
 800226e:	197b      	adds	r3, r7, r5
 8002270:	33da      	adds	r3, #218	; 0xda
 8002272:	2202      	movs	r2, #2
 8002274:	0019      	movs	r1, r3
 8002276:	f004 fb09 	bl	800688c <memcpy>
	memcpy(&(mlx->Kt1), &eepromData[0xDC], sizeof(mlx->Kt1));
 800227a:	193b      	adds	r3, r7, r4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3351      	adds	r3, #81	; 0x51
 8002280:	33ff      	adds	r3, #255	; 0xff
 8002282:	0018      	movs	r0, r3
 8002284:	197b      	adds	r3, r7, r5
 8002286:	33dc      	adds	r3, #220	; 0xdc
 8002288:	2202      	movs	r2, #2
 800228a:	0019      	movs	r1, r3
 800228c:	f004 fafe 	bl	800688c <memcpy>
	memcpy(&(mlx->Kt2), &eepromData[0xDE], sizeof(mlx->Kt2));
 8002290:	193b      	adds	r3, r7, r4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3353      	adds	r3, #83	; 0x53
 8002296:	33ff      	adds	r3, #255	; 0xff
 8002298:	0018      	movs	r0, r3
 800229a:	197b      	adds	r3, r7, r5
 800229c:	33de      	adds	r3, #222	; 0xde
 800229e:	2202      	movs	r2, #2
 80022a0:	0019      	movs	r1, r3
 80022a2:	f004 faf3 	bl	800688c <memcpy>
	mlx->Kt_scale = eepromData[0xD2];
 80022a6:	4b81      	ldr	r3, [pc, #516]	; (80024ac <MLX_Init+0x434>)
 80022a8:	228c      	movs	r2, #140	; 0x8c
 80022aa:	0052      	lsls	r2, r2, #1
 80022ac:	4694      	mov	ip, r2
 80022ae:	44bc      	add	ip, r7
 80022b0:	4463      	add	r3, ip
 80022b2:	22d2      	movs	r2, #210	; 0xd2
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	b259      	sxtb	r1, r3
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	23aa      	movs	r3, #170	; 0xaa
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	54d1      	strb	r1, [r2, r3]
 	mlx->alpha0L = eepromData[0xE0];
 80022c2:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <MLX_Init+0x434>)
 80022c4:	228c      	movs	r2, #140	; 0x8c
 80022c6:	0052      	lsls	r2, r2, #1
 80022c8:	4694      	mov	ip, r2
 80022ca:	44bc      	add	ip, r7
 80022cc:	4463      	add	r3, ip
 80022ce:	22e0      	movs	r2, #224	; 0xe0
 80022d0:	5c99      	ldrb	r1, [r3, r2]
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2356      	movs	r3, #86	; 0x56
 80022d8:	33ff      	adds	r3, #255	; 0xff
 80022da:	54d1      	strb	r1, [r2, r3]
	mlx->alpha0H = eepromData[0xE1];
 80022dc:	4b73      	ldr	r3, [pc, #460]	; (80024ac <MLX_Init+0x434>)
 80022de:	228c      	movs	r2, #140	; 0x8c
 80022e0:	0052      	lsls	r2, r2, #1
 80022e2:	4694      	mov	ip, r2
 80022e4:	44bc      	add	ip, r7
 80022e6:	4463      	add	r3, ip
 80022e8:	22e1      	movs	r2, #225	; 0xe1
 80022ea:	5c99      	ldrb	r1, [r3, r2]
 80022ec:	193b      	adds	r3, r7, r4
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	23ab      	movs	r3, #171	; 0xab
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	54d1      	strb	r1, [r2, r3]
	mlx->alpha0Scale = eepromData[0xE2];
 80022f6:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <MLX_Init+0x434>)
 80022f8:	228c      	movs	r2, #140	; 0x8c
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	4694      	mov	ip, r2
 80022fe:	44bc      	add	ip, r7
 8002300:	4463      	add	r3, ip
 8002302:	22e2      	movs	r2, #226	; 0xe2
 8002304:	5c99      	ldrb	r1, [r3, r2]
 8002306:	193b      	adds	r3, r7, r4
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	2358      	movs	r3, #88	; 0x58
 800230c:	33ff      	adds	r3, #255	; 0xff
 800230e:	54d1      	strb	r1, [r2, r3]
	mlx->delAlphaScale = eepromData[0xE3];
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <MLX_Init+0x434>)
 8002312:	228c      	movs	r2, #140	; 0x8c
 8002314:	0052      	lsls	r2, r2, #1
 8002316:	4694      	mov	ip, r2
 8002318:	44bc      	add	ip, r7
 800231a:	4463      	add	r3, ip
 800231c:	22e3      	movs	r2, #227	; 0xe3
 800231e:	5c99      	ldrb	r1, [r3, r2]
 8002320:	193b      	adds	r3, r7, r4
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	23ac      	movs	r3, #172	; 0xac
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	54d1      	strb	r1, [r2, r3]
	mlx->epsilL = eepromData[0xE4];
 800232a:	4b60      	ldr	r3, [pc, #384]	; (80024ac <MLX_Init+0x434>)
 800232c:	228c      	movs	r2, #140	; 0x8c
 800232e:	0052      	lsls	r2, r2, #1
 8002330:	4694      	mov	ip, r2
 8002332:	44bc      	add	ip, r7
 8002334:	4463      	add	r3, ip
 8002336:	22e4      	movs	r2, #228	; 0xe4
 8002338:	5c99      	ldrb	r1, [r3, r2]
 800233a:	193b      	adds	r3, r7, r4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	235a      	movs	r3, #90	; 0x5a
 8002340:	33ff      	adds	r3, #255	; 0xff
 8002342:	54d1      	strb	r1, [r2, r3]
	mlx->epsilH = eepromData[0xE5];
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <MLX_Init+0x434>)
 8002346:	228c      	movs	r2, #140	; 0x8c
 8002348:	0052      	lsls	r2, r2, #1
 800234a:	4694      	mov	ip, r2
 800234c:	44bc      	add	ip, r7
 800234e:	4463      	add	r3, ip
 8002350:	22e5      	movs	r2, #229	; 0xe5
 8002352:	5c99      	ldrb	r1, [r3, r2]
 8002354:	193b      	adds	r3, r7, r4
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	23ad      	movs	r3, #173	; 0xad
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	54d1      	strb	r1, [r2, r3]
	mlx->KsTaL = eepromData[0xE6];
 800235e:	4b53      	ldr	r3, [pc, #332]	; (80024ac <MLX_Init+0x434>)
 8002360:	228c      	movs	r2, #140	; 0x8c
 8002362:	0052      	lsls	r2, r2, #1
 8002364:	4694      	mov	ip, r2
 8002366:	44bc      	add	ip, r7
 8002368:	4463      	add	r3, ip
 800236a:	22e6      	movs	r2, #230	; 0xe6
 800236c:	5c9b      	ldrb	r3, [r3, r2]
 800236e:	b259      	sxtb	r1, r3
 8002370:	193b      	adds	r3, r7, r4
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	235c      	movs	r3, #92	; 0x5c
 8002376:	33ff      	adds	r3, #255	; 0xff
 8002378:	54d1      	strb	r1, [r2, r3]
	mlx->KsTaH = eepromData[0xE7];
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <MLX_Init+0x434>)
 800237c:	228c      	movs	r2, #140	; 0x8c
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	4694      	mov	ip, r2
 8002382:	44bc      	add	ip, r7
 8002384:	4463      	add	r3, ip
 8002386:	22e7      	movs	r2, #231	; 0xe7
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	b259      	sxtb	r1, r3
 800238c:	193b      	adds	r3, r7, r4
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	23ae      	movs	r3, #174	; 0xae
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	54d1      	strb	r1, [r2, r3]
	memcpy(&(mlx->config), &eepromData[0xF5], sizeof(mlx->config));
 8002396:	193b      	adds	r3, r7, r4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	335f      	adds	r3, #95	; 0x5f
 800239c:	33ff      	adds	r3, #255	; 0xff
 800239e:	0018      	movs	r0, r3
 80023a0:	197b      	adds	r3, r7, r5
 80023a2:	33f5      	adds	r3, #245	; 0xf5
 80023a4:	2202      	movs	r2, #2
 80023a6:	0019      	movs	r1, r3
 80023a8:	f004 fa70 	bl	800688c <memcpy>
	mlx->OSCtrim = eepromData[0xF7];
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <MLX_Init+0x434>)
 80023ae:	228c      	movs	r2, #140	; 0x8c
 80023b0:	0052      	lsls	r2, r2, #1
 80023b2:	4694      	mov	ip, r2
 80023b4:	44bc      	add	ip, r7
 80023b6:	4463      	add	r3, ip
 80023b8:	22f7      	movs	r2, #247	; 0xf7
 80023ba:	5c99      	ldrb	r1, [r3, r2]
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	23b0      	movs	r3, #176	; 0xb0
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	54d1      	strb	r1, [r2, r3]

	//Write Oscillator Trim
	//pg. 10 datasheet
	pacote[0] = WRITE_OSC_TRIM;
 80023c6:	2184      	movs	r1, #132	; 0x84
 80023c8:	0049      	lsls	r1, r1, #1
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	2204      	movs	r2, #4
 80023ce:	701a      	strb	r2, [r3, #0]
	pacote[1] = mlx->OSCtrim-0xAA;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	23b0      	movs	r3, #176	; 0xb0
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	3356      	adds	r3, #86	; 0x56
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	705a      	strb	r2, [r3, #1]
	pacote[2] = mlx->OSCtrim;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	23b0      	movs	r3, #176	; 0xb0
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	5cd2      	ldrb	r2, [r2, r3]
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	709a      	strb	r2, [r3, #2]
	pacote[3] = 0x56;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2256      	movs	r2, #86	; 0x56
 80023f4:	70da      	strb	r2, [r3, #3]
	pacote[4] = 0;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2200      	movs	r2, #0
 80023fa:	711a      	strb	r2, [r3, #4]
	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MLXir<<1, pacote,  sizeof(*pacote)*5, 100) != HAL_OK);
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <MLX_Init+0x438>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	18db      	adds	r3, r3, r3
 8002404:	b299      	uxth	r1, r3
 8002406:	2384      	movs	r3, #132	; 0x84
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	18fa      	adds	r2, r7, r3
 800240c:	4829      	ldr	r0, [pc, #164]	; (80024b4 <MLX_Init+0x43c>)
 800240e:	2364      	movs	r3, #100	; 0x64
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2305      	movs	r3, #5
 8002414:	f001 feb2 	bl	800417c <HAL_I2C_Master_Transmit>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d1f0      	bne.n	80023fe <MLX_Init+0x386>

	setConfiguration();
 800241c:	f7ff fdc2 	bl	8001fa4 <setConfiguration>

	UART_print("eeprom\n");
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <MLX_Init+0x440>)
 8002422:	0018      	movs	r0, r3
 8002424:	f001 f8a2 	bl	800356c <UART_print>
	for(int k = 0; k < 256; k++)
 8002428:	2300      	movs	r3, #0
 800242a:	228a      	movs	r2, #138	; 0x8a
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	18ba      	adds	r2, r7, r2
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e024      	b.n	800247e <MLX_Init+0x406>
	{
		UART_print("(#%d)-> %d ", k,  eepromData[k]);
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <MLX_Init+0x434>)
 8002436:	228c      	movs	r2, #140	; 0x8c
 8002438:	0052      	lsls	r2, r2, #1
 800243a:	18ba      	adds	r2, r7, r2
 800243c:	18d2      	adds	r2, r2, r3
 800243e:	218a      	movs	r1, #138	; 0x8a
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	187b      	adds	r3, r7, r1
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	001a      	movs	r2, r3
 800244c:	000c      	movs	r4, r1
 800244e:	187b      	adds	r3, r7, r1
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MLX_Init+0x444>)
 8002454:	0018      	movs	r0, r3
 8002456:	f001 f889 	bl	800356c <UART_print>
		if((k+1)%32 == 0) UART_print("\n");
 800245a:	193b      	adds	r3, r7, r4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	001a      	movs	r2, r3
 8002462:	231f      	movs	r3, #31
 8002464:	4013      	ands	r3, r2
 8002466:	d103      	bne.n	8002470 <MLX_Init+0x3f8>
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <MLX_Init+0x448>)
 800246a:	0018      	movs	r0, r3
 800246c:	f001 f87e 	bl	800356c <UART_print>
	for(int k = 0; k < 256; k++)
 8002470:	228a      	movs	r2, #138	; 0x8a
 8002472:	0052      	lsls	r2, r2, #1
 8002474:	18bb      	adds	r3, r7, r2
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	18ba      	adds	r2, r7, r2
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	238a      	movs	r3, #138	; 0x8a
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	ddd4      	ble.n	8002434 <MLX_Init+0x3bc>
	}
	UART_print("\n\n\n");
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MLX_Init+0x44c>)
 800248c:	0018      	movs	r0, r3
 800248e:	f001 f86d 	bl	800356c <UART_print>

	free(mlx);
 8002492:	2488      	movs	r4, #136	; 0x88
 8002494:	0064      	lsls	r4, r4, #1
 8002496:	193b      	adds	r3, r7, r4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0018      	movs	r0, r3
 800249c:	f004 f9ec 	bl	8006878 <free>
	return mlx;
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b046      	add	sp, #280	; 0x118
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	fffffef0 	.word	0xfffffef0
 80024b0:	20000000 	.word	0x20000000
 80024b4:	200000a4 	.word	0x200000a4
 80024b8:	08008058 	.word	0x08008058
 80024bc:	08008060 	.word	0x08008060
 80024c0:	0800806c 	.word	0x0800806c
 80024c4:	08008070 	.word	0x08008070

080024c8 <MLX_Read_IT>:

HAL_StatusTypeDef MLX_Read_IT(MLX * mlx)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b08b      	sub	sp, #44	; 0x2c
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	6078      	str	r0, [r7, #4]
		colocar readConfig()
	}*/


	// Sensor Data (Temperature / PTAT)
	uint8_t ptatLow=0,ptatHigh=0;
 80024d0:	2317      	movs	r3, #23
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	2316      	movs	r3, #22
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	uint32_t comando = 0x02400001;
 80024e0:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <MLX_Read_IT+0x12c>)
 80024e2:	613b      	str	r3, [r7, #16]
	uint8_t buff[2] = {0};
 80024e4:	230c      	movs	r3, #12
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
	while(HAL_I2C_Mem_Read2(mlx->hi2c, (uint16_t)MLXir<<1, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	23b2      	movs	r3, #178	; 0xb2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	58d0      	ldr	r0, [r2, r3]
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <MLX_Read_IT+0x130>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	0059      	lsls	r1, r3, #1
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	23fa      	movs	r3, #250	; 0xfa
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	9302      	str	r3, [sp, #8]
 8002504:	2302      	movs	r3, #2
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	240c      	movs	r4, #12
 800250a:	193b      	adds	r3, r7, r4
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2304      	movs	r3, #4
 8002510:	f001 ffd6 	bl	80044c0 <HAL_I2C_Mem_Read2>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d1ea      	bne.n	80024ee <MLX_Read_IT+0x26>
	ptatLow = buff[0];
 8002518:	2017      	movs	r0, #23
 800251a:	183b      	adds	r3, r7, r0
 800251c:	0021      	movs	r1, r4
 800251e:	187a      	adds	r2, r7, r1
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
	ptatHigh = buff[1];
 8002524:	2416      	movs	r4, #22
 8002526:	193b      	adds	r3, r7, r4
 8002528:	187a      	adds	r2, r7, r1
 800252a:	7852      	ldrb	r2, [r2, #1]
 800252c:	701a      	strb	r2, [r3, #0]
	mlx->ptat = ((uint16_t) (ptatHigh << 8) | ptatLow);
 800252e:	193b      	adds	r3, r7, r4
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b29a      	uxth	r2, r3
 8002538:	183b      	adds	r3, r7, r0
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4313      	orrs	r3, r2
 8002540:	b299      	uxth	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	5299      	strh	r1, [r3, r2]


	//CPIX
	comando = 0x02410001;
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <MLX_Read_IT+0x134>)
 800254a:	613b      	str	r3, [r7, #16]
	uint8_t cpixLow=0,cpixHigh=0;
 800254c:	230f      	movs	r3, #15
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	230e      	movs	r3, #14
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
	while(HAL_I2C_Mem_Read2(mlx->hi2c, (uint16_t)MLXir<<1, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	23b2      	movs	r3, #178	; 0xb2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	58d0      	ldr	r0, [r2, r3]
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <MLX_Read_IT+0x130>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	0059      	lsls	r1, r3, #1
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	23fa      	movs	r3, #250	; 0xfa
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2302      	movs	r3, #2
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	240c      	movs	r4, #12
 800257a:	193b      	adds	r3, r7, r4
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2304      	movs	r3, #4
 8002580:	f001 ff9e 	bl	80044c0 <HAL_I2C_Mem_Read2>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d1ea      	bne.n	800255e <MLX_Read_IT+0x96>
	cpixLow = buff[0];
 8002588:	200f      	movs	r0, #15
 800258a:	183b      	adds	r3, r7, r0
 800258c:	0021      	movs	r1, r4
 800258e:	187a      	adds	r2, r7, r1
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
	cpixHigh = buff[1];
 8002594:	240e      	movs	r4, #14
 8002596:	193b      	adds	r3, r7, r4
 8002598:	187a      	adds	r2, r7, r1
 800259a:	7852      	ldrb	r2, [r2, #1]
 800259c:	701a      	strb	r2, [r3, #0]
	mlx->CPIX = ((uint16_t) (cpixHigh << 8) | cpixLow);
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b299      	uxth	r1, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	23b1      	movs	r3, #177	; 0xb1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	52d1      	strh	r1, [r2, r3]


	// Tire Data (Temperature)
	comando = 0x02000140;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MLX_Read_IT+0x138>)
 80025bc:	613b      	str	r3, [r7, #16]
	while(HAL_I2C_Mem_Read2(mlx->hi2c, (uint16_t)MLXir<<1, comando, I2C_MEMADD_SIZE_32BIT, mlx->rawIR, 128, 1000) != HAL_OK);
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	23b2      	movs	r3, #178	; 0xb2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	58d0      	ldr	r0, [r2, r3]
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MLX_Read_IT+0x130>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	0059      	lsls	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693c      	ldr	r4, [r7, #16]
 80025d2:	22fa      	movs	r2, #250	; 0xfa
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	9202      	str	r2, [sp, #8]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	9201      	str	r2, [sp, #4]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2304      	movs	r3, #4
 80025e0:	0022      	movs	r2, r4
 80025e2:	f001 ff6d 	bl	80044c0 <HAL_I2C_Mem_Read2>
 80025e6:	1e03      	subs	r3, r0, #0
 80025e8:	d1ea      	bne.n	80025c0 <MLX_Read_IT+0xf8>


	return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b007      	add	sp, #28
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	02400001 	.word	0x02400001
 80025f8:	20000000 	.word	0x20000000
 80025fc:	02410001 	.word	0x02410001
 8002600:	02000140 	.word	0x02000140

08002604 <MLX_read>:

void MLX_read(MLX * mlx, int16_t * IR)
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	  uint8_t k = 0, ind = 0;
 800260e:	2317      	movs	r3, #23
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	2314      	movs	r3, #20
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]


	  if(MLX_Read_IT(mlx) == HAL_OK) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff ff51 	bl	80024c8 <MLX_Read_IT>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d147      	bne.n	80026ba <MLX_read+0xb6>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	01db      	lsls	r3, r3, #7
 800262e:	4a27      	ldr	r2, [pc, #156]	; (80026cc <MLX_read+0xc8>)
 8002630:	0019      	movs	r1, r3
 8002632:	0010      	movs	r0, r2
 8002634:	f001 fcf1 	bl	800401a <HAL_GPIO_TogglePin>

		  for(uint8_t i = 0; i < 4; i++) {
 8002638:	2316      	movs	r3, #22
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e036      	b.n	80026b0 <MLX_read+0xac>
			  for(uint8_t j = 0; j < 16; j++) {
 8002642:	2315      	movs	r3, #21
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e026      	b.n	800269a <MLX_read+0x96>
				  double t0 = MLX_CalcTemp(mlx, i, j);
 800264c:	2316      	movs	r3, #22
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2100      	movs	r1, #0
 8002652:	5659      	ldrsb	r1, [r3, r1]
 8002654:	2515      	movs	r5, #21
 8002656:	197b      	adds	r3, r7, r5
 8002658:	2200      	movs	r2, #0
 800265a:	569a      	ldrsb	r2, [r3, r2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fcf6 	bl	8003050 <MLX_CalcTemp>
 8002664:	0002      	movs	r2, r0
 8002666:	000b      	movs	r3, r1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	60fb      	str	r3, [r7, #12]
				  IR[k] = t0;
 800266c:	2617      	movs	r6, #23
 800266e:	19bb      	adds	r3, r7, r6
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	18d4      	adds	r4, r2, r3
 8002678:	68b8      	ldr	r0, [r7, #8]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	f7ff fba4 	bl	8001dc8 <__aeabi_d2iz>
 8002680:	0003      	movs	r3, r0
 8002682:	b21b      	sxth	r3, r3
 8002684:	8023      	strh	r3, [r4, #0]
				 // UART_print("%d ", IR[k]);

				 // if((k+1)%16 == 0) UART_print("\n");
				  k++;
 8002686:	19bb      	adds	r3, r7, r6
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	19bb      	adds	r3, r7, r6
 800268c:	3201      	adds	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
			  for(uint8_t j = 0; j < 16; j++) {
 8002690:	197b      	adds	r3, r7, r5
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	197b      	adds	r3, r7, r5
 8002696:	3201      	adds	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	2315      	movs	r3, #21
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d9d3      	bls.n	800264c <MLX_read+0x48>
		  for(uint8_t i = 0; i < 4; i++) {
 80026a4:	2116      	movs	r1, #22
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	3201      	adds	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	2316      	movs	r3, #22
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d9c3      	bls.n	8002642 <MLX_read+0x3e>
			  }
		  }
	  }
	  UART_print("\n");
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <MLX_read+0xcc>)
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 ff55 	bl	800356c <UART_print>
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b007      	add	sp, #28
 80026c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	48000800 	.word	0x48000800
 80026d0:	0800806c 	.word	0x0800806c

080026d4 <Calc_Ta>:


double Calc_Ta(MLX* mlx) 	// Temperatura absoluta
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b097      	sub	sp, #92	; 0x5c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
	// Ta = (-Kt1 + sqrt(power(Kt1, 2)-4*Kt2*(Vth-PTAT_DATA)))/(2*Kt2) + 25

	// Calculating Vth
	uint8_t config_reg = (uint8_t) ((mlx->config) >> 4) & CONFIG_MASK;
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	23af      	movs	r3, #175	; 0xaf
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	5ad3      	ldrh	r3, [r2, r3]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	264f      	movs	r6, #79	; 0x4f
 80026ec:	2308      	movs	r3, #8
 80026ee:	18f9      	adds	r1, r7, r3
 80026f0:	198b      	adds	r3, r1, r6
 80026f2:	2103      	movs	r1, #3
 80026f4:	400a      	ands	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
	double v = (mlx->Vth) / pow(2, (3-config_reg));
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	23a7      	movs	r3, #167	; 0xa7
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	5ed3      	ldrsh	r3, [r2, r3]
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fb97 	bl	8001e34 <__aeabi_i2d>
 8002706:	0004      	movs	r4, r0
 8002708:	000d      	movs	r5, r1
 800270a:	2308      	movs	r3, #8
 800270c:	18fa      	adds	r2, r7, r3
 800270e:	1993      	adds	r3, r2, r6
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2203      	movs	r2, #3
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff fb8c 	bl	8001e34 <__aeabi_i2d>
 800271c:	0002      	movs	r2, r0
 800271e:	000b      	movs	r3, r1
 8002720:	2000      	movs	r0, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	05c9      	lsls	r1, r1, #23
 8002726:	f004 fce1 	bl	80070ec <pow>
 800272a:	0002      	movs	r2, r0
 800272c:	000b      	movs	r3, r1
 800272e:	0020      	movs	r0, r4
 8002730:	0029      	movs	r1, r5
 8002732:	f7fe f927 	bl	8000984 <__aeabi_ddiv>
 8002736:	0002      	movs	r2, r0
 8002738:	000b      	movs	r3, r1
 800273a:	64ba      	str	r2, [r7, #72]	; 0x48
 800273c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t Kt_scale_shift1 = (uint8_t) ((mlx->Kt_scale) >> 4) & EEPROM_MASK;
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	23aa      	movs	r3, #170	; 0xaa
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	56d3      	ldrsb	r3, [r2, r3]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	233f      	movs	r3, #63	; 0x3f
 800274a:	2108      	movs	r1, #8
 800274c:	468c      	mov	ip, r1
 800274e:	44bc      	add	ip, r7
 8002750:	4463      	add	r3, ip
 8002752:	0912      	lsrs	r2, r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
	double kt1 = (mlx->Kt1) / (pow(2, Kt_scale_shift1) * pow(2, (3-config_reg)));
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	23a8      	movs	r3, #168	; 0xa8
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	5ed3      	ldrsh	r3, [r2, r3]
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fb68 	bl	8001e34 <__aeabi_i2d>
 8002764:	0004      	movs	r4, r0
 8002766:	000d      	movs	r5, r1
 8002768:	233f      	movs	r3, #63	; 0x3f
 800276a:	2208      	movs	r2, #8
 800276c:	4694      	mov	ip, r2
 800276e:	44bc      	add	ip, r7
 8002770:	4463      	add	r3, ip
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fb8d 	bl	8001e94 <__aeabi_ui2d>
 800277a:	0002      	movs	r2, r0
 800277c:	000b      	movs	r3, r1
 800277e:	2000      	movs	r0, #0
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	05c9      	lsls	r1, r1, #23
 8002784:	f004 fcb2 	bl	80070ec <pow>
 8002788:	6038      	str	r0, [r7, #0]
 800278a:	6079      	str	r1, [r7, #4]
 800278c:	2308      	movs	r3, #8
 800278e:	18fa      	adds	r2, r7, r3
 8002790:	1993      	adds	r3, r2, r6
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2203      	movs	r2, #3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff fb4b 	bl	8001e34 <__aeabi_i2d>
 800279e:	0002      	movs	r2, r0
 80027a0:	000b      	movs	r3, r1
 80027a2:	2000      	movs	r0, #0
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	05c9      	lsls	r1, r1, #23
 80027a8:	f004 fca0 	bl	80070ec <pow>
 80027ac:	0002      	movs	r2, r0
 80027ae:	000b      	movs	r3, r1
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f7fe fcec 	bl	8001190 <__aeabi_dmul>
 80027b8:	0002      	movs	r2, r0
 80027ba:	000b      	movs	r3, r1
 80027bc:	0020      	movs	r0, r4
 80027be:	0029      	movs	r1, r5
 80027c0:	f7fe f8e0 	bl	8000984 <__aeabi_ddiv>
 80027c4:	0002      	movs	r2, r0
 80027c6:	000b      	movs	r3, r1
 80027c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t Kt_scale_shift2 = (uint8_t) (mlx->Kt_scale) & EEPROM_MASK;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	23aa      	movs	r3, #170	; 0xaa
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	56d3      	ldrsb	r3, [r2, r3]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	232f      	movs	r3, #47	; 0x2f
 80027d8:	2108      	movs	r1, #8
 80027da:	468c      	mov	ip, r1
 80027dc:	44bc      	add	ip, r7
 80027de:	4463      	add	r3, ip
 80027e0:	210f      	movs	r1, #15
 80027e2:	400a      	ands	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]
	double kt2 = ((mlx->Kt2) / (pow(2, Kt_scale_shift2+10) * pow(2, (3-config_reg)))); //não consigo casa decimal?
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	23a9      	movs	r3, #169	; 0xa9
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	5ed3      	ldrsh	r3, [r2, r3]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff fb20 	bl	8001e34 <__aeabi_i2d>
 80027f4:	0004      	movs	r4, r0
 80027f6:	000d      	movs	r5, r1
 80027f8:	232f      	movs	r3, #47	; 0x2f
 80027fa:	2208      	movs	r2, #8
 80027fc:	4694      	mov	ip, r2
 80027fe:	44bc      	add	ip, r7
 8002800:	4463      	add	r3, ip
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	330a      	adds	r3, #10
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff fb14 	bl	8001e34 <__aeabi_i2d>
 800280c:	0002      	movs	r2, r0
 800280e:	000b      	movs	r3, r1
 8002810:	2000      	movs	r0, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	05c9      	lsls	r1, r1, #23
 8002816:	f004 fc69 	bl	80070ec <pow>
 800281a:	6038      	str	r0, [r7, #0]
 800281c:	6079      	str	r1, [r7, #4]
 800281e:	2308      	movs	r3, #8
 8002820:	18fa      	adds	r2, r7, r3
 8002822:	1993      	adds	r3, r2, r6
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2203      	movs	r2, #3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fb02 	bl	8001e34 <__aeabi_i2d>
 8002830:	0002      	movs	r2, r0
 8002832:	000b      	movs	r3, r1
 8002834:	2000      	movs	r0, #0
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	05c9      	lsls	r1, r1, #23
 800283a:	f004 fc57 	bl	80070ec <pow>
 800283e:	0002      	movs	r2, r0
 8002840:	000b      	movs	r3, r1
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	f7fe fca3 	bl	8001190 <__aeabi_dmul>
 800284a:	0002      	movs	r2, r0
 800284c:	000b      	movs	r3, r1
 800284e:	0020      	movs	r0, r4
 8002850:	0029      	movs	r1, r5
 8002852:	f7fe f897 	bl	8000984 <__aeabi_ddiv>
 8002856:	0002      	movs	r2, r0
 8002858:	000b      	movs	r3, r1
 800285a:	62ba      	str	r2, [r7, #40]	; 0x28
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t PTAT_data = mlx->ptat;
 800285e:	261e      	movs	r6, #30
 8002860:	2308      	movs	r3, #8
 8002862:	18fa      	adds	r2, r7, r3
 8002864:	1993      	adds	r3, r2, r6
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	5a52      	ldrh	r2, [r2, r1]
 800286c:	801a      	strh	r2, [r3, #0]

	//Ta
	double numer =  -kt1 + sqrt(pow(kt1, 2) - (4 * kt2 * (v - PTAT_data)));
 800286e:	2200      	movs	r2, #0
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	05db      	lsls	r3, r3, #23
 8002874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002878:	f004 fc38 	bl	80070ec <pow>
 800287c:	0004      	movs	r4, r0
 800287e:	000d      	movs	r5, r1
 8002880:	2200      	movs	r2, #0
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <Calc_Ta+0x24c>)
 8002884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002888:	f7fe fc82 	bl	8001190 <__aeabi_dmul>
 800288c:	0002      	movs	r2, r0
 800288e:	000b      	movs	r3, r1
 8002890:	603a      	str	r2, [r7, #0]
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	2308      	movs	r3, #8
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	199b      	adds	r3, r3, r6
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fac9 	bl	8001e34 <__aeabi_i2d>
 80028a2:	0002      	movs	r2, r0
 80028a4:	000b      	movs	r3, r1
 80028a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028aa:	f7fe fedd 	bl	8001668 <__aeabi_dsub>
 80028ae:	0002      	movs	r2, r0
 80028b0:	000b      	movs	r3, r1
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	f7fe fc6b 	bl	8001190 <__aeabi_dmul>
 80028ba:	0002      	movs	r2, r0
 80028bc:	000b      	movs	r3, r1
 80028be:	0020      	movs	r0, r4
 80028c0:	0029      	movs	r1, r5
 80028c2:	f7fe fed1 	bl	8001668 <__aeabi_dsub>
 80028c6:	0002      	movs	r2, r0
 80028c8:	000b      	movs	r3, r1
 80028ca:	0010      	movs	r0, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	f004 fcc5 	bl	800725c <sqrt>
 80028d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	f7fe fec7 	bl	8001668 <__aeabi_dsub>
 80028da:	0002      	movs	r2, r0
 80028dc:	000b      	movs	r3, r1
 80028de:	61ba      	str	r2, [r7, #24]
 80028e0:	61fb      	str	r3, [r7, #28]
	double Ta = (numer / (2*(kt2))) + 25;
 80028e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028e6:	0002      	movs	r2, r0
 80028e8:	000b      	movs	r3, r1
 80028ea:	f7fd fce1 	bl	80002b0 <__aeabi_dadd>
 80028ee:	0002      	movs	r2, r0
 80028f0:	000b      	movs	r3, r1
 80028f2:	69b8      	ldr	r0, [r7, #24]
 80028f4:	69f9      	ldr	r1, [r7, #28]
 80028f6:	f7fe f845 	bl	8000984 <__aeabi_ddiv>
 80028fa:	0002      	movs	r2, r0
 80028fc:	000b      	movs	r3, r1
 80028fe:	0010      	movs	r0, r2
 8002900:	0019      	movs	r1, r3
 8002902:	2200      	movs	r2, #0
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <Calc_Ta+0x250>)
 8002906:	f7fd fcd3 	bl	80002b0 <__aeabi_dadd>
 800290a:	0002      	movs	r2, r0
 800290c:	000b      	movs	r3, r1
 800290e:	613a      	str	r2, [r7, #16]
 8002910:	617b      	str	r3, [r7, #20]
	return Ta;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	697b      	ldr	r3, [r7, #20]
}
 8002916:	0010      	movs	r0, r2
 8002918:	0019      	movs	r1, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b017      	add	sp, #92	; 0x5c
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	40100000 	.word	0x40100000
 8002924:	40390000 	.word	0x40390000

08002928 <Calc_Vir_Compensated>:



double Calc_Vir_Compensated(MLX* mlx, int8_t i, int8_t j, double Ta) {
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	46c6      	mov	lr, r8
 800292c:	b500      	push	{lr}
 800292e:	b09e      	sub	sp, #120	; 0x78
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	0008      	movs	r0, r1
 8002936:	0011      	movs	r1, r2
 8002938:	230b      	movs	r3, #11
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	1c02      	adds	r2, r0, #0
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	230a      	movs	r3, #10
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	1c0a      	adds	r2, r1, #0
 8002946:	701a      	strb	r2, [r3, #0]

	// Vir Offset Compensation
	double Ai, Bi;
	uint8_t address = (i + 4*j);
 8002948:	230a      	movs	r3, #10
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	b2d9      	uxtb	r1, r3
 8002952:	230b      	movs	r3, #11
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	2667      	movs	r6, #103	; 0x67
 800295a:	2308      	movs	r3, #8
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	199b      	adds	r3, r3, r6
 8002960:	188a      	adds	r2, r1, r2
 8002962:	701a      	strb	r2, [r3, #0]
	int8_t Ta0 = 25;
 8002964:	2366      	movs	r3, #102	; 0x66
 8002966:	2208      	movs	r2, #8
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	2219      	movs	r2, #25
 8002970:	701a      	strb	r2, [r3, #0]
	uint8_t config_reg = (uint8_t) ((mlx->config)>>4) & CONFIG_MASK;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	23af      	movs	r3, #175	; 0xaf
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	5ad3      	ldrh	r3, [r2, r3]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	2365      	movs	r3, #101	; 0x65
 8002982:	2108      	movs	r1, #8
 8002984:	468c      	mov	ip, r1
 8002986:	44bc      	add	ip, r7
 8002988:	4463      	add	r3, ip
 800298a:	2103      	movs	r1, #3
 800298c:	400a      	ands	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]

	int16_t Vir = (mlx->rawIR)[address];
 8002990:	2308      	movs	r3, #8
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	199b      	adds	r3, r3, r6
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	0052      	lsls	r2, r2, #1
 800299c:	5ad2      	ldrh	r2, [r2, r3]
 800299e:	2162      	movs	r1, #98	; 0x62
 80029a0:	2308      	movs	r3, #8
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	185b      	adds	r3, r3, r1
 80029a6:	801a      	strh	r2, [r3, #0]


	int16_t Acomm = 256*(uint8_t)(mlx->AcommH) + (uint8_t)(mlx->AcommL) - 65536;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	2346      	movs	r3, #70	; 0x46
 80029ac:	33ff      	adds	r3, #255	; 0xff
 80029ae:	56d3      	ldrsb	r3, [r2, r3]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	23a2      	movs	r3, #162	; 0xa2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	56cb      	ldrsb	r3, [r1, r3]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	2460      	movs	r4, #96	; 0x60
 80029ca:	2308      	movs	r3, #8
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	191b      	adds	r3, r3, r4
 80029d0:	801a      	strh	r2, [r3, #0]

	uint8_t delAij = (mlx->delA)[address];
 80029d2:	2308      	movs	r3, #8
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	199b      	adds	r3, r3, r6
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	205f      	movs	r0, #95	; 0x5f
 80029dc:	2308      	movs	r3, #8
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	181b      	adds	r3, r3, r0
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	2082      	movs	r0, #130	; 0x82
 80029e6:	188a      	adds	r2, r1, r2
 80029e8:	1812      	adds	r2, r2, r0
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	701a      	strb	r2, [r3, #0]

	uint8_t delA_scale = (uint8_t) ((mlx->delAlphaScale)>>6) & EEPROM_MASK; //mudei, antes era >>4
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	23ac      	movs	r3, #172	; 0xac
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	5cd2      	ldrb	r2, [r2, r3]
 80029f6:	255e      	movs	r5, #94	; 0x5e
 80029f8:	2308      	movs	r3, #8
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	195b      	adds	r3, r3, r5
 80029fe:	0992      	lsrs	r2, r2, #6
 8002a00:	701a      	strb	r2, [r3, #0]

	Ai = (Acomm + delAij*pow(2, delA_scale))/pow(2, 3-config_reg);
 8002a02:	2308      	movs	r3, #8
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	191b      	adds	r3, r3, r4
 8002a08:	2400      	movs	r4, #0
 8002a0a:	5f1b      	ldrsh	r3, [r3, r4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff fa11 	bl	8001e34 <__aeabi_i2d>
 8002a12:	0004      	movs	r4, r0
 8002a14:	000d      	movs	r5, r1
 8002a16:	205f      	movs	r0, #95	; 0x5f
 8002a18:	2308      	movs	r3, #8
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	181b      	adds	r3, r3, r0
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff fa07 	bl	8001e34 <__aeabi_i2d>
 8002a26:	6038      	str	r0, [r7, #0]
 8002a28:	6079      	str	r1, [r7, #4]
 8002a2a:	225e      	movs	r2, #94	; 0x5e
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fa2d 	bl	8001e94 <__aeabi_ui2d>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	000b      	movs	r3, r1
 8002a3e:	2000      	movs	r0, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	05c9      	lsls	r1, r1, #23
 8002a44:	f004 fb52 	bl	80070ec <pow>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	f7fe fb9e 	bl	8001190 <__aeabi_dmul>
 8002a54:	0002      	movs	r2, r0
 8002a56:	000b      	movs	r3, r1
 8002a58:	0020      	movs	r0, r4
 8002a5a:	0029      	movs	r1, r5
 8002a5c:	f7fd fc28 	bl	80002b0 <__aeabi_dadd>
 8002a60:	0002      	movs	r2, r0
 8002a62:	000b      	movs	r3, r1
 8002a64:	0014      	movs	r4, r2
 8002a66:	001d      	movs	r5, r3
 8002a68:	2365      	movs	r3, #101	; 0x65
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	44bc      	add	ip, r7
 8002a70:	4463      	add	r3, ip
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2203      	movs	r2, #3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff f9db 	bl	8001e34 <__aeabi_i2d>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	000b      	movs	r3, r1
 8002a82:	2000      	movs	r0, #0
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	05c9      	lsls	r1, r1, #23
 8002a88:	f004 fb30 	bl	80070ec <pow>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	000b      	movs	r3, r1
 8002a90:	0020      	movs	r0, r4
 8002a92:	0029      	movs	r1, r5
 8002a94:	f7fd ff76 	bl	8000984 <__aeabi_ddiv>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c

	int8_t Bij = (mlx->TaDep)[address];
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	199b      	adds	r3, r3, r6
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	244f      	movs	r4, #79	; 0x4f
 8002aaa:	2308      	movs	r3, #8
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	191b      	adds	r3, r3, r4
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	20c2      	movs	r0, #194	; 0xc2
 8002ab4:	188a      	adds	r2, r1, r2
 8002ab6:	1812      	adds	r2, r2, r0
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
	uint8_t Bi_scale = (uint8_t) (mlx->Bi_scale) & EEPROM_MASK;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	234e      	movs	r3, #78	; 0x4e
 8002ac0:	33ff      	adds	r3, #255	; 0xff
 8002ac2:	5cd2      	ldrb	r2, [r2, r3]
 8002ac4:	264e      	movs	r6, #78	; 0x4e
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	199b      	adds	r3, r3, r6
 8002acc:	210f      	movs	r1, #15
 8002ace:	400a      	ands	r2, r1
 8002ad0:	701a      	strb	r2, [r3, #0]

	Bi = Bij/(pow(2, Bi_scale)*pow(2, 3-config_reg));
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	191b      	adds	r3, r3, r4
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff f9a9 	bl	8001e34 <__aeabi_i2d>
 8002ae2:	0004      	movs	r4, r0
 8002ae4:	000d      	movs	r5, r1
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	199b      	adds	r3, r3, r6
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7ff f9d0 	bl	8001e94 <__aeabi_ui2d>
 8002af4:	0002      	movs	r2, r0
 8002af6:	000b      	movs	r3, r1
 8002af8:	2000      	movs	r0, #0
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	05c9      	lsls	r1, r1, #23
 8002afe:	f004 faf5 	bl	80070ec <pow>
 8002b02:	6038      	str	r0, [r7, #0]
 8002b04:	6079      	str	r1, [r7, #4]
 8002b06:	2365      	movs	r3, #101	; 0x65
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2203      	movs	r2, #3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff f98c 	bl	8001e34 <__aeabi_i2d>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	000b      	movs	r3, r1
 8002b20:	2000      	movs	r0, #0
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	05c9      	lsls	r1, r1, #23
 8002b26:	f004 fae1 	bl	80070ec <pow>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	6838      	ldr	r0, [r7, #0]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	f7fe fb2d 	bl	8001190 <__aeabi_dmul>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	0029      	movs	r1, r5
 8002b3e:	f7fd ff21 	bl	8000984 <__aeabi_ddiv>
 8002b42:	0002      	movs	r2, r0
 8002b44:	000b      	movs	r3, r1
 8002b46:	64ba      	str	r2, [r7, #72]	; 0x48
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c

	double Vir_Offcompensated = Vir - (Ai + Bi*(Ta-Ta0));
 8002b4a:	2162      	movs	r1, #98	; 0x62
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	185b      	adds	r3, r3, r1
 8002b52:	2200      	movs	r2, #0
 8002b54:	5e9b      	ldrsh	r3, [r3, r2]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff f96c 	bl	8001e34 <__aeabi_i2d>
 8002b5c:	0004      	movs	r4, r0
 8002b5e:	000d      	movs	r5, r1
 8002b60:	2366      	movs	r3, #102	; 0x66
 8002b62:	2208      	movs	r2, #8
 8002b64:	4694      	mov	ip, r2
 8002b66:	44bc      	add	ip, r7
 8002b68:	4463      	add	r3, ip
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff f960 	bl	8001e34 <__aeabi_i2d>
 8002b74:	0002      	movs	r2, r0
 8002b76:	000b      	movs	r3, r1
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	2008      	movs	r0, #8
 8002b7c:	4684      	mov	ip, r0
 8002b7e:	2008      	movs	r0, #8
 8002b80:	4680      	mov	r8, r0
 8002b82:	44b8      	add	r8, r7
 8002b84:	44c4      	add	ip, r8
 8002b86:	4461      	add	r1, ip
 8002b88:	6808      	ldr	r0, [r1, #0]
 8002b8a:	6849      	ldr	r1, [r1, #4]
 8002b8c:	f7fe fd6c 	bl	8001668 <__aeabi_dsub>
 8002b90:	0002      	movs	r2, r0
 8002b92:	000b      	movs	r3, r1
 8002b94:	0010      	movs	r0, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9c:	f7fe faf8 	bl	8001190 <__aeabi_dmul>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	000b      	movs	r3, r1
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	f7fd fb80 	bl	80002b0 <__aeabi_dadd>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	0029      	movs	r1, r5
 8002bb8:	f7fe fd56 	bl	8001668 <__aeabi_dsub>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	000b      	movs	r3, r1
 8002bc0:	643a      	str	r2, [r7, #64]	; 0x40
 8002bc2:	647b      	str	r3, [r7, #68]	; 0x44

	// Vir Thermal Gradient Compensation
	int16_t Acp = 256*(mlx->AcpH) + (mlx->AcpL);
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	2348      	movs	r3, #72	; 0x48
 8002bc8:	33ff      	adds	r3, #255	; 0xff
 8002bca:	56d3      	ldrsb	r3, [r2, r3]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	23a3      	movs	r3, #163	; 0xa3
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	56cb      	ldrsb	r3, [r1, r3]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	18d3      	adds	r3, r2, r3
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	2336      	movs	r3, #54	; 0x36
 8002be2:	2108      	movs	r1, #8
 8002be4:	468c      	mov	ip, r1
 8002be6:	44bc      	add	ip, r7
 8002be8:	4463      	add	r3, ip
 8002bea:	801a      	strh	r2, [r3, #0]
	if(Acp > 32768) Acp = Acp - 65536;

	double Bcp = mlx->Bcp;
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	23a4      	movs	r3, #164	; 0xa4
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff f94d 	bl	8001e94 <__aeabi_ui2d>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	000b      	movs	r3, r1
 8002bfe:	673a      	str	r2, [r7, #112]	; 0x70
 8002c00:	677b      	str	r3, [r7, #116]	; 0x74
	if(Bcp > 127) Bcp = Bcp - 256;
 8002c02:	2200      	movs	r2, #0
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <Calc_Vir_Compensated+0x440>)
 8002c06:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c08:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002c0a:	f7fd fb3d 	bl	8000288 <__aeabi_dcmpgt>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d009      	beq.n	8002c26 <Calc_Vir_Compensated+0x2fe>
 8002c12:	2200      	movs	r2, #0
 8002c14:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <Calc_Vir_Compensated+0x444>)
 8002c16:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c18:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002c1a:	f7fe fd25 	bl	8001668 <__aeabi_dsub>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	000b      	movs	r3, r1
 8002c22:	673a      	str	r2, [r7, #112]	; 0x70
 8002c24:	677b      	str	r3, [r7, #116]	; 0x74
	Bcp = (Bcp) / (pow(2, Bi_scale));
 8002c26:	234e      	movs	r3, #78	; 0x4e
 8002c28:	2208      	movs	r2, #8
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	44bc      	add	ip, r7
 8002c2e:	4463      	add	r3, ip
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff f92e 	bl	8001e94 <__aeabi_ui2d>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	000b      	movs	r3, r1
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	05c9      	lsls	r1, r1, #23
 8002c42:	f004 fa53 	bl	80070ec <pow>
 8002c46:	0002      	movs	r2, r0
 8002c48:	000b      	movs	r3, r1
 8002c4a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002c4e:	f7fd fe99 	bl	8000984 <__aeabi_ddiv>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	673a      	str	r2, [r7, #112]	; 0x70
 8002c58:	677b      	str	r3, [r7, #116]	; 0x74

	//double VirCP_Offcompensated
	double VirCP_Offcompensated = (int16_t)mlx->CPIX - (Acp + Bcp*(Ta-25));
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	23b1      	movs	r3, #177	; 0xb1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	5ad3      	ldrh	r3, [r2, r3]
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff f8e5 	bl	8001e34 <__aeabi_i2d>
 8002c6a:	0004      	movs	r4, r0
 8002c6c:	000d      	movs	r5, r1
 8002c6e:	2336      	movs	r3, #54	; 0x36
 8002c70:	2208      	movs	r2, #8
 8002c72:	4694      	mov	ip, r2
 8002c74:	44bc      	add	ip, r7
 8002c76:	4463      	add	r3, ip
 8002c78:	2200      	movs	r2, #0
 8002c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff f8d9 	bl	8001e34 <__aeabi_i2d>
 8002c82:	6038      	str	r0, [r7, #0]
 8002c84:	6079      	str	r1, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <Calc_Vir_Compensated+0x448>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	2608      	movs	r6, #8
 8002c8e:	46b4      	mov	ip, r6
 8002c90:	2008      	movs	r0, #8
 8002c92:	4680      	mov	r8, r0
 8002c94:	44b8      	add	r8, r7
 8002c96:	44c4      	add	ip, r8
 8002c98:	4461      	add	r1, ip
 8002c9a:	6808      	ldr	r0, [r1, #0]
 8002c9c:	6849      	ldr	r1, [r1, #4]
 8002c9e:	f7fe fce3 	bl	8001668 <__aeabi_dsub>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cae:	f7fe fa6f 	bl	8001190 <__aeabi_dmul>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	000b      	movs	r3, r1
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	f7fd faf9 	bl	80002b0 <__aeabi_dadd>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	000b      	movs	r3, r1
 8002cc2:	0020      	movs	r0, r4
 8002cc4:	0029      	movs	r1, r5
 8002cc6:	f7fe fccf 	bl	8001668 <__aeabi_dsub>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	633a      	str	r2, [r7, #48]	; 0x30
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34

	double tgc = (mlx->tgc)/32; 	//tgc = 0 na eeprom? Deu certo
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	234c      	movs	r3, #76	; 0x4c
 8002cd6:	33ff      	adds	r3, #255	; 0xff
 8002cd8:	56d3      	ldrsb	r3, [r2, r3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da00      	bge.n	8002ce0 <Calc_Vir_Compensated+0x3b8>
 8002cde:	331f      	adds	r3, #31
 8002ce0:	115b      	asrs	r3, r3, #5
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff f8a5 	bl	8001e34 <__aeabi_i2d>
 8002cea:	0002      	movs	r2, r0
 8002cec:	000b      	movs	r3, r1
 8002cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

	double VirTGC_Compensated = Vir_Offcompensated - tgc*VirCP_Offcompensated;
 8002cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cfa:	f7fe fa49 	bl	8001190 <__aeabi_dmul>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	000b      	movs	r3, r1
 8002d02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d06:	f7fe fcaf 	bl	8001668 <__aeabi_dsub>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	000b      	movs	r3, r1
 8002d0e:	623a      	str	r2, [r7, #32]
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
	//double VirTGC_Compensated = Vir_Offcompensated - 0.75*VirCP_Offcompensated;

	// Emissivity compensation
	double epsil = (256*(mlx->epsilH)+(mlx->epsilL))/TWO_BYTE_MAX;
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	23ad      	movs	r3, #173	; 0xad
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	225a      	movs	r2, #90	; 0x5a
 8002d20:	32ff      	adds	r2, #255	; 0xff
 8002d22:	5c8a      	ldrb	r2, [r1, r2]
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da02      	bge.n	8002d30 <Calc_Vir_Compensated+0x408>
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <Calc_Vir_Compensated+0x44c>)
 8002d2c:	4694      	mov	ip, r2
 8002d2e:	4463      	add	r3, ip
 8002d30:	13db      	asrs	r3, r3, #15
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff f87e 	bl	8001e34 <__aeabi_i2d>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	61ba      	str	r2, [r7, #24]
 8002d3e:	61fb      	str	r3, [r7, #28]

	double Vir_Compensated = VirTGC_Compensated/epsil;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	6a38      	ldr	r0, [r7, #32]
 8002d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d48:	f7fd fe1c 	bl	8000984 <__aeabi_ddiv>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	000b      	movs	r3, r1
 8002d50:	613a      	str	r2, [r7, #16]
 8002d52:	617b      	str	r3, [r7, #20]

	return Vir_Compensated;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]

}
 8002d58:	0010      	movs	r0, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b01e      	add	sp, #120	; 0x78
 8002d60:	bc80      	pop	{r7}
 8002d62:	46b8      	mov	r8, r7
 8002d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	405fc000 	.word	0x405fc000
 8002d6c:	40700000 	.word	0x40700000
 8002d70:	40390000 	.word	0x40390000
 8002d74:	00007fff 	.word	0x00007fff

08002d78 <Calc_Alpha_Compensated>:

double Calc_Alpha_Compensated(MLX* mlx, int8_t i, int8_t j, double Ta)
{
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7a:	b097      	sub	sp, #92	; 0x5c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	0008      	movs	r0, r1
 8002d82:	0011      	movs	r1, r2
 8002d84:	230b      	movs	r3, #11
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	1c02      	adds	r2, r0, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	230a      	movs	r3, #10
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	1c0a      	adds	r2, r1, #0
 8002d92:	701a      	strb	r2, [r3, #0]

	// alpha_comp = (1 + KsTa*(Ta-Ta0))*(alpha_ij-tgc*alpha_cp);

	uint8_t TA0 = 25;
 8002d94:	234f      	movs	r3, #79	; 0x4f
 8002d96:	2208      	movs	r2, #8
 8002d98:	4694      	mov	ip, r2
 8002d9a:	44bc      	add	ip, r7
 8002d9c:	4463      	add	r3, ip
 8002d9e:	2219      	movs	r2, #25
 8002da0:	701a      	strb	r2, [r3, #0]
	double KsTa = (256*(mlx->KsTaH)+(mlx->KsTaL))/pow(2,20);
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	23ae      	movs	r3, #174	; 0xae
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	56d3      	ldrsb	r3, [r2, r3]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	225c      	movs	r2, #92	; 0x5c
 8002db0:	32ff      	adds	r2, #255	; 0xff
 8002db2:	568a      	ldrsb	r2, [r1, r2]
 8002db4:	189b      	adds	r3, r3, r2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7ff f83c 	bl	8001e34 <__aeabi_i2d>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4b8b      	ldr	r3, [pc, #556]	; (8002fec <Calc_Alpha_Compensated+0x274>)
 8002dc0:	f7fd fde0 	bl	8000984 <__aeabi_ddiv>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	000b      	movs	r3, r1
 8002dc8:	64ba      	str	r2, [r7, #72]	; 0x48
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c

//	/KsTa = 524/pow(2,20);

	// Calculating alpha_ij
	uint8_t config_reg = (uint8_t) ((mlx -> config) >> 4) & CONFIG_MASK;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	23af      	movs	r3, #175	; 0xaf
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	5ad3      	ldrh	r3, [r2, r3]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	263f      	movs	r6, #63	; 0x3f
 8002ddc:	2408      	movs	r4, #8
 8002dde:	1939      	adds	r1, r7, r4
 8002de0:	198b      	adds	r3, r1, r6
 8002de2:	2103      	movs	r1, #3
 8002de4:	400a      	ands	r2, r1
 8002de6:	701a      	strb	r2, [r3, #0]
	double alpha0 = (256*(mlx->alpha0H)+(mlx->alpha0L))/pow(2, (mlx->alpha0Scale));
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	23ab      	movs	r3, #171	; 0xab
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	2256      	movs	r2, #86	; 0x56
 8002df6:	32ff      	adds	r2, #255	; 0xff
 8002df8:	5c8a      	ldrb	r2, [r1, r2]
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff f819 	bl	8001e34 <__aeabi_i2d>
 8002e02:	0004      	movs	r4, r0
 8002e04:	000d      	movs	r5, r1
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	2358      	movs	r3, #88	; 0x58
 8002e0a:	33ff      	adds	r3, #255	; 0xff
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff f840 	bl	8001e94 <__aeabi_ui2d>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	2000      	movs	r0, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	05c9      	lsls	r1, r1, #23
 8002e1e:	f004 f965 	bl	80070ec <pow>
 8002e22:	0002      	movs	r2, r0
 8002e24:	000b      	movs	r3, r1
 8002e26:	0020      	movs	r0, r4
 8002e28:	0029      	movs	r1, r5
 8002e2a:	f7fd fdab 	bl	8000984 <__aeabi_ddiv>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	000b      	movs	r3, r1
 8002e32:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t address = i + 4*j;
 8002e36:	230a      	movs	r3, #10
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	b2d9      	uxtb	r1, r3
 8002e40:	230b      	movs	r3, #11
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	202f      	movs	r0, #47	; 0x2f
 8002e48:	2408      	movs	r4, #8
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	181b      	adds	r3, r3, r0
 8002e4e:	188a      	adds	r2, r1, r2
 8002e50:	701a      	strb	r2, [r3, #0]
	double delAlpha = ((mlx->delA)[address])/pow(2,(mlx->delAlphaScale));
 8002e52:	193a      	adds	r2, r7, r4
 8002e54:	1813      	adds	r3, r2, r0
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	2182      	movs	r1, #130	; 0x82
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	185b      	adds	r3, r3, r1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7fe ffe6 	bl	8001e34 <__aeabi_i2d>
 8002e68:	0004      	movs	r4, r0
 8002e6a:	000d      	movs	r5, r1
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	23ac      	movs	r3, #172	; 0xac
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff f80d 	bl	8001e94 <__aeabi_ui2d>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	000b      	movs	r3, r1
 8002e7e:	2000      	movs	r0, #0
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	05c9      	lsls	r1, r1, #23
 8002e84:	f004 f932 	bl	80070ec <pow>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	0029      	movs	r1, r5
 8002e90:	f7fd fd78 	bl	8000984 <__aeabi_ddiv>
 8002e94:	0002      	movs	r2, r0
 8002e96:	000b      	movs	r3, r1
 8002e98:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	double alpha_ij = (alpha0 + delAlpha)/pow(2, 3-config_reg);
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ea4:	f7fd fa04 	bl	80002b0 <__aeabi_dadd>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	000b      	movs	r3, r1
 8002eac:	0014      	movs	r4, r2
 8002eae:	001d      	movs	r5, r3
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	18fa      	adds	r2, r7, r3
 8002eb4:	1993      	adds	r3, r2, r6
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fe ffb9 	bl	8001e34 <__aeabi_i2d>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	05c9      	lsls	r1, r1, #23
 8002ecc:	f004 f90e 	bl	80070ec <pow>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	0029      	movs	r1, r5
 8002ed8:	f7fd fd54 	bl	8000984 <__aeabi_ddiv>
 8002edc:	0002      	movs	r2, r0
 8002ede:	000b      	movs	r3, r1
 8002ee0:	623a      	str	r2, [r7, #32]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating alpha_cp
	double alpha_cp = (256*(mlx->alphaCPH)+(mlx->alphaCPL))/(pow(2,(mlx->alpha0Scale))*
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	23a5      	movs	r3, #165	; 0xa5
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	224a      	movs	r2, #74	; 0x4a
 8002ef2:	32ff      	adds	r2, #255	; 0xff
 8002ef4:	5c8a      	ldrb	r2, [r1, r2]
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fe ff9b 	bl	8001e34 <__aeabi_i2d>
 8002efe:	0004      	movs	r4, r0
 8002f00:	000d      	movs	r5, r1
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	2358      	movs	r3, #88	; 0x58
 8002f06:	33ff      	adds	r3, #255	; 0xff
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fe ffc2 	bl	8001e94 <__aeabi_ui2d>
 8002f10:	0002      	movs	r2, r0
 8002f12:	000b      	movs	r3, r1
 8002f14:	2000      	movs	r0, #0
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	05c9      	lsls	r1, r1, #23
 8002f1a:	f004 f8e7 	bl	80070ec <pow>
 8002f1e:	6038      	str	r0, [r7, #0]
 8002f20:	6079      	str	r1, [r7, #4]
																pow(2, 3-config_reg));
 8002f22:	2308      	movs	r3, #8
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	199b      	adds	r3, r3, r6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fe ff80 	bl	8001e34 <__aeabi_i2d>
 8002f34:	0002      	movs	r2, r0
 8002f36:	000b      	movs	r3, r1
 8002f38:	2000      	movs	r0, #0
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	05c9      	lsls	r1, r1, #23
 8002f3e:	f004 f8d5 	bl	80070ec <pow>
 8002f42:	0002      	movs	r2, r0
 8002f44:	000b      	movs	r3, r1
	double alpha_cp = (256*(mlx->alphaCPH)+(mlx->alphaCPL))/(pow(2,(mlx->alpha0Scale))*
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	f7fe f921 	bl	8001190 <__aeabi_dmul>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	000b      	movs	r3, r1
 8002f52:	0020      	movs	r0, r4
 8002f54:	0029      	movs	r1, r5
 8002f56:	f7fd fd15 	bl	8000984 <__aeabi_ddiv>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	61ba      	str	r2, [r7, #24]
 8002f60:	61fb      	str	r3, [r7, #28]

	double alpha_comp = (1 + KsTa*(Ta-TA0))*(alpha_ij-(mlx->tgc)*alpha_cp);
 8002f62:	234f      	movs	r3, #79	; 0x4f
 8002f64:	2208      	movs	r2, #8
 8002f66:	4694      	mov	ip, r2
 8002f68:	44bc      	add	ip, r7
 8002f6a:	4463      	add	r3, ip
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7fe ff60 	bl	8001e34 <__aeabi_i2d>
 8002f74:	0002      	movs	r2, r0
 8002f76:	000b      	movs	r3, r1
 8002f78:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f7a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f7c:	f7fe fb74 	bl	8001668 <__aeabi_dsub>
 8002f80:	0002      	movs	r2, r0
 8002f82:	000b      	movs	r3, r1
 8002f84:	0010      	movs	r0, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	f7fe f900 	bl	8001190 <__aeabi_dmul>
 8002f90:	0002      	movs	r2, r0
 8002f92:	000b      	movs	r3, r1
 8002f94:	0010      	movs	r0, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <Calc_Alpha_Compensated+0x278>)
 8002f9c:	f7fd f988 	bl	80002b0 <__aeabi_dadd>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	0014      	movs	r4, r2
 8002fa6:	001d      	movs	r5, r3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	234c      	movs	r3, #76	; 0x4c
 8002fac:	33ff      	adds	r3, #255	; 0xff
 8002fae:	56d3      	ldrsb	r3, [r2, r3]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fe ff3f 	bl	8001e34 <__aeabi_i2d>
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f7fe f8e9 	bl	8001190 <__aeabi_dmul>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	6a38      	ldr	r0, [r7, #32]
 8002fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc6:	f7fe fb4f 	bl	8001668 <__aeabi_dsub>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	000b      	movs	r3, r1
 8002fce:	0020      	movs	r0, r4
 8002fd0:	0029      	movs	r1, r5
 8002fd2:	f7fe f8dd 	bl	8001190 <__aeabi_dmul>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	000b      	movs	r3, r1
 8002fda:	613a      	str	r2, [r7, #16]
 8002fdc:	617b      	str	r3, [r7, #20]
	//double alpha_comp = (1 + KsTa*(Ta-TA0))*(alpha_ij-(0.75)*alpha_cp);

	return alpha_comp;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	697b      	ldr	r3, [r7, #20]
}
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b017      	add	sp, #92	; 0x5c
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fec:	41300000 	.word	0x41300000
 8002ff0:	3ff00000 	.word	0x3ff00000

08002ff4 <Calc_Ks4>:

double Calc_Ks4(MLX* mlx)
{
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	double Ks4 = (mlx->Ks4_EE)/pow(2, (mlx->Ks_scale)+8);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	2344      	movs	r3, #68	; 0x44
 8003000:	33ff      	adds	r3, #255	; 0xff
 8003002:	56d3      	ldrsb	r3, [r2, r3]
 8003004:	0018      	movs	r0, r3
 8003006:	f7fe ff15 	bl	8001e34 <__aeabi_i2d>
 800300a:	0004      	movs	r4, r0
 800300c:	000d      	movs	r5, r1
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	23a1      	movs	r3, #161	; 0xa1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	3308      	adds	r3, #8
 8003018:	0018      	movs	r0, r3
 800301a:	f7fe ff0b 	bl	8001e34 <__aeabi_i2d>
 800301e:	0002      	movs	r2, r0
 8003020:	000b      	movs	r3, r1
 8003022:	2000      	movs	r0, #0
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	05c9      	lsls	r1, r1, #23
 8003028:	f004 f860 	bl	80070ec <pow>
 800302c:	0002      	movs	r2, r0
 800302e:	000b      	movs	r3, r1
 8003030:	0020      	movs	r0, r4
 8003032:	0029      	movs	r1, r5
 8003034:	f7fd fca6 	bl	8000984 <__aeabi_ddiv>
 8003038:	0002      	movs	r2, r0
 800303a:	000b      	movs	r3, r1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	60fb      	str	r3, [r7, #12]
	return Ks4; //Ks4 = 0 no BAB e BAD
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	0010      	movs	r0, r2
 8003046:	0019      	movs	r1, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003050 <MLX_CalcTemp>:

double MLX_CalcTemp(MLX* mlx, int8_t i, int8_t j)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b099      	sub	sp, #100	; 0x64
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	0008      	movs	r0, r1
 800305a:	0011      	movs	r1, r2
 800305c:	1cfb      	adds	r3, r7, #3
 800305e:	1c02      	adds	r2, r0, #0
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	1cbb      	adds	r3, r7, #2
 8003064:	1c0a      	adds	r2, r1, #0
 8003066:	701a      	strb	r2, [r3, #0]

	// verifica se está no range
	//if(!(i<4 && j<16)) { exit(EXIT_FAILURE); }

	// Calculando parâmetros para usar no cálculo de To
	double Ta = Calc_Ta(mlx);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fb32 	bl	80026d4 <Calc_Ta>
 8003070:	0002      	movs	r2, r0
 8003072:	000b      	movs	r3, r1
 8003074:	653a      	str	r2, [r7, #80]	; 0x50
 8003076:	657b      	str	r3, [r7, #84]	; 0x54
	double Vir_Compensated = Calc_Vir_Compensated(mlx, i, j, Ta);
 8003078:	1cbb      	adds	r3, r7, #2
 800307a:	2400      	movs	r4, #0
 800307c:	571c      	ldrsb	r4, [r3, r4]
 800307e:	1cfb      	adds	r3, r7, #3
 8003080:	2100      	movs	r1, #0
 8003082:	5659      	ldrsb	r1, [r3, r1]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	9200      	str	r2, [sp, #0]
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	0022      	movs	r2, r4
 8003090:	f7ff fc4a 	bl	8002928 <Calc_Vir_Compensated>
 8003094:	0002      	movs	r2, r0
 8003096:	000b      	movs	r3, r1
 8003098:	64ba      	str	r2, [r7, #72]	; 0x48
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
	double Alpha_Compensated = Calc_Alpha_Compensated(mlx, i, j, Ta);
 800309c:	1cbb      	adds	r3, r7, #2
 800309e:	2400      	movs	r4, #0
 80030a0:	571c      	ldrsb	r4, [r3, r4]
 80030a2:	1cfb      	adds	r3, r7, #3
 80030a4:	2100      	movs	r1, #0
 80030a6:	5659      	ldrsb	r1, [r3, r1]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ae:	9200      	str	r2, [sp, #0]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	0022      	movs	r2, r4
 80030b4:	f7ff fe60 	bl	8002d78 <Calc_Alpha_Compensated>
 80030b8:	0002      	movs	r2, r0
 80030ba:	000b      	movs	r3, r1
 80030bc:	643a      	str	r2, [r7, #64]	; 0x40
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
	double Ks4 = Calc_Ks4(mlx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7ff ff96 	bl	8002ff4 <Calc_Ks4>
 80030c8:	0002      	movs	r2, r0
 80030ca:	000b      	movs	r3, r1
 80030cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	double TaK4 = pow(Ta+ABSOLUTE_TEMP, 4);
 80030d0:	4a46      	ldr	r2, [pc, #280]	; (80031ec <MLX_CalcTemp+0x19c>)
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <MLX_CalcTemp+0x1a0>)
 80030d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80030d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030d8:	f7fd f8ea 	bl	80002b0 <__aeabi_dadd>
 80030dc:	0002      	movs	r2, r0
 80030de:	000b      	movs	r3, r1
 80030e0:	0010      	movs	r0, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <MLX_CalcTemp+0x1a4>)
 80030e8:	f004 f800 	bl	80070ec <pow>
 80030ec:	0002      	movs	r2, r0
 80030ee:	000b      	movs	r3, r1
 80030f0:	633a      	str	r2, [r7, #48]	; 0x30
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34

	// Cálculo de Sx, Sx = 0 em BAB e BAD
	double tmp1 = pow(Alpha_Compensated, 3)*Vir_Compensated;
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <MLX_CalcTemp+0x1a8>)
 80030f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80030fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030fc:	f003 fff6 	bl	80070ec <pow>
 8003100:	0002      	movs	r2, r0
 8003102:	000b      	movs	r3, r1
 8003104:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003106:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003108:	f7fe f842 	bl	8001190 <__aeabi_dmul>
 800310c:	0002      	movs	r2, r0
 800310e:	000b      	movs	r3, r1
 8003110:	62ba      	str	r2, [r7, #40]	; 0x28
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
	double tmp2 = pow(Alpha_Compensated, 4)*TaK4;
 8003114:	2200      	movs	r2, #0
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <MLX_CalcTemp+0x1a4>)
 8003118:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800311a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800311c:	f003 ffe6 	bl	80070ec <pow>
 8003120:	0002      	movs	r2, r0
 8003122:	000b      	movs	r3, r1
 8003124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003128:	f7fe f832 	bl	8001190 <__aeabi_dmul>
 800312c:	0002      	movs	r2, r0
 800312e:	000b      	movs	r3, r1
 8003130:	623a      	str	r2, [r7, #32]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
	double Sx = Ks4*pow(tmp1+tmp2, 1.0/4.0);
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800313c:	f7fd f8b8 	bl	80002b0 <__aeabi_dadd>
 8003140:	0002      	movs	r2, r0
 8003142:	000b      	movs	r3, r1
 8003144:	0010      	movs	r0, r2
 8003146:	0019      	movs	r1, r3
 8003148:	2200      	movs	r2, #0
 800314a:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <MLX_CalcTemp+0x1ac>)
 800314c:	f003 ffce 	bl	80070ec <pow>
 8003150:	0002      	movs	r2, r0
 8003152:	000b      	movs	r3, r1
 8003154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003158:	f7fe f81a 	bl	8001190 <__aeabi_dmul>
 800315c:	0002      	movs	r2, r0
 800315e:	000b      	movs	r3, r1
 8003160:	61ba      	str	r2, [r7, #24]
 8003162:	61fb      	str	r3, [r7, #28]

	// Cálculo To
	double tmp3 = Alpha_Compensated*(1-Ks4*ABSOLUTE_TEMP) + Sx;
 8003164:	4a21      	ldr	r2, [pc, #132]	; (80031ec <MLX_CalcTemp+0x19c>)
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <MLX_CalcTemp+0x1a0>)
 8003168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800316a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800316c:	f7fe f810 	bl	8001190 <__aeabi_dmul>
 8003170:	0002      	movs	r2, r0
 8003172:	000b      	movs	r3, r1
 8003174:	2000      	movs	r0, #0
 8003176:	4922      	ldr	r1, [pc, #136]	; (8003200 <MLX_CalcTemp+0x1b0>)
 8003178:	f7fe fa76 	bl	8001668 <__aeabi_dsub>
 800317c:	0002      	movs	r2, r0
 800317e:	000b      	movs	r3, r1
 8003180:	0010      	movs	r0, r2
 8003182:	0019      	movs	r1, r3
 8003184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003188:	f7fe f802 	bl	8001190 <__aeabi_dmul>
 800318c:	0002      	movs	r2, r0
 800318e:	000b      	movs	r3, r1
 8003190:	69b8      	ldr	r0, [r7, #24]
 8003192:	69f9      	ldr	r1, [r7, #28]
 8003194:	f7fd f88c 	bl	80002b0 <__aeabi_dadd>
 8003198:	0002      	movs	r2, r0
 800319a:	000b      	movs	r3, r1
 800319c:	613a      	str	r2, [r7, #16]
 800319e:	617b      	str	r3, [r7, #20]
	double t0 = pow((Vir_Compensated/tmp3)+TaK4, 0.25) - ABSOLUTE_TEMP;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80031a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80031a8:	f7fd fbec 	bl	8000984 <__aeabi_ddiv>
 80031ac:	0002      	movs	r2, r0
 80031ae:	000b      	movs	r3, r1
 80031b0:	0010      	movs	r0, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	f7fd f87a 	bl	80002b0 <__aeabi_dadd>
 80031bc:	0002      	movs	r2, r0
 80031be:	000b      	movs	r3, r1
 80031c0:	0010      	movs	r0, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <MLX_CalcTemp+0x1ac>)
 80031c8:	f003 ff90 	bl	80070ec <pow>
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <MLX_CalcTemp+0x19c>)
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MLX_CalcTemp+0x1a0>)
 80031d0:	f7fe fa4a 	bl	8001668 <__aeabi_dsub>
 80031d4:	0002      	movs	r2, r0
 80031d6:	000b      	movs	r3, r1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	60fb      	str	r3, [r7, #12]

	return t0;
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	0010      	movs	r0, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b017      	add	sp, #92	; 0x5c
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	66666666 	.word	0x66666666
 80031f0:	40711266 	.word	0x40711266
 80031f4:	40100000 	.word	0x40100000
 80031f8:	40080000 	.word	0x40080000
 80031fc:	3fd00000 	.word	0x3fd00000
 8003200:	3ff00000 	.word	0x3ff00000

08003204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b08b      	sub	sp, #44	; 0x2c
 8003208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	2414      	movs	r4, #20
 800320c:	193b      	adds	r3, r7, r4
 800320e:	0018      	movs	r0, r3
 8003210:	2314      	movs	r3, #20
 8003212:	001a      	movs	r2, r3
 8003214:	2100      	movs	r1, #0
 8003216:	f003 fb42 	bl	800689e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <MX_GPIO_Init+0x14c>)
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0309      	lsls	r1, r1, #12
 8003224:	430a      	orrs	r2, r1
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	4b49      	ldr	r3, [pc, #292]	; (8003350 <MX_GPIO_Init+0x14c>)
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	031b      	lsls	r3, r3, #12
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003236:	4b46      	ldr	r3, [pc, #280]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b45      	ldr	r3, [pc, #276]	; (8003350 <MX_GPIO_Init+0x14c>)
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	03c9      	lsls	r1, r1, #15
 8003240:	430a      	orrs	r2, r1
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	03db      	lsls	r3, r3, #15
 800324c:	4013      	ands	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	0289      	lsls	r1, r1, #10
 800325c:	430a      	orrs	r2, r1
 800325e:	615a      	str	r2, [r3, #20]
 8003260:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <MX_GPIO_Init+0x14c>)
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	02c9      	lsls	r1, r1, #11
 8003278:	430a      	orrs	r2, r1
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <MX_GPIO_Init+0x14c>)
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	02db      	lsls	r3, r3, #11
 8003284:	4013      	ands	r3, r2
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	01db      	lsls	r3, r3, #7
 800328e:	4831      	ldr	r0, [pc, #196]	; (8003354 <MX_GPIO_Init+0x150>)
 8003290:	2200      	movs	r2, #0
 8003292:	0019      	movs	r1, r3
 8003294:	f000 fea4 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|ESP_SPI1_CS_Pin, GPIO_PIN_RESET);
 8003298:	2390      	movs	r3, #144	; 0x90
 800329a:	05db      	lsls	r3, r3, #23
 800329c:	2200      	movs	r2, #0
 800329e:	2118      	movs	r1, #24
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 fe9d 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_SIG1_Pin|ESP_SIG2_Pin|ESP_EN_Pin, GPIO_PIN_RESET);
 80032a6:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <MX_GPIO_Init+0x154>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	2107      	movs	r1, #7
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fe97 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	01d2      	lsls	r2, r2, #7
 80032b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	2201      	movs	r2, #1
 80032be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <MX_GPIO_Init+0x150>)
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f000 fd14 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|ESP_SPI1_CS_Pin;
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	2218      	movs	r2, #24
 80032dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	2201      	movs	r2, #1
 80032e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	193a      	adds	r2, r7, r4
 80032f2:	2390      	movs	r3, #144	; 0x90
 80032f4:	05db      	lsls	r3, r3, #23
 80032f6:	0011      	movs	r1, r2
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 fd01 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ESP_SIG1_Pin|ESP_SIG2_Pin|ESP_EN_Pin;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2201      	movs	r2, #1
 8003308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	193b      	adds	r3, r7, r4
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003316:	193b      	adds	r3, r7, r4
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <MX_GPIO_Init+0x154>)
 800331a:	0019      	movs	r1, r3
 800331c:	0010      	movs	r0, r2
 800331e:	f000 fcef 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003322:	0021      	movs	r1, r4
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2280      	movs	r2, #128	; 0x80
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003338:	187a      	adds	r2, r7, r1
 800333a:	2390      	movs	r3, #144	; 0x90
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f000 fcdd 	bl	8003d00 <HAL_GPIO_Init>

}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b00b      	add	sp, #44	; 0x2c
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	40021000 	.word	0x40021000
 8003354:	48000800 	.word	0x48000800
 8003358:	48000400 	.word	0x48000400

0800335c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <MX_I2C1_Init+0x78>)
 8003364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <MX_I2C1_Init+0x7c>)
 800336a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <MX_I2C1_Init+0x74>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003374:	2201      	movs	r2, #1
 8003376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <MX_I2C1_Init+0x74>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003380:	2200      	movs	r2, #0
 8003382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003386:	2200      	movs	r2, #0
 8003388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <MX_I2C1_Init+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003392:	2200      	movs	r2, #0
 8003394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <MX_I2C1_Init+0x74>)
 8003398:	0018      	movs	r0, r3
 800339a:	f000 fe59 	bl	8004050 <HAL_I2C_Init>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033a2:	f000 f9e5 	bl	8003770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <MX_I2C1_Init+0x74>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	0018      	movs	r0, r3
 80033ac:	f001 fcda 	bl	8004d64 <HAL_I2CEx_ConfigAnalogFilter>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d001      	beq.n	80033b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033b4:	f000 f9dc 	bl	8003770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <MX_I2C1_Init+0x74>)
 80033ba:	2100      	movs	r1, #0
 80033bc:	0018      	movs	r0, r3
 80033be:	f001 fd1d 	bl	8004dfc <HAL_I2CEx_ConfigDigitalFilter>
 80033c2:	1e03      	subs	r3, r0, #0
 80033c4:	d001      	beq.n	80033ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033c6:	f000 f9d3 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200000a4 	.word	0x200000a4
 80033d4:	40005400 	.word	0x40005400
 80033d8:	2010091a 	.word	0x2010091a

080033dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <MX_I2C2_Init+0x74>)
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <MX_I2C2_Init+0x78>)
 80033e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <MX_I2C2_Init+0x74>)
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <MX_I2C2_Init+0x7c>)
 80033ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <MX_I2C2_Init+0x74>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <MX_I2C2_Init+0x74>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <MX_I2C2_Init+0x74>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_I2C2_Init+0x74>)
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <MX_I2C2_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_I2C2_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <MX_I2C2_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_I2C2_Init+0x74>)
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fe19 	bl	8004050 <HAL_I2C_Init>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003422:	f000 f9a5 	bl	8003770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <MX_I2C2_Init+0x74>)
 8003428:	2100      	movs	r1, #0
 800342a:	0018      	movs	r0, r3
 800342c:	f001 fc9a 	bl	8004d64 <HAL_I2CEx_ConfigAnalogFilter>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d001      	beq.n	8003438 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003434:	f000 f99c 	bl	8003770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <MX_I2C2_Init+0x74>)
 800343a:	2100      	movs	r1, #0
 800343c:	0018      	movs	r0, r3
 800343e:	f001 fcdd 	bl	8004dfc <HAL_I2CEx_ConfigDigitalFilter>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d001      	beq.n	800344a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003446:	f000 f993 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200000f0 	.word	0x200000f0
 8003454:	40005800 	.word	0x40005800
 8003458:	20303e5d 	.word	0x20303e5d

0800345c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b08d      	sub	sp, #52	; 0x34
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	241c      	movs	r4, #28
 8003466:	193b      	adds	r3, r7, r4
 8003468:	0018      	movs	r0, r3
 800346a:	2314      	movs	r3, #20
 800346c:	001a      	movs	r2, r3
 800346e:	2100      	movs	r1, #0
 8003470:	f003 fa15 	bl	800689e <memset>
  if(i2cHandle->Instance==I2C1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_I2C_MspInit+0x100>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d132      	bne.n	80034e4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_I2C_MspInit+0x104>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_I2C_MspInit+0x104>)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	02c9      	lsls	r1, r1, #11
 8003488:	430a      	orrs	r2, r1
 800348a:	615a      	str	r2, [r3, #20]
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_I2C_MspInit+0x104>)
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	02db      	lsls	r3, r3, #11
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX_I2C1_SCL_Pin|MLX_I2C1_SDA_Pin;
 800349a:	0021      	movs	r1, r4
 800349c:	187b      	adds	r3, r7, r1
 800349e:	22c0      	movs	r2, #192	; 0xc0
 80034a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	2212      	movs	r2, #18
 80034a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	2203      	movs	r2, #3
 80034b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	2201      	movs	r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_I2C_MspInit+0x108>)
 80034be:	0019      	movs	r1, r3
 80034c0:	0010      	movs	r0, r2
 80034c2:	f000 fc1d 	bl	8003d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0389      	lsls	r1, r1, #14
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	039b      	lsls	r3, r3, #14
 80034dc:	4013      	ands	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80034e2:	e037      	b.n	8003554 <HAL_I2C_MspInit+0xf8>
  else if(i2cHandle->Instance==I2C2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_I2C_MspInit+0x10c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d132      	bne.n	8003554 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	02c9      	lsls	r1, r1, #11
 80034f8:	430a      	orrs	r2, r1
 80034fa:	615a      	str	r2, [r3, #20]
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_I2C_MspInit+0x104>)
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	02db      	lsls	r3, r3, #11
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP_I2C2_SCL_Pin|ESP_I2C2_SDA_Pin;
 800350a:	211c      	movs	r1, #28
 800350c:	187b      	adds	r3, r7, r1
 800350e:	22c0      	movs	r2, #192	; 0xc0
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003514:	187b      	adds	r3, r7, r1
 8003516:	2212      	movs	r2, #18
 8003518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2203      	movs	r2, #3
 8003524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2201      	movs	r2, #1
 800352a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	187b      	adds	r3, r7, r1
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <HAL_I2C_MspInit+0x108>)
 8003530:	0019      	movs	r1, r3
 8003532:	0010      	movs	r0, r2
 8003534:	f000 fbe4 	bl	8003d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_I2C_MspInit+0x104>)
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_I2C_MspInit+0x104>)
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	03c9      	lsls	r1, r1, #15
 8003542:	430a      	orrs	r2, r1
 8003544:	61da      	str	r2, [r3, #28]
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_I2C_MspInit+0x104>)
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	03db      	lsls	r3, r3, #15
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b00d      	add	sp, #52	; 0x34
 800355a:	bd90      	pop	{r4, r7, pc}
 800355c:	40005400 	.word	0x40005400
 8003560:	40021000 	.word	0x40021000
 8003564:	48000400 	.word	0x48000400
 8003568:	40005800 	.word	0x40005800

0800356c <UART_print>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void UART_print(char* format, ...){
 800356c:	b40f      	push	{r0, r1, r2, r3}
 800356e:	b5b0      	push	{r4, r5, r7, lr}
 8003570:	b09c      	sub	sp, #112	; 0x70
 8003572:	af00      	add	r7, sp, #0

	char buffer[100];
	uint8_t size = 0;
 8003574:	246f      	movs	r4, #111	; 0x6f
 8003576:	193b      	adds	r3, r7, r4
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
	buffer[0] = '\0';
 800357c:	2508      	movs	r5, #8
 800357e:	197b      	adds	r3, r7, r5
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]

	va_list argList;

	va_start(argList, format);
 8003584:	2384      	movs	r3, #132	; 0x84
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	607b      	str	r3, [r7, #4]
	size = vsprintf(buffer, format, argList);
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	197b      	adds	r3, r7, r5
 8003594:	0018      	movs	r0, r3
 8003596:	f003 fa5b 	bl	8006a50 <vsiprintf>
 800359a:	0002      	movs	r2, r0
 800359c:	193b      	adds	r3, r7, r4
 800359e:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status =  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, size, 10);
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	236e      	movs	r3, #110	; 0x6e
 80035a8:	18fc      	adds	r4, r7, r3
 80035aa:	1979      	adds	r1, r7, r5
 80035ac:	4806      	ldr	r0, [pc, #24]	; (80035c8 <UART_print+0x5c>)
 80035ae:	230a      	movs	r3, #10
 80035b0:	f002 fd84 	bl	80060bc <HAL_UART_Transmit>
 80035b4:	0003      	movs	r3, r0
 80035b6:	7023      	strb	r3, [r4, #0]

	va_end(argList);

}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b01c      	add	sp, #112	; 0x70
 80035be:	bcb0      	pop	{r4, r5, r7}
 80035c0:	bc08      	pop	{r3}
 80035c2:	b004      	add	sp, #16
 80035c4:	4718      	bx	r3
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	200001a0 	.word	0x200001a0

080035cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b0c7      	sub	sp, #284	; 0x11c
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d2:	f000 fa7d 	bl	8003ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d6:	f000 f867 	bl	80036a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035da:	f7ff fe13 	bl	8003204 <MX_GPIO_Init>
  MX_I2C1_Init();
 80035de:	f7ff febd 	bl	800335c <MX_I2C1_Init>
  MX_I2C2_Init();
 80035e2:	f7ff fefb 	bl	80033dc <MX_I2C2_Init>
  MX_SPI1_Init();
 80035e6:	f000 f8c9 	bl	800377c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80035ea:	f000 f9c9 	bl	8003980 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MLX * mlx = MLX_Init(&hi2c1); //Lê a EEPROM e configura / read eeprom, set configuration and trimming value
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <main+0xc8>)
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fe fd41 	bl	8002078 <MLX_Init>
 80035f6:	0003      	movs	r3, r0
 80035f8:	228a      	movs	r2, #138	; 0x8a
 80035fa:	0052      	lsls	r2, r2, #1
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	6013      	str	r3, [r2, #0]
  int16_t buffer[10] = {0, 1, 2, 3, 30, 60, 70, 150, 200, 255};
 8003600:	1c7b      	adds	r3, r7, #1
 8003602:	33ff      	adds	r3, #255	; 0xff
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <main+0xcc>)
 8003606:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003608:	c313      	stmia	r3!, {r0, r1, r4}
 800360a:	ca03      	ldmia	r2!, {r0, r1}
 800360c:	c303      	stmia	r3!, {r0, r1}
  int16_t IR[64] = {0};
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	0018      	movs	r0, r3
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	001a      	movs	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f003 f940 	bl	800689e <memset>
  int16_t IR_first[32] = {0};
 800361e:	2340      	movs	r3, #64	; 0x40
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	0018      	movs	r0, r3
 8003624:	2340      	movs	r3, #64	; 0x40
 8003626:	001a      	movs	r2, r3
 8003628:	2100      	movs	r1, #0
 800362a:	f003 f938 	bl	800689e <memset>
  int16_t IR_second[32] = {0};
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <main+0xd0>)
 8003630:	228c      	movs	r2, #140	; 0x8c
 8003632:	0052      	lsls	r2, r2, #1
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	0018      	movs	r0, r3
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	001a      	movs	r2, r3
 8003640:	2100      	movs	r1, #0
 8003642:	f003 f92c 	bl	800689e <memset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 // HAL_Delay(50);
	  MLX_read(mlx, IR);
 8003646:	2480      	movs	r4, #128	; 0x80
 8003648:	193a      	adds	r2, r7, r4
 800364a:	238a      	movs	r3, #138	; 0x8a
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0011      	movs	r1, r2
 8003654:	0018      	movs	r0, r3
 8003656:	f7fe ffd5 	bl	8002604 <MLX_read>


	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	01db      	lsls	r3, r3, #7
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <main+0xd4>)
 8003660:	0019      	movs	r1, r3
 8003662:	0010      	movs	r0, r2
 8003664:	f000 fcd9 	bl	800401a <HAL_GPIO_TogglePin>

	  HAL_GPIO_WritePin(ESP_SPI1_CS_GPIO_Port, ESP_SPI1_CS_Pin, RESET);
 8003668:	2390      	movs	r3, #144	; 0x90
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	2200      	movs	r2, #0
 800366e:	2110      	movs	r1, #16
 8003670:	0018      	movs	r0, r3
 8003672:	f000 fcb5 	bl	8003fe0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, IR, 64, 1000);
 8003676:	23fa      	movs	r3, #250	; 0xfa
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	1939      	adds	r1, r7, r4
 800367c:	4809      	ldr	r0, [pc, #36]	; (80036a4 <main+0xd8>)
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	f002 f9fa 	bl	8005a78 <HAL_SPI_Transmit>
	 // HAL_SPI_Transmit(&hspi1, IR_second, 32, 1000);
	  HAL_GPIO_WritePin(ESP_SPI1_CS_GPIO_Port, ESP_SPI1_CS_Pin, SET);
 8003684:	2390      	movs	r3, #144	; 0x90
 8003686:	05db      	lsls	r3, r3, #23
 8003688:	2201      	movs	r2, #1
 800368a:	2110      	movs	r1, #16
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fca7 	bl	8003fe0 <HAL_GPIO_WritePin>
	  MLX_read(mlx, IR);
 8003692:	e7d8      	b.n	8003646 <main+0x7a>
 8003694:	200000a4 	.word	0x200000a4
 8003698:	08008074 	.word	0x08008074
 800369c:	fffffee8 	.word	0xfffffee8
 80036a0:	48000800 	.word	0x48000800
 80036a4:	2000013c 	.word	0x2000013c

080036a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b095      	sub	sp, #84	; 0x54
 80036ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ae:	2420      	movs	r4, #32
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	0018      	movs	r0, r3
 80036b4:	2330      	movs	r3, #48	; 0x30
 80036b6:	001a      	movs	r2, r3
 80036b8:	2100      	movs	r1, #0
 80036ba:	f003 f8f0 	bl	800689e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036be:	2310      	movs	r3, #16
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	0018      	movs	r0, r3
 80036c4:	2310      	movs	r3, #16
 80036c6:	001a      	movs	r2, r3
 80036c8:	2100      	movs	r1, #0
 80036ca:	f003 f8e8 	bl	800689e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036ce:	003b      	movs	r3, r7
 80036d0:	0018      	movs	r0, r3
 80036d2:	2310      	movs	r3, #16
 80036d4:	001a      	movs	r2, r3
 80036d6:	2100      	movs	r1, #0
 80036d8:	f003 f8e1 	bl	800689e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036dc:	0021      	movs	r1, r4
 80036de:	187b      	adds	r3, r7, r1
 80036e0:	2202      	movs	r2, #2
 80036e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2201      	movs	r2, #1
 80036e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2210      	movs	r2, #16
 80036ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	2202      	movs	r2, #2
 80036f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036f6:	187b      	adds	r3, r7, r1
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	22a0      	movs	r2, #160	; 0xa0
 8003700:	0392      	lsls	r2, r2, #14
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2200      	movs	r2, #0
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800370a:	187b      	adds	r3, r7, r1
 800370c:	0018      	movs	r0, r3
 800370e:	f001 fbc1 	bl	8004e94 <HAL_RCC_OscConfig>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003716:	f000 f82b 	bl	8003770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800371a:	2110      	movs	r1, #16
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2207      	movs	r2, #7
 8003720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2202      	movs	r2, #2
 8003726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2101      	movs	r1, #1
 8003738:	0018      	movs	r0, r3
 800373a:	f001 fec5 	bl	80054c8 <HAL_RCC_ClockConfig>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d001      	beq.n	8003746 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003742:	f000 f815 	bl	8003770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003746:	003b      	movs	r3, r7
 8003748:	2221      	movs	r2, #33	; 0x21
 800374a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800374c:	003b      	movs	r3, r7
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003752:	003b      	movs	r3, r7
 8003754:	2210      	movs	r2, #16
 8003756:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003758:	003b      	movs	r3, r7
 800375a:	0018      	movs	r0, r3
 800375c:	f002 f806 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003764:	f000 f804 	bl	8003770 <Error_Handler>
  }
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b015      	add	sp, #84	; 0x54
 800376e:	bd90      	pop	{r4, r7, pc}

08003770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003774:	b672      	cpsid	i
}
 8003776:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003778:	e7fe      	b.n	8003778 <Error_Handler+0x8>
	...

0800377c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <MX_SPI1_Init+0x74>)
 8003782:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <MX_SPI1_Init+0x78>)
 8003784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003786:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <MX_SPI1_Init+0x74>)
 8003788:	2282      	movs	r2, #130	; 0x82
 800378a:	0052      	lsls	r2, r2, #1
 800378c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <MX_SPI1_Init+0x74>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <MX_SPI1_Init+0x74>)
 8003796:	22f0      	movs	r2, #240	; 0xf0
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <MX_SPI1_Init+0x74>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037b2:	2210      	movs	r2, #16
 80037b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037be:	2200      	movs	r2, #0
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037ca:	2207      	movs	r2, #7
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <MX_SPI1_Init+0x74>)
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 f893 	bl	8005908 <HAL_SPI_Init>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d001      	beq.n	80037ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80037e6:	f7ff ffc3 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000013c 	.word	0x2000013c
 80037f4:	40013000 	.word	0x40013000

080037f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b08b      	sub	sp, #44	; 0x2c
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	2414      	movs	r4, #20
 8003802:	193b      	adds	r3, r7, r4
 8003804:	0018      	movs	r0, r3
 8003806:	2314      	movs	r3, #20
 8003808:	001a      	movs	r2, r3
 800380a:	2100      	movs	r1, #0
 800380c:	f003 f847 	bl	800689e <memset>
  if(spiHandle->Instance==SPI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_SPI_MspInit+0x90>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d132      	bne.n	8003880 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800381a:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_SPI_MspInit+0x94>)
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_SPI_MspInit+0x94>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	0149      	lsls	r1, r1, #5
 8003824:	430a      	orrs	r2, r1
 8003826:	619a      	str	r2, [r3, #24]
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_SPI_MspInit+0x94>)
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_SPI_MspInit+0x94>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_SPI_MspInit+0x94>)
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0289      	lsls	r1, r1, #10
 8003840:	430a      	orrs	r2, r1
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_SPI_MspInit+0x94>)
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ESP_SPI1_SCK_Pin|ESP_SPI1_MISO_Pin|ESP_SPI1_MOSI_Pin;
 8003852:	0021      	movs	r1, r4
 8003854:	187b      	adds	r3, r7, r1
 8003856:	22e0      	movs	r2, #224	; 0xe0
 8003858:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	187b      	adds	r3, r7, r1
 800385c:	2202      	movs	r2, #2
 800385e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	187b      	adds	r3, r7, r1
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003866:	187b      	adds	r3, r7, r1
 8003868:	2203      	movs	r2, #3
 800386a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800386c:	187b      	adds	r3, r7, r1
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	187a      	adds	r2, r7, r1
 8003874:	2390      	movs	r3, #144	; 0x90
 8003876:	05db      	lsls	r3, r3, #23
 8003878:	0011      	movs	r1, r2
 800387a:	0018      	movs	r0, r3
 800387c:	f000 fa40 	bl	8003d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b00b      	add	sp, #44	; 0x2c
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	40013000 	.word	0x40013000
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_MspInit+0x44>)
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_MspInit+0x44>)
 800389c:	2101      	movs	r1, #1
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_MspInit+0x44>)
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2201      	movs	r2, #1
 80038a8:	4013      	ands	r3, r2
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_MspInit+0x44>)
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_MspInit+0x44>)
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	0549      	lsls	r1, r1, #21
 80038b8:	430a      	orrs	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_MspInit+0x44>)
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	055b      	lsls	r3, r3, #21
 80038c4:	4013      	ands	r3, r2
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40021000 	.word	0x40021000

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038dc:	e7fe      	b.n	80038dc <NMI_Handler+0x4>

080038de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e2:	e7fe      	b.n	80038e2 <HardFault_Handler+0x4>

080038e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f000 f930 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003910:	4a14      	ldr	r2, [pc, #80]	; (8003964 <_sbrk+0x5c>)
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <_sbrk+0x60>)
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <_sbrk+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <_sbrk+0x64>)
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <_sbrk+0x68>)
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <_sbrk+0x64>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003938:	f002 ff6a 	bl	8006810 <__errno>
 800393c:	0003      	movs	r3, r0
 800393e:	220c      	movs	r2, #12
 8003940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003942:	2301      	movs	r3, #1
 8003944:	425b      	negs	r3, r3
 8003946:	e009      	b.n	800395c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	18d2      	adds	r2, r2, r3
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <_sbrk+0x64>)
 8003958:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b006      	add	sp, #24
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20002000 	.word	0x20002000
 8003968:	00000400 	.word	0x00000400
 800396c:	20000098 	.word	0x20000098
 8003970:	20000238 	.word	0x20000238

08003974 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 8003988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 800398c:	22e1      	movs	r2, #225	; 0xe1
 800398e:	0252      	lsls	r2, r2, #9
 8003990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <MX_USART1_UART_Init+0x58>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f002 fb25 	bl	8006014 <HAL_UART_Init>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039ce:	f7ff fecf 	bl	8003770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200001a0 	.word	0x200001a0
 80039dc:	40013800 	.word	0x40013800

080039e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	2414      	movs	r4, #20
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	0018      	movs	r0, r3
 80039ee:	2314      	movs	r3, #20
 80039f0:	001a      	movs	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f002 ff53 	bl	800689e <memset>
  if(uartHandle->Instance==USART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_UART_MspInit+0x94>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d133      	bne.n	8003a6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	01c9      	lsls	r1, r1, #7
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	619a      	str	r2, [r3, #24]
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0289      	lsls	r1, r1, #10
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	615a      	str	r2, [r3, #20]
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	22c0      	movs	r2, #192	; 0xc0
 8003a3e:	00d2      	lsls	r2, r2, #3
 8003a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	0021      	movs	r1, r4
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	2202      	movs	r2, #2
 8003a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2203      	movs	r2, #3
 8003a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2201      	movs	r2, #1
 8003a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	187a      	adds	r2, r7, r1
 8003a5e:	2390      	movs	r3, #144	; 0x90
 8003a60:	05db      	lsls	r3, r3, #23
 8003a62:	0011      	movs	r1, r2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f94b 	bl	8003d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b00b      	add	sp, #44	; 0x2c
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40021000 	.word	0x40021000

08003a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a7c:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a80:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a82:	490e      	ldr	r1, [pc, #56]	; (8003abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a84:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <LoopForever+0xe>)
  movs r3, #0
 8003a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a88:	e002      	b.n	8003a90 <LoopCopyDataInit>

08003a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8e:	3304      	adds	r3, #4

08003a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a94:	d3f9      	bcc.n	8003a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a98:	4c0b      	ldr	r4, [pc, #44]	; (8003ac8 <LoopForever+0x16>)
  movs r3, #0
 8003a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a9c:	e001      	b.n	8003aa2 <LoopFillZerobss>

08003a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa0:	3204      	adds	r2, #4

08003aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa4:	d3fb      	bcc.n	8003a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003aa6:	f7ff ff65 	bl	8003974 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003aaa:	f002 feb7 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aae:	f7ff fd8d 	bl	80035cc <main>

08003ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ab2:	e7fe      	b.n	8003ab2 <LoopForever>
  ldr   r0, =_estack
 8003ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003abc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003ac0:	08008240 	.word	0x08008240
  ldr r2, =_sbss
 8003ac4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003ac8:	20000238 	.word	0x20000238

08003acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003acc:	e7fe      	b.n	8003acc <ADC1_IRQHandler>
	...

08003ad0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_Init+0x24>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_Init+0x24>)
 8003ada:	2110      	movs	r1, #16
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f000 f809 	bl	8003af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae6:	f7ff fed3 	bl	8003890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40022000 	.word	0x40022000

08003af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <HAL_InitTick+0x5c>)
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <HAL_InitTick+0x60>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	0019      	movs	r1, r3
 8003b0a:	23fa      	movs	r3, #250	; 0xfa
 8003b0c:	0098      	lsls	r0, r3, #2
 8003b0e:	f7fc fb05 	bl	800011c <__udivsi3>
 8003b12:	0003      	movs	r3, r0
 8003b14:	0019      	movs	r1, r3
 8003b16:	0020      	movs	r0, r4
 8003b18:	f7fc fb00 	bl	800011c <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 f8e1 	bl	8003ce6 <HAL_SYSTICK_Config>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e00f      	b.n	8003b4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d80b      	bhi.n	8003b4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	2301      	movs	r3, #1
 8003b36:	425b      	negs	r3, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f8be 	bl	8003cbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_InitTick+0x64>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b003      	add	sp, #12
 8003b52:	bd90      	pop	{r4, r7, pc}
 8003b54:	20000004 	.word	0x20000004
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	20000008 	.word	0x20000008

08003b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_IncTick+0x1c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_IncTick+0x20>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	18d2      	adds	r2, r2, r3
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_IncTick+0x20>)
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	20000224 	.word	0x20000224

08003b84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  return uwTick;
 8003b88:	4b02      	ldr	r3, [pc, #8]	; (8003b94 <HAL_GetTick+0x10>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000224 	.word	0x20000224

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b7f      	cmp	r3, #127	; 0x7f
 8003bac:	d828      	bhi.n	8003c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	33c0      	adds	r3, #192	; 0xc0
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	589b      	ldr	r3, [r3, r2]
 8003bbe:	1dfa      	adds	r2, r7, #7
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	21ff      	movs	r1, #255	; 0xff
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	43d2      	mvns	r2, r2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	401a      	ands	r2, r3
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	2303      	movs	r3, #3
 8003be6:	4003      	ands	r3, r0
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bec:	481f      	ldr	r0, [pc, #124]	; (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	33c0      	adds	r3, #192	; 0xc0
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bfe:	e031      	b.n	8003c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	0019      	movs	r1, r3
 8003c08:	230f      	movs	r3, #15
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	3b08      	subs	r3, #8
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3306      	adds	r3, #6
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	3304      	adds	r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1dfa      	adds	r2, r7, #7
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	2203      	movs	r2, #3
 8003c22:	400a      	ands	r2, r1
 8003c24:	00d2      	lsls	r2, r2, #3
 8003c26:	21ff      	movs	r1, #255	; 0xff
 8003c28:	4091      	lsls	r1, r2
 8003c2a:	000a      	movs	r2, r1
 8003c2c:	43d2      	mvns	r2, r2
 8003c2e:	401a      	ands	r2, r3
 8003c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	401a      	ands	r2, r3
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	2303      	movs	r3, #3
 8003c42:	4003      	ands	r3, r0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c48:	4809      	ldr	r0, [pc, #36]	; (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	001c      	movs	r4, r3
 8003c50:	230f      	movs	r3, #15
 8003c52:	4023      	ands	r3, r4
 8003c54:	3b08      	subs	r3, #8
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	3306      	adds	r3, #6
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	18c3      	adds	r3, r0, r3
 8003c60:	3304      	adds	r3, #4
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b003      	add	sp, #12
 8003c6a:	bd90      	pop	{r4, r7, pc}
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	045b      	lsls	r3, r3, #17
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d301      	bcc.n	8003c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e010      	b.n	8003cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <SysTick_Config+0x44>)
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c94:	2301      	movs	r3, #1
 8003c96:	425b      	negs	r3, r3
 8003c98:	2103      	movs	r1, #3
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ff7c 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SysTick_Config+0x44>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <SysTick_Config+0x44>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b002      	add	sp, #8
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	1c02      	adds	r2, r0, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff ff5d 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff ffbf 	bl	8003c74 <SysTick_Config>
 8003cf6:	0003      	movs	r3, r0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0e:	e14f      	b.n	8003fb0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4091      	lsls	r1, r2
 8003d1a:	000a      	movs	r2, r1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d100      	bne.n	8003d28 <HAL_GPIO_Init+0x28>
 8003d26:	e140      	b.n	8003faa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d005      	beq.n	8003d40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d130      	bne.n	8003da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	0013      	movs	r3, r2
 8003d50:	43da      	mvns	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	0013      	movs	r3, r2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d76:	2201      	movs	r2, #1
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	401a      	ands	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
 8003d94:	0013      	movs	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d017      	beq.n	8003dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d123      	bne.n	8003e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3208      	adds	r2, #8
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	58d3      	ldr	r3, [r2, r3]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	409a      	lsls	r2, r3
 8003e04:	0013      	movs	r3, r2
 8003e06:	43da      	mvns	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2107      	movs	r1, #7
 8003e16:	400b      	ands	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	08da      	lsrs	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	6939      	ldr	r1, [r7, #16]
 8003e30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	0013      	movs	r3, r2
 8003e42:	43da      	mvns	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	401a      	ands	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	0013      	movs	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	23c0      	movs	r3, #192	; 0xc0
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d100      	bne.n	8003e74 <HAL_GPIO_Init+0x174>
 8003e72:	e09a      	b.n	8003faa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e74:	4b54      	ldr	r3, [pc, #336]	; (8003fc8 <HAL_GPIO_Init+0x2c8>)
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_GPIO_Init+0x2c8>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	619a      	str	r2, [r3, #24]
 8003e80:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <HAL_GPIO_Init+0x2c8>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <HAL_GPIO_Init+0x2cc>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	589b      	ldr	r3, [r3, r2]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	2390      	movs	r3, #144	; 0x90
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d013      	beq.n	8003ee2 <HAL_GPIO_Init+0x1e2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00d      	beq.n	8003ede <HAL_GPIO_Init+0x1de>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a43      	ldr	r2, [pc, #268]	; (8003fd4 <HAL_GPIO_Init+0x2d4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <HAL_GPIO_Init+0x1da>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a42      	ldr	r2, [pc, #264]	; (8003fd8 <HAL_GPIO_Init+0x2d8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_GPIO_Init+0x1d6>
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x1e4>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x1e4>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x1e4>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x1e4>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	400a      	ands	r2, r1
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ef4:	4935      	ldr	r1, [pc, #212]	; (8003fcc <HAL_GPIO_Init+0x2cc>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	4013      	ands	r3, r2
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f50:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	035b      	lsls	r3, r3, #13
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f80:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	039b      	lsls	r3, r3, #14
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_GPIO_Init+0x2dc>)
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3301      	adds	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	40da      	lsrs	r2, r3
 8003fb8:	1e13      	subs	r3, r2, #0
 8003fba:	d000      	beq.n	8003fbe <HAL_GPIO_Init+0x2be>
 8003fbc:	e6a8      	b.n	8003d10 <HAL_GPIO_Init+0x10>
  } 
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b006      	add	sp, #24
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	48000400 	.word	0x48000400
 8003fd4:	48000800 	.word	0x48000800
 8003fd8:	48000c00 	.word	0x48000c00
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	0008      	movs	r0, r1
 8003fea:	0011      	movs	r1, r2
 8003fec:	1cbb      	adds	r3, r7, #2
 8003fee:	1c02      	adds	r2, r0, #0
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	1c7b      	adds	r3, r7, #1
 8003ff4:	1c0a      	adds	r2, r1, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ff8:	1c7b      	adds	r3, r7, #1
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004000:	1cbb      	adds	r3, r7, #2
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800400a:	1cbb      	adds	r3, r7, #2
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	000a      	movs	r2, r1
 8004024:	1cbb      	adds	r3, r7, #2
 8004026:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800402e:	1cbb      	adds	r3, r7, #2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	041a      	lsls	r2, r3, #16
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	43db      	mvns	r3, r3
 800403c:	1cb9      	adds	r1, r7, #2
 800403e:	8809      	ldrh	r1, [r1, #0]
 8004040:	400b      	ands	r3, r1
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b004      	add	sp, #16
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e082      	b.n	8004168 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2241      	movs	r2, #65	; 0x41
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	2100      	movs	r1, #0
 8004074:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff f9ef 	bl	800345c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2241      	movs	r2, #65	; 0x41
 8004082:	2124      	movs	r1, #36	; 0x24
 8004084:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	438a      	bics	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_I2C_Init+0x120>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4931      	ldr	r1, [pc, #196]	; (8004174 <HAL_I2C_Init+0x124>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d108      	bne.n	80040ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	0209      	lsls	r1, r1, #8
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	e007      	b.n	80040de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2184      	movs	r1, #132	; 0x84
 80040d8:	0209      	lsls	r1, r1, #8
 80040da:	430a      	orrs	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d104      	bne.n	80040f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	491f      	ldr	r1, [pc, #124]	; (8004178 <HAL_I2C_Init+0x128>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	491a      	ldr	r1, [pc, #104]	; (8004174 <HAL_I2C_Init+0x124>)
 800410c:	400a      	ands	r2, r1
 800410e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	431a      	orrs	r2, r3
 800411a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69d9      	ldr	r1, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	2120      	movs	r1, #32
 8004156:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2242      	movs	r2, #66	; 0x42
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bd80      	pop	{r7, pc}
 8004170:	f0ffffff 	.word	0xf0ffffff
 8004174:	ffff7fff 	.word	0xffff7fff
 8004178:	02008000 	.word	0x02008000

0800417c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	0008      	movs	r0, r1
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	0019      	movs	r1, r3
 800418a:	230a      	movs	r3, #10
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	1c02      	adds	r2, r0, #0
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	2308      	movs	r3, #8
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	1c0a      	adds	r2, r1, #0
 8004198:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2241      	movs	r2, #65	; 0x41
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d000      	beq.n	80041a8 <HAL_I2C_Master_Transmit+0x2c>
 80041a6:	e0e7      	b.n	8004378 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	5c9b      	ldrb	r3, [r3, r2]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2C_Master_Transmit+0x3a>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0e1      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041be:	f7ff fce1 	bl	8003b84 <HAL_GetTick>
 80041c2:	0003      	movs	r3, r0
 80041c4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	0219      	lsls	r1, r3, #8
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2319      	movs	r3, #25
 80041d2:	2201      	movs	r2, #1
 80041d4:	f000 fc5c 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d001      	beq.n	80041e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2241      	movs	r2, #65	; 0x41
 80041e4:	2121      	movs	r1, #33	; 0x21
 80041e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2242      	movs	r2, #66	; 0x42
 80041ec:	2110      	movs	r1, #16
 80041ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2208      	movs	r2, #8
 8004200:	18ba      	adds	r2, r7, r2
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d911      	bls.n	800423a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	b2da      	uxtb	r2, r3
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	045c      	lsls	r4, r3, #17
 8004226:	230a      	movs	r3, #10
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	8819      	ldrh	r1, [r3, #0]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_I2C_Master_Transmit+0x208>)
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	0023      	movs	r3, r4
 8004234:	f000 fd60 	bl	8004cf8 <I2C_TransferConfig>
 8004238:	e075      	b.n	8004326 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	b2da      	uxtb	r2, r3
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	049c      	lsls	r4, r3, #18
 800424e:	230a      	movs	r3, #10
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	8819      	ldrh	r1, [r3, #0]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_I2C_Master_Transmit+0x208>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	0023      	movs	r3, r4
 800425c:	f000 fd4c 	bl	8004cf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004260:	e061      	b.n	8004326 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 fc50 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 800426e:	1e03      	subs	r3, r0, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e081      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d03a      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x1aa>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d136      	bne.n	8004326 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	0013      	movs	r3, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	f000 fbe3 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e053      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2bff      	cmp	r3, #255	; 0xff
 80042da:	d911      	bls.n	8004300 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	22ff      	movs	r2, #255	; 0xff
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	045c      	lsls	r4, r3, #17
 80042ec:	230a      	movs	r3, #10
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	8819      	ldrh	r1, [r3, #0]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	0023      	movs	r3, r4
 80042fa:	f000 fcfd 	bl	8004cf8 <I2C_TransferConfig>
 80042fe:	e012      	b.n	8004326 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	049c      	lsls	r4, r3, #18
 8004314:	230a      	movs	r3, #10
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	8819      	ldrh	r1, [r3, #0]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	0023      	movs	r3, r4
 8004322:	f000 fce9 	bl	8004cf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d198      	bne.n	8004262 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	0018      	movs	r0, r3
 8004338:	f000 fc28 	bl	8004b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e01a      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2220      	movs	r2, #32
 800434a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	490c      	ldr	r1, [pc, #48]	; (8004388 <HAL_I2C_Master_Transmit+0x20c>)
 8004358:	400a      	ands	r2, r1
 800435a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2241      	movs	r2, #65	; 0x41
 8004360:	2120      	movs	r1, #32
 8004362:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2242      	movs	r2, #66	; 0x42
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b007      	add	sp, #28
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	80002000 	.word	0x80002000
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <I2C_RequestMemoryRead2>:
  {
    return HAL_BUSY;
  }
}
static HAL_StatusTypeDef I2C_RequestMemoryRead2(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b087      	sub	sp, #28
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	0008      	movs	r0, r1
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	0019      	movs	r1, r3
 800439a:	240a      	movs	r4, #10
 800439c:	193b      	adds	r3, r7, r4
 800439e:	1c02      	adds	r2, r0, #0
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	2008      	movs	r0, #8
 80043a4:	183b      	adds	r3, r7, r0
 80043a6:	1c0a      	adds	r2, r1, #0
 80043a8:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043aa:	183b      	adds	r3, r7, r0
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	193b      	adds	r3, r7, r4
 80043b2:	8819      	ldrh	r1, [r3, #0]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <I2C_RequestMemoryRead2+0x130>)
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2300      	movs	r3, #0
 80043bc:	f000 fc9c 	bl	8004cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	6a39      	ldr	r1, [r7, #32]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 fba1 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d001      	beq.n	80043d4 <I2C_RequestMemoryRead2+0x48>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e06f      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d4:	2308      	movs	r3, #8
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <I2C_RequestMemoryRead2+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
 80043e8:	e056      	b.n	8004498 <I2C_RequestMemoryRead2+0x10c>
  }
  /* If Memory address size is 16Bit */

  else if (MemAddSize == I2C_MEMADD_SIZE_16BIT)
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d117      	bne.n	8004424 <I2C_RequestMemoryRead2+0x98>
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6a39      	ldr	r1, [r7, #32]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fb7f 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004410:	1e03      	subs	r3, r0, #0
 8004412:	d001      	beq.n	8004418 <I2C_RequestMemoryRead2+0x8c>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e04d      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
    }
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	629a      	str	r2, [r3, #40]	; 0x28
 8004422:	e039      	b.n	8004498 <I2C_RequestMemoryRead2+0x10c>
  }

  else if(MemAddSize == I2C_MEMADD_SIZE_32BIT)
 8004424:	2308      	movs	r3, #8
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d134      	bne.n	8004498 <I2C_RequestMemoryRead2+0x10c>
  {
	  /* Send MSB of Memory Address */
	hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0xFF000000U))) >> 24U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0e1b      	lsrs	r3, r3, #24
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	6a39      	ldr	r1, [r7, #32]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 fb64 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004446:	1e03      	subs	r3, r0, #0
 8004448:	d001      	beq.n	800444e <I2C_RequestMemoryRead2+0xc2>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e032      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x00FF0000U))) >> 16U)));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	b2da      	uxtb	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fb54 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004466:	1e03      	subs	r3, r0, #0
 8004468:	d001      	beq.n	800446e <I2C_RequestMemoryRead2+0xe2>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e022      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x0000FF00U))) >> 8U)));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 fb44 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004486:	1e03      	subs	r3, r0, #0
 8004488:	d001      	beq.n	800448e <I2C_RequestMemoryRead2+0x102>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e012      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x000000FFU))))));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	0013      	movs	r3, r2
 80044a2:	2200      	movs	r2, #0
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	f000 faf3 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80044aa:	1e03      	subs	r3, r0, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_RequestMemoryRead2+0x126>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <I2C_RequestMemoryRead2+0x128>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b005      	add	sp, #20
 80044ba:	bd90      	pop	{r4, r7, pc}
 80044bc:	80002000 	.word	0x80002000

080044c0 <HAL_I2C_Mem_Read2>:


HAL_StatusTypeDef HAL_I2C_Mem_Read2(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	0008      	movs	r0, r1
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	0019      	movs	r1, r3
 80044ce:	230a      	movs	r3, #10
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	1c02      	adds	r2, r0, #0
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	2308      	movs	r3, #8
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	1c0a      	adds	r2, r1, #0
 80044dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2241      	movs	r2, #65	; 0x41
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d000      	beq.n	80044ec <HAL_I2C_Mem_Read2+0x2c>
 80044ea:	e10f      	b.n	800470c <HAL_I2C_Mem_Read2+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <HAL_I2C_Mem_Read2+0x3c>
 80044f2:	232c      	movs	r3, #44	; 0x2c
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_I2C_Mem_Read2+0x48>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e102      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Mem_Read2+0x56>
 8004512:	2302      	movs	r3, #2
 8004514:	e0fb      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	2101      	movs	r1, #1
 800451c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800451e:	f7ff fb31 	bl	8003b84 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	0219      	lsls	r1, r3, #8
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	f000 faac 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read2+0x80>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0e6      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2241      	movs	r2, #65	; 0x41
 8004544:	2122      	movs	r1, #34	; 0x22
 8004546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2242      	movs	r2, #66	; 0x42
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	222c      	movs	r2, #44	; 0x2c
 8004560:	18ba      	adds	r2, r7, r2
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead2(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456c:	2308      	movs	r3, #8
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	881c      	ldrh	r4, [r3, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	230a      	movs	r3, #10
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	8819      	ldrh	r1, [r3, #0]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	0023      	movs	r3, r4
 8004586:	f7ff ff01 	bl	800438c <I2C_RequestMemoryRead2>
 800458a:	1e03      	subs	r3, r0, #0
 800458c:	d005      	beq.n	800459a <HAL_I2C_Mem_Read2+0xda>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0b9      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2bff      	cmp	r3, #255	; 0xff
 80045a2:	d911      	bls.n	80045c8 <HAL_I2C_Mem_Read2+0x108>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	22ff      	movs	r2, #255	; 0xff
 80045a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	045c      	lsls	r4, r3, #17
 80045b4:	230a      	movs	r3, #10
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	8819      	ldrh	r1, [r3, #0]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_I2C_Mem_Read2+0x258>)
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	0023      	movs	r3, r4
 80045c2:	f000 fb99 	bl	8004cf8 <I2C_TransferConfig>
 80045c6:	e012      	b.n	80045ee <HAL_I2C_Mem_Read2+0x12e>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	049c      	lsls	r4, r3, #18
 80045dc:	230a      	movs	r3, #10
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	8819      	ldrh	r1, [r3, #0]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <HAL_I2C_Mem_Read2+0x258>)
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	0023      	movs	r3, r4
 80045ea:	f000 fb85 	bl	8004cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	0013      	movs	r3, r2
 80045f8:	2200      	movs	r2, #0
 80045fa:	2104      	movs	r1, #4
 80045fc:	f000 fa48 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Mem_Read2+0x148>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e082      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03a      	beq.n	80046ba <HAL_I2C_Mem_Read2+0x1fa>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d136      	bne.n	80046ba <HAL_I2C_Mem_Read2+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	0013      	movs	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	f000 fa19 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Mem_Read2+0x1a6>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e053      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2bff      	cmp	r3, #255	; 0xff
 800466e:	d911      	bls.n	8004694 <HAL_I2C_Mem_Read2+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	045c      	lsls	r4, r3, #17
 8004680:	230a      	movs	r3, #10
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	8819      	ldrh	r1, [r3, #0]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	2300      	movs	r3, #0
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	0023      	movs	r3, r4
 800468e:	f000 fb33 	bl	8004cf8 <I2C_TransferConfig>
 8004692:	e012      	b.n	80046ba <HAL_I2C_Mem_Read2+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	049c      	lsls	r4, r3, #18
 80046a8:	230a      	movs	r3, #10
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	8819      	ldrh	r1, [r3, #0]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	0023      	movs	r3, r4
 80046b6:	f000 fb1f 	bl	8004cf8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d194      	bne.n	80045ee <HAL_I2C_Mem_Read2+0x12e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 fa5e 	bl	8004b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Mem_Read2+0x218>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01a      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490c      	ldr	r1, [pc, #48]	; (800471c <HAL_I2C_Mem_Read2+0x25c>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2241      	movs	r2, #65	; 0x41
 80046f4:	2120      	movs	r1, #32
 80046f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2242      	movs	r2, #66	; 0x42
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_I2C_Mem_Read2+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b007      	add	sp, #28
 8004714:	bd90      	pop	{r4, r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	80002400 	.word	0x80002400
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	000c      	movs	r4, r1
 800472a:	0010      	movs	r0, r2
 800472c:	0019      	movs	r1, r3
 800472e:	230a      	movs	r3, #10
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	1c22      	adds	r2, r4, #0
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	2308      	movs	r3, #8
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	1c02      	adds	r2, r0, #0
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	1dbb      	adds	r3, r7, #6
 8004740:	1c0a      	adds	r2, r1, #0
 8004742:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b20      	cmp	r3, #32
 800474e:	d000      	beq.n	8004752 <HAL_I2C_Mem_Read+0x32>
 8004750:	e110      	b.n	8004974 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_I2C_Mem_Read+0x42>
 8004758:	232c      	movs	r3, #44	; 0x2c
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	0092      	lsls	r2, r2, #2
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e103      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	5c9b      	ldrb	r3, [r3, r2]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_I2C_Mem_Read+0x5c>
 8004778:	2302      	movs	r3, #2
 800477a:	e0fc      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2240      	movs	r2, #64	; 0x40
 8004780:	2101      	movs	r1, #1
 8004782:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004784:	f7ff f9fe 	bl	8003b84 <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	0219      	lsls	r1, r3, #8
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2319      	movs	r3, #25
 8004798:	2201      	movs	r2, #1
 800479a:	f000 f979 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800479e:	1e03      	subs	r3, r0, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0e7      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2241      	movs	r2, #65	; 0x41
 80047aa:	2122      	movs	r1, #34	; 0x22
 80047ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2242      	movs	r2, #66	; 0x42
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	222c      	movs	r2, #44	; 0x2c
 80047c6:	18ba      	adds	r2, r7, r2
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881c      	ldrh	r4, [r3, #0]
 80047d6:	2308      	movs	r3, #8
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	881a      	ldrh	r2, [r3, #0]
 80047dc:	230a      	movs	r3, #10
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	8819      	ldrh	r1, [r3, #0]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	0023      	movs	r3, r4
 80047ee:	f000 f8cb 	bl	8004988 <I2C_RequestMemoryRead>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d005      	beq.n	8004802 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2240      	movs	r2, #64	; 0x40
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0b9      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2bff      	cmp	r3, #255	; 0xff
 800480a:	d911      	bls.n	8004830 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	22ff      	movs	r2, #255	; 0xff
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	b2da      	uxtb	r2, r3
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	045c      	lsls	r4, r3, #17
 800481c:	230a      	movs	r3, #10
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	8819      	ldrh	r1, [r3, #0]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	4b56      	ldr	r3, [pc, #344]	; (8004980 <HAL_I2C_Mem_Read+0x260>)
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	0023      	movs	r3, r4
 800482a:	f000 fa65 	bl	8004cf8 <I2C_TransferConfig>
 800482e:	e012      	b.n	8004856 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	b2da      	uxtb	r2, r3
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	049c      	lsls	r4, r3, #18
 8004844:	230a      	movs	r3, #10
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	8819      	ldrh	r1, [r3, #0]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <HAL_I2C_Mem_Read+0x260>)
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0023      	movs	r3, r4
 8004852:	f000 fa51 	bl	8004cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	0013      	movs	r3, r2
 8004860:	2200      	movs	r2, #0
 8004862:	2104      	movs	r1, #4
 8004864:	f000 f914 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e082      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03a      	beq.n	8004922 <HAL_I2C_Mem_Read+0x202>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d136      	bne.n	8004922 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	0013      	movs	r3, r2
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	f000 f8e5 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e053      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2bff      	cmp	r3, #255	; 0xff
 80048d6:	d911      	bls.n	80048fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	22ff      	movs	r2, #255	; 0xff
 80048dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	045c      	lsls	r4, r3, #17
 80048e8:	230a      	movs	r3, #10
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	8819      	ldrh	r1, [r3, #0]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	0023      	movs	r3, r4
 80048f6:	f000 f9ff 	bl	8004cf8 <I2C_TransferConfig>
 80048fa:	e012      	b.n	8004922 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	b2da      	uxtb	r2, r3
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	049c      	lsls	r4, r3, #18
 8004910:	230a      	movs	r3, #10
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	8819      	ldrh	r1, [r3, #0]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	2300      	movs	r3, #0
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	0023      	movs	r3, r4
 800491e:	f000 f9eb 	bl	8004cf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d194      	bne.n	8004856 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	0018      	movs	r0, r3
 8004934:	f000 f92a 	bl	8004b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d001      	beq.n	8004940 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e01a      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	490c      	ldr	r1, [pc, #48]	; (8004984 <HAL_I2C_Mem_Read+0x264>)
 8004954:	400a      	ands	r2, r1
 8004956:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2241      	movs	r2, #65	; 0x41
 800495c:	2120      	movs	r1, #32
 800495e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2242      	movs	r2, #66	; 0x42
 8004964:	2100      	movs	r1, #0
 8004966:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	2100      	movs	r1, #0
 800496e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b007      	add	sp, #28
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	80002400 	.word	0x80002400
 8004984:	fe00e800 	.word	0xfe00e800

08004988 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	000c      	movs	r4, r1
 8004992:	0010      	movs	r0, r2
 8004994:	0019      	movs	r1, r3
 8004996:	250a      	movs	r5, #10
 8004998:	197b      	adds	r3, r7, r5
 800499a:	1c22      	adds	r2, r4, #0
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	2308      	movs	r3, #8
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	1c02      	adds	r2, r0, #0
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	1dbb      	adds	r3, r7, #6
 80049a8:	1c0a      	adds	r2, r1, #0
 80049aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049ac:	1dbb      	adds	r3, r7, #6
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	197b      	adds	r3, r7, r5
 80049b4:	8819      	ldrh	r1, [r3, #0]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <I2C_RequestMemoryRead+0xc0>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2300      	movs	r3, #0
 80049be:	f000 f99b 	bl	8004cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c4:	6a39      	ldr	r1, [r7, #32]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 f8a0 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e033      	b.n	8004a3e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d6:	1dbb      	adds	r3, r7, #6
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d107      	bne.n	80049ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049de:	2308      	movs	r3, #8
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
 80049ec:	e019      	b.n	8004a22 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ee:	2308      	movs	r3, #8
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f881 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e014      	b.n	8004a3e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	2308      	movs	r3, #8
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2140      	movs	r1, #64	; 0x40
 8004a30:	f000 f82e 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d001      	beq.n	8004a3c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bdb0      	pop	{r4, r5, r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	80002000 	.word	0x80002000

08004a4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2201      	movs	r2, #1
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d007      	beq.n	8004a88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2101      	movs	r1, #1
 8004a84:	430a      	orrs	r2, r1
 8004a86:	619a      	str	r2, [r3, #24]
  }
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	e021      	b.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	d01e      	beq.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa8:	f7ff f86c 	bl	8003b84 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2241      	movs	r2, #65	; 0x41
 8004ace:	2120      	movs	r1, #32
 8004ad0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2242      	movs	r2, #66	; 0x42
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	2100      	movs	r1, #0
 8004ae0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e00f      	b.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	425a      	negs	r2, r3
 8004af6:	4153      	adcs	r3, r2
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	001a      	movs	r2, r3
 8004afc:	1dfb      	adds	r3, r7, #7
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d0ce      	beq.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b004      	add	sp, #16
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b1a:	e02b      	b.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 f86e 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e029      	b.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3301      	adds	r3, #1
 8004b34:	d01e      	beq.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7ff f825 	bl	8003b84 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	2220      	movs	r2, #32
 8004b52:	431a      	orrs	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2241      	movs	r2, #65	; 0x41
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2242      	movs	r2, #66	; 0x42
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e007      	b.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d1cc      	bne.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b98:	e028      	b.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f82f 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e026      	b.n	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7fe ffe9 	bl	8003b84 <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d113      	bne.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc8:	2220      	movs	r2, #32
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2241      	movs	r2, #65	; 0x41
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2242      	movs	r2, #66	; 0x42
 8004bdc:	2100      	movs	r1, #0
 8004bde:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2240      	movs	r2, #64	; 0x40
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e007      	b.n	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d1cf      	bne.n	8004b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b004      	add	sp, #16
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2210      	movs	r2, #16
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d164      	bne.n	8004ce8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	049b      	lsls	r3, r3, #18
 8004c28:	401a      	ands	r2, r3
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	049b      	lsls	r3, r3, #18
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d02b      	beq.n	8004c8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	01c9      	lsls	r1, r1, #7
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c44:	e021      	b.n	8004c8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d01e      	beq.n	8004c8a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fe ff9a 	bl	8003b84 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_IsAcknowledgeFailed+0x5e>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d113      	bne.n	8004c8a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	2220      	movs	r2, #32
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2241      	movs	r2, #65	; 0x41
 8004c72:	2120      	movs	r1, #32
 8004c74:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2242      	movs	r2, #66	; 0x42
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	2100      	movs	r1, #0
 8004c84:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e02f      	b.n	8004cea <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2220      	movs	r2, #32
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d1d6      	bne.n	8004c46 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff fece 	bl	8004a4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <I2C_IsAcknowledgeFailed+0xf0>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2241      	movs	r2, #65	; 0x41
 8004cd0:	2120      	movs	r1, #32
 8004cd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2242      	movs	r2, #66	; 0x42
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	fe00e800 	.word	0xfe00e800

08004cf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	0008      	movs	r0, r1
 8004d02:	0011      	movs	r1, r2
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	240a      	movs	r4, #10
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	1c02      	adds	r2, r0, #0
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	2009      	movs	r0, #9
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	1c0a      	adds	r2, r1, #0
 8004d14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	0d51      	lsrs	r1, r2, #21
 8004d20:	2280      	movs	r2, #128	; 0x80
 8004d22:	00d2      	lsls	r2, r2, #3
 8004d24:	400a      	ands	r2, r1
 8004d26:	490e      	ldr	r1, [pc, #56]	; (8004d60 <I2C_TransferConfig+0x68>)
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	43d2      	mvns	r2, r2
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	0011      	movs	r1, r2
 8004d30:	193b      	adds	r3, r7, r4
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	0d9a      	lsrs	r2, r3, #22
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	0418      	lsls	r0, r3, #16
 8004d3e:	23ff      	movs	r3, #255	; 0xff
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	4003      	ands	r3, r0
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b005      	add	sp, #20
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	03ff63ff 	.word	0x03ff63ff

08004d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2241      	movs	r2, #65	; 0x41
 8004d72:	5c9b      	ldrb	r3, [r3, r2]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d138      	bne.n	8004dec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2240      	movs	r2, #64	; 0x40
 8004d7e:	5c9b      	ldrb	r3, [r3, r2]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e032      	b.n	8004dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2241      	movs	r2, #65	; 0x41
 8004d94:	2124      	movs	r1, #36	; 0x24
 8004d96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2101      	movs	r1, #1
 8004da4:	438a      	bics	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4911      	ldr	r1, [pc, #68]	; (8004df8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2241      	movs	r2, #65	; 0x41
 8004ddc:	2120      	movs	r1, #32
 8004dde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b002      	add	sp, #8
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	ffffefff 	.word	0xffffefff

08004dfc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2241      	movs	r2, #65	; 0x41
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d139      	bne.n	8004e86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	5c9b      	ldrb	r3, [r3, r2]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e033      	b.n	8004e88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2241      	movs	r2, #65	; 0x41
 8004e2c:	2124      	movs	r1, #36	; 0x24
 8004e2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2241      	movs	r2, #65	; 0x41
 8004e76:	2120      	movs	r1, #32
 8004e78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2240      	movs	r2, #64	; 0x40
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b004      	add	sp, #16
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	fffff0ff 	.word	0xfffff0ff

08004e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e301      	b.n	80054aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	d100      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x1e>
 8004eb0:	e08d      	b.n	8004fce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004eb2:	4bc3      	ldr	r3, [pc, #780]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	220c      	movs	r2, #12
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d00e      	beq.n	8004edc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ebe:	4bc0      	ldr	r3, [pc, #768]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	220c      	movs	r2, #12
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x64>
 8004eca:	4bbd      	ldr	r3, [pc, #756]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	025b      	lsls	r3, r3, #9
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4bb8      	ldr	r3, [pc, #736]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d100      	bne.n	8004eea <HAL_RCC_OscConfig+0x56>
 8004ee8:	e070      	b.n	8004fcc <HAL_RCC_OscConfig+0x138>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d000      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x60>
 8004ef2:	e06b      	b.n	8004fcc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e2d8      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x7c>
 8004f00:	4baf      	ldr	r3, [pc, #700]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4bae      	ldr	r3, [pc, #696]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	0249      	lsls	r1, r1, #9
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e02f      	b.n	8004f70 <HAL_RCC_OscConfig+0xdc>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <HAL_RCC_OscConfig+0x9e>
 8004f18:	4ba9      	ldr	r3, [pc, #676]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4ba8      	ldr	r3, [pc, #672]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f1e:	49a9      	ldr	r1, [pc, #676]	; (80051c4 <HAL_RCC_OscConfig+0x330>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4ba6      	ldr	r3, [pc, #664]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f2a:	49a7      	ldr	r1, [pc, #668]	; (80051c8 <HAL_RCC_OscConfig+0x334>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e01e      	b.n	8004f70 <HAL_RCC_OscConfig+0xdc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d10e      	bne.n	8004f58 <HAL_RCC_OscConfig+0xc4>
 8004f3a:	4ba1      	ldr	r3, [pc, #644]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	02c9      	lsls	r1, r1, #11
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	4b9d      	ldr	r3, [pc, #628]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b9c      	ldr	r3, [pc, #624]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	0249      	lsls	r1, r1, #9
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e00b      	b.n	8004f70 <HAL_RCC_OscConfig+0xdc>
 8004f58:	4b99      	ldr	r3, [pc, #612]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b98      	ldr	r3, [pc, #608]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f5e:	4999      	ldr	r1, [pc, #612]	; (80051c4 <HAL_RCC_OscConfig+0x330>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	4b96      	ldr	r3, [pc, #600]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b95      	ldr	r3, [pc, #596]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	4997      	ldr	r1, [pc, #604]	; (80051c8 <HAL_RCC_OscConfig+0x334>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d014      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fe fe04 	bl	8003b84 <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f82:	f7fe fdff 	bl	8003b84 <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b64      	cmp	r3, #100	; 0x64
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e28a      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f94:	4b8a      	ldr	r3, [pc, #552]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	029b      	lsls	r3, r3, #10
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0xee>
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fdef 	bl	8003b84 <HAL_GetTick>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fe fdea 	bl	8003b84 <HAL_GetTick>
 8004fb0:	0002      	movs	r2, r0
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e275      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	4b80      	ldr	r3, [pc, #512]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x118>
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d100      	bne.n	8004fda <HAL_RCC_OscConfig+0x146>
 8004fd8:	e069      	b.n	80050ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fda:	4b79      	ldr	r3, [pc, #484]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	220c      	movs	r2, #12
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fe4:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	220c      	movs	r2, #12
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d11c      	bne.n	800502a <HAL_RCC_OscConfig+0x196>
 8004ff0:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	025b      	lsls	r3, r3, #9
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d116      	bne.n	800502a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffc:	4b70      	ldr	r3, [pc, #448]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	4013      	ands	r3, r2
 8005004:	d005      	beq.n	8005012 <HAL_RCC_OscConfig+0x17e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e24b      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b6b      	ldr	r3, [pc, #428]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22f8      	movs	r2, #248	; 0xf8
 8005018:	4393      	bics	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	00da      	lsls	r2, r3, #3
 8005022:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005028:	e041      	b.n	80050ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d024      	beq.n	800507c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005032:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005038:	2101      	movs	r1, #1
 800503a:	430a      	orrs	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fe fda1 	bl	8003b84 <HAL_GetTick>
 8005042:	0003      	movs	r3, r0
 8005044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005048:	f7fe fd9c 	bl	8003b84 <HAL_GetTick>
 800504c:	0002      	movs	r2, r0
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e227      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2202      	movs	r2, #2
 8005060:	4013      	ands	r3, r2
 8005062:	d0f1      	beq.n	8005048 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005064:	4b56      	ldr	r3, [pc, #344]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	22f8      	movs	r2, #248	; 0xf8
 800506a:	4393      	bics	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00da      	lsls	r2, r3, #3
 8005074:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e018      	b.n	80050ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507c:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b4f      	ldr	r3, [pc, #316]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005082:	2101      	movs	r1, #1
 8005084:	438a      	bics	r2, r1
 8005086:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005088:	f7fe fd7c 	bl	8003b84 <HAL_GetTick>
 800508c:	0003      	movs	r3, r0
 800508e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005092:	f7fe fd77 	bl	8003b84 <HAL_GetTick>
 8005096:	0002      	movs	r2, r0
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e202      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a4:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2202      	movs	r2, #2
 80050aa:	4013      	ands	r3, r2
 80050ac:	d1f1      	bne.n	8005092 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2208      	movs	r2, #8
 80050b4:	4013      	ands	r3, r2
 80050b6:	d036      	beq.n	8005126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d019      	beq.n	80050f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c0:	4b3f      	ldr	r3, [pc, #252]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050c6:	2101      	movs	r1, #1
 80050c8:	430a      	orrs	r2, r1
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050cc:	f7fe fd5a 	bl	8003b84 <HAL_GetTick>
 80050d0:	0003      	movs	r3, r0
 80050d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fe fd55 	bl	8003b84 <HAL_GetTick>
 80050da:	0002      	movs	r2, r0
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e1e0      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e8:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2202      	movs	r2, #2
 80050ee:	4013      	ands	r3, r2
 80050f0:	d0f1      	beq.n	80050d6 <HAL_RCC_OscConfig+0x242>
 80050f2:	e018      	b.n	8005126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f4:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80050fa:	2101      	movs	r1, #1
 80050fc:	438a      	bics	r2, r1
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fe fd40 	bl	8003b84 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510a:	f7fe fd3b 	bl	8003b84 <HAL_GetTick>
 800510e:	0002      	movs	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1c6      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2202      	movs	r2, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d1f1      	bne.n	800510a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2204      	movs	r2, #4
 800512c:	4013      	ands	r3, r2
 800512e:	d100      	bne.n	8005132 <HAL_RCC_OscConfig+0x29e>
 8005130:	e0b4      	b.n	800529c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005132:	201f      	movs	r0, #31
 8005134:	183b      	adds	r3, r7, r0
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	055b      	lsls	r3, r3, #21
 8005142:	4013      	ands	r3, r2
 8005144:	d110      	bne.n	8005168 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 800514c:	2180      	movs	r1, #128	; 0x80
 800514e:	0549      	lsls	r1, r1, #21
 8005150:	430a      	orrs	r2, r1
 8005152:	61da      	str	r2, [r3, #28]
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	055b      	lsls	r3, r3, #21
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005162:	183b      	adds	r3, r7, r0
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_RCC_OscConfig+0x338>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4013      	ands	r3, r2
 8005172:	d11a      	bne.n	80051aa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_RCC_OscConfig+0x338>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <HAL_RCC_OscConfig+0x338>)
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	0049      	lsls	r1, r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005182:	f7fe fcff 	bl	8003b84 <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518c:	f7fe fcfa 	bl	8003b84 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e185      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_OscConfig+0x338>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10e      	bne.n	80051d0 <HAL_RCC_OscConfig+0x33c>
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <HAL_RCC_OscConfig+0x32c>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	621a      	str	r2, [r3, #32]
 80051be:	e035      	b.n	800522c <HAL_RCC_OscConfig+0x398>
 80051c0:	40021000 	.word	0x40021000
 80051c4:	fffeffff 	.word	0xfffeffff
 80051c8:	fffbffff 	.word	0xfffbffff
 80051cc:	40007000 	.word	0x40007000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCC_OscConfig+0x35e>
 80051d8:	4bb6      	ldr	r3, [pc, #728]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	4bb5      	ldr	r3, [pc, #724]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80051de:	2101      	movs	r1, #1
 80051e0:	438a      	bics	r2, r1
 80051e2:	621a      	str	r2, [r3, #32]
 80051e4:	4bb3      	ldr	r3, [pc, #716]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	4bb2      	ldr	r3, [pc, #712]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80051ea:	2104      	movs	r1, #4
 80051ec:	438a      	bics	r2, r1
 80051ee:	621a      	str	r2, [r3, #32]
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x398>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x380>
 80051fa:	4bae      	ldr	r3, [pc, #696]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	4bad      	ldr	r3, [pc, #692]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005200:	2104      	movs	r1, #4
 8005202:	430a      	orrs	r2, r1
 8005204:	621a      	str	r2, [r3, #32]
 8005206:	4bab      	ldr	r3, [pc, #684]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	4baa      	ldr	r3, [pc, #680]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800520c:	2101      	movs	r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	621a      	str	r2, [r3, #32]
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x398>
 8005214:	4ba7      	ldr	r3, [pc, #668]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	4ba6      	ldr	r3, [pc, #664]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	621a      	str	r2, [r3, #32]
 8005220:	4ba4      	ldr	r3, [pc, #656]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	4ba3      	ldr	r3, [pc, #652]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005226:	2104      	movs	r1, #4
 8005228:	438a      	bics	r2, r1
 800522a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fe fca6 	bl	8003b84 <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523c:	e009      	b.n	8005252 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fe fca1 	bl	8003b84 <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a9b      	ldr	r2, [pc, #620]	; (80054b8 <HAL_RCC_OscConfig+0x624>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e12b      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	4b98      	ldr	r3, [pc, #608]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x3aa>
 800525c:	e013      	b.n	8005286 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fe fc91 	bl	8003b84 <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005266:	e009      	b.n	800527c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fe fc8c 	bl	8003b84 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a91      	ldr	r2, [pc, #580]	; (80054b8 <HAL_RCC_OscConfig+0x624>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e116      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527c:	4b8d      	ldr	r3, [pc, #564]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005286:	231f      	movs	r3, #31
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	4b87      	ldr	r3, [pc, #540]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005296:	4989      	ldr	r1, [pc, #548]	; (80054bc <HAL_RCC_OscConfig+0x628>)
 8005298:	400a      	ands	r2, r1
 800529a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	4013      	ands	r3, r2
 80052a4:	d063      	beq.n	800536e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d12a      	bne.n	8005304 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	4b80      	ldr	r3, [pc, #512]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052b4:	2104      	movs	r1, #4
 80052b6:	430a      	orrs	r2, r1
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80052ba:	4b7e      	ldr	r3, [pc, #504]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052c0:	2101      	movs	r1, #1
 80052c2:	430a      	orrs	r2, r1
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fe fc5d 	bl	8003b84 <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80052d0:	f7fe fc58 	bl	8003b84 <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0e3      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052e2:	4b74      	ldr	r3, [pc, #464]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	2202      	movs	r2, #2
 80052e8:	4013      	ands	r3, r2
 80052ea:	d0f1      	beq.n	80052d0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052ec:	4b71      	ldr	r3, [pc, #452]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	22f8      	movs	r2, #248	; 0xf8
 80052f2:	4393      	bics	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	4b6d      	ldr	r3, [pc, #436]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
 8005302:	e034      	b.n	800536e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	3305      	adds	r3, #5
 800530a:	d111      	bne.n	8005330 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800530c:	4b69      	ldr	r3, [pc, #420]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005312:	2104      	movs	r1, #4
 8005314:	438a      	bics	r2, r1
 8005316:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005318:	4b66      	ldr	r3, [pc, #408]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	22f8      	movs	r2, #248	; 0xf8
 800531e:	4393      	bics	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	00da      	lsls	r2, r3, #3
 8005328:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800532a:	430a      	orrs	r2, r1
 800532c:	635a      	str	r2, [r3, #52]	; 0x34
 800532e:	e01e      	b.n	800536e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005330:	4b60      	ldr	r3, [pc, #384]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005334:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005336:	2104      	movs	r1, #4
 8005338:	430a      	orrs	r2, r1
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800533c:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	4b5c      	ldr	r3, [pc, #368]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005342:	2101      	movs	r1, #1
 8005344:	438a      	bics	r2, r1
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fe fc1c 	bl	8003b84 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005352:	f7fe fc17 	bl	8003b84 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0a2      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005364:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d1f1      	bne.n	8005352 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d100      	bne.n	8005378 <HAL_RCC_OscConfig+0x4e4>
 8005376:	e097      	b.n	80054a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005378:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	220c      	movs	r2, #12
 800537e:	4013      	ands	r3, r2
 8005380:	2b08      	cmp	r3, #8
 8005382:	d100      	bne.n	8005386 <HAL_RCC_OscConfig+0x4f2>
 8005384:	e06b      	b.n	800545e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d14c      	bne.n	8005428 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005394:	494a      	ldr	r1, [pc, #296]	; (80054c0 <HAL_RCC_OscConfig+0x62c>)
 8005396:	400a      	ands	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fe fbf3 	bl	8003b84 <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fe fbee 	bl	8003b84 <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e079      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	049b      	lsls	r3, r3, #18
 80053be:	4013      	ands	r3, r2
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	220f      	movs	r2, #15
 80053c8:	4393      	bics	r3, r2
 80053ca:	0019      	movs	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053d2:	430a      	orrs	r2, r1
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4a3a      	ldr	r2, [pc, #232]	; (80054c4 <HAL_RCC_OscConfig+0x630>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	0449      	lsls	r1, r1, #17
 80053fa:	430a      	orrs	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fe:	f7fe fbc1 	bl	8003b84 <HAL_GetTick>
 8005402:	0003      	movs	r3, r0
 8005404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005408:	f7fe fbbc 	bl	8003b84 <HAL_GetTick>
 800540c:	0002      	movs	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e047      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800541a:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	049b      	lsls	r3, r3, #18
 8005422:	4013      	ands	r3, r2
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x574>
 8005426:	e03f      	b.n	80054a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800542e:	4924      	ldr	r1, [pc, #144]	; (80054c0 <HAL_RCC_OscConfig+0x62c>)
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fe fba6 	bl	8003b84 <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543e:	f7fe fba1 	bl	8003b84 <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e02c      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	049b      	lsls	r3, r3, #18
 8005458:	4013      	ands	r3, r2
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x5aa>
 800545c:	e024      	b.n	80054a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e01f      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005470:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <HAL_RCC_OscConfig+0x620>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	429a      	cmp	r2, r3
 8005484:	d10e      	bne.n	80054a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	220f      	movs	r2, #15
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	23f0      	movs	r3, #240	; 0xf0
 8005498:	039b      	lsls	r3, r3, #14
 800549a:	401a      	ands	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b008      	add	sp, #32
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40021000 	.word	0x40021000
 80054b8:	00001388 	.word	0x00001388
 80054bc:	efffffff 	.word	0xefffffff
 80054c0:	feffffff 	.word	0xfeffffff
 80054c4:	ffc2ffff 	.word	0xffc2ffff

080054c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0b3      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	4013      	ands	r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d911      	bls.n	800550e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	4393      	bics	r3, r2
 80054f2:	0019      	movs	r1, r3
 80054f4:	4b55      	ldr	r3, [pc, #340]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	4013      	ands	r3, r2
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d001      	beq.n	800550e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e09a      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2202      	movs	r2, #2
 8005514:	4013      	ands	r3, r2
 8005516:	d015      	beq.n	8005544 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2204      	movs	r2, #4
 800551e:	4013      	ands	r3, r2
 8005520:	d006      	beq.n	8005530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005522:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005528:	21e0      	movs	r1, #224	; 0xe0
 800552a:	00c9      	lsls	r1, r1, #3
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	22f0      	movs	r2, #240	; 0xf0
 8005536:	4393      	bics	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	4b44      	ldr	r3, [pc, #272]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	4013      	ands	r3, r2
 8005560:	d114      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e06e      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b38      	ldr	r3, [pc, #224]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	049b      	lsls	r3, r3, #18
 8005576:	4013      	ands	r3, r2
 8005578:	d108      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e062      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b34      	ldr	r3, [pc, #208]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2202      	movs	r2, #2
 8005584:	4013      	ands	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e05b      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2203      	movs	r2, #3
 8005592:	4393      	bics	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fe faf0 	bl	8003b84 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a8:	e009      	b.n	80055be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055aa:	f7fe faeb 	bl	8003b84 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_RCC_ClockConfig+0x18c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e042      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	220c      	movs	r2, #12
 80055c4:	401a      	ands	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1ec      	bne.n	80055aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2201      	movs	r2, #1
 80055d6:	4013      	ands	r3, r2
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d211      	bcs.n	8005602 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4393      	bics	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	4b18      	ldr	r3, [pc, #96]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e020      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	d009      	beq.n	8005620 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <HAL_RCC_ClockConfig+0x190>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005620:	f000 f820 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8005624:	0001      	movs	r1, r0
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	220f      	movs	r2, #15
 800562e:	4013      	ands	r3, r2
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x194>)
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	000a      	movs	r2, r1
 8005636:	40da      	lsrs	r2, r3
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x198>)
 800563a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800563c:	2003      	movs	r0, #3
 800563e:	f7fe fa5b 	bl	8003af8 <HAL_InitTick>
  
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	00001388 	.word	0x00001388
 8005658:	fffff8ff 	.word	0xfffff8ff
 800565c:	080081ac 	.word	0x080081ac
 8005660:	20000004 	.word	0x20000004

08005664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b08f      	sub	sp, #60	; 0x3c
 8005668:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800566a:	2314      	movs	r3, #20
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	4a2b      	ldr	r2, [pc, #172]	; (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005672:	c313      	stmia	r3!, {r0, r1, r4}
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	4a29      	ldr	r2, [pc, #164]	; (8005720 <HAL_RCC_GetSysClockFreq+0xbc>)
 800567c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800567e:	c313      	stmia	r3!, {r0, r1, r4}
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005688:	2300      	movs	r3, #0
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	220c      	movs	r2, #12
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d002      	beq.n	80056ae <HAL_RCC_GetSysClockFreq+0x4a>
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d003      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x50>
 80056ac:	e02d      	b.n	800570a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056b2:	e02d      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	0c9b      	lsrs	r3, r3, #18
 80056b8:	220f      	movs	r2, #15
 80056ba:	4013      	ands	r3, r2
 80056bc:	2214      	movs	r2, #20
 80056be:	18ba      	adds	r2, r7, r2
 80056c0:	5cd3      	ldrb	r3, [r2, r3]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	220f      	movs	r2, #15
 80056ca:	4013      	ands	r3, r2
 80056cc:	1d3a      	adds	r2, r7, #4
 80056ce:	5cd3      	ldrb	r3, [r2, r3]
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	025b      	lsls	r3, r3, #9
 80056d8:	4013      	ands	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056de:	4812      	ldr	r0, [pc, #72]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056e0:	f7fa fd1c 	bl	800011c <__udivsi3>
 80056e4:	0003      	movs	r3, r0
 80056e6:	001a      	movs	r2, r3
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	4353      	muls	r3, r2
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	e009      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f2:	000a      	movs	r2, r1
 80056f4:	0152      	lsls	r2, r2, #5
 80056f6:	1a52      	subs	r2, r2, r1
 80056f8:	0193      	lsls	r3, r2, #6
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	185b      	adds	r3, r3, r1
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005708:	e002      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 800570c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800570e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b00f      	add	sp, #60	; 0x3c
 8005718:	bd90      	pop	{r4, r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	08008088 	.word	0x08008088
 8005720:	08008098 	.word	0x08008098
 8005724:	40021000 	.word	0x40021000
 8005728:	007a1200 	.word	0x007a1200

0800572c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <HAL_RCC_GetHCLKFreq+0x10>)
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	20000004 	.word	0x20000004

08005740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005744:	f7ff fff2 	bl	800572c <HAL_RCC_GetHCLKFreq>
 8005748:	0001      	movs	r1, r0
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	2207      	movs	r2, #7
 8005752:	4013      	ands	r3, r2
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	40d9      	lsrs	r1, r3
 800575a:	000b      	movs	r3, r1
}    
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	40021000 	.word	0x40021000
 8005768:	080081bc 	.word	0x080081bc

0800576c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	025b      	lsls	r3, r3, #9
 8005784:	4013      	ands	r3, r2
 8005786:	d100      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005788:	e08e      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800578a:	2017      	movs	r0, #23
 800578c:	183b      	adds	r3, r7, r0
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005792:	4b57      	ldr	r3, [pc, #348]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	055b      	lsls	r3, r3, #21
 800579a:	4013      	ands	r3, r2
 800579c:	d110      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	4b54      	ldr	r3, [pc, #336]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	0549      	lsls	r1, r1, #21
 80057a8:	430a      	orrs	r2, r1
 80057aa:	61da      	str	r2, [r3, #28]
 80057ac:	4b50      	ldr	r3, [pc, #320]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	055b      	lsls	r3, r3, #21
 80057b4:	4013      	ands	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c0:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	d11a      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057cc:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	0049      	lsls	r1, r1, #1
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fe f9d3 	bl	8003b84 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e2:	e008      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e4:	f7fe f9ce 	bl	8003b84 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e077      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f6:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4013      	ands	r3, r2
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	23c0      	movs	r3, #192	; 0xc0
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4013      	ands	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d034      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	23c0      	movs	r3, #192	; 0xc0
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4013      	ands	r3, r2
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d02c      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005824:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800582a:	4013      	ands	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800582e:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	0249      	lsls	r1, r1, #9
 8005838:	430a      	orrs	r2, r1
 800583a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800583c:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005842:	492e      	ldr	r1, [pc, #184]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005844:	400a      	ands	r2, r1
 8005846:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005848:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	4013      	ands	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fe f995 	bl	8003b84 <HAL_GetTick>
 800585a:	0003      	movs	r3, r0
 800585c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585e:	e009      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fe f990 	bl	8003b84 <HAL_GetTick>
 8005864:	0002      	movs	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e038      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	2202      	movs	r2, #2
 800587a:	4013      	ands	r3, r2
 800587c:	d0f0      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005884:	4013      	ands	r3, r2
 8005886:	0019      	movs	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800588e:	430a      	orrs	r2, r1
 8005890:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005892:	2317      	movs	r3, #23
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d105      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058a2:	4918      	ldr	r1, [pc, #96]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80058a4:	400a      	ands	r2, r1
 80058a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	2203      	movs	r2, #3
 80058b8:	4393      	bics	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058c2:	430a      	orrs	r2, r1
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2220      	movs	r2, #32
 80058cc:	4013      	ands	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	2210      	movs	r2, #16
 80058d6:	4393      	bics	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058e0:	430a      	orrs	r2, r1
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b006      	add	sp, #24
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40007000 	.word	0x40007000
 80058f8:	fffffcff 	.word	0xfffffcff
 80058fc:	fffeffff 	.word	0xfffeffff
 8005900:	00001388 	.word	0x00001388
 8005904:	efffffff 	.word	0xefffffff

08005908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0a8      	b.n	8005a6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	2382      	movs	r3, #130	; 0x82
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	d009      	beq.n	8005942 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	61da      	str	r2, [r3, #28]
 8005934:	e005      	b.n	8005942 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	225d      	movs	r2, #93	; 0x5d
 800594c:	5c9b      	ldrb	r3, [r3, r2]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	225c      	movs	r2, #92	; 0x5c
 8005958:	2100      	movs	r1, #0
 800595a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0018      	movs	r0, r3
 8005960:	f7fd ff4a 	bl	80037f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	225d      	movs	r2, #93	; 0x5d
 8005968:	2102      	movs	r1, #2
 800596a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	438a      	bics	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	23e0      	movs	r3, #224	; 0xe0
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	429a      	cmp	r2, r3
 8005986:	d902      	bls.n	800598e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e002      	b.n	8005994 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	23f0      	movs	r3, #240	; 0xf0
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	429a      	cmp	r2, r3
 800599e:	d008      	beq.n	80059b2 <HAL_SPI_Init+0xaa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	23e0      	movs	r3, #224	; 0xe0
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	2382      	movs	r3, #130	; 0x82
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	401a      	ands	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	2384      	movs	r3, #132	; 0x84
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	400b      	ands	r3, r1
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2102      	movs	r1, #2
 80059ce:	400b      	ands	r3, r1
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2101      	movs	r1, #1
 80059d8:	400b      	ands	r3, r1
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6999      	ldr	r1, [r3, #24]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	400b      	ands	r3, r1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2138      	movs	r1, #56	; 0x38
 80059ee:	400b      	ands	r3, r1
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	400b      	ands	r3, r1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	0011      	movs	r1, r2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	401a      	ands	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	2204      	movs	r2, #4
 8005a18:	401a      	ands	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2110      	movs	r1, #16
 8005a20:	400b      	ands	r3, r1
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	2108      	movs	r1, #8
 8005a2a:	400b      	ands	r3, r1
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	23f0      	movs	r3, #240	; 0xf0
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	400b      	ands	r3, r1
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	0011      	movs	r1, r2
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	015b      	lsls	r3, r3, #5
 8005a42:	401a      	ands	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4907      	ldr	r1, [pc, #28]	; (8005a74 <HAL_SPI_Init+0x16c>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	225d      	movs	r2, #93	; 0x5d
 8005a66:	2101      	movs	r1, #1
 8005a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b004      	add	sp, #16
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	fffff7ff 	.word	0xfffff7ff

08005a78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	1dbb      	adds	r3, r7, #6
 8005a86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a88:	231f      	movs	r3, #31
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	225c      	movs	r2, #92	; 0x5c
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_SPI_Transmit+0x26>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e140      	b.n	8005d20 <HAL_SPI_Transmit+0x2a8>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	225c      	movs	r2, #92	; 0x5c
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa6:	f7fe f86d 	bl	8003b84 <HAL_GetTick>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005aae:	2316      	movs	r3, #22
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	1dba      	adds	r2, r7, #6
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	225d      	movs	r2, #93	; 0x5d
 8005abc:	5c9b      	ldrb	r3, [r3, r2]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d004      	beq.n	8005ace <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ac4:	231f      	movs	r3, #31
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2202      	movs	r2, #2
 8005aca:	701a      	strb	r2, [r3, #0]
    goto error;
 8005acc:	e11d      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_SPI_Transmit+0x64>
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005adc:	231f      	movs	r3, #31
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ae4:	e111      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	225d      	movs	r2, #93	; 0x5d
 8005aea:	2103      	movs	r1, #3
 8005aec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1dba      	adds	r2, r7, #6
 8005afe:	8812      	ldrh	r2, [r2, #0]
 8005b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1dba      	adds	r2, r7, #6
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2244      	movs	r2, #68	; 0x44
 8005b14:	2100      	movs	r1, #0
 8005b16:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2246      	movs	r2, #70	; 0x46
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d110      	bne.n	8005b5a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2140      	movs	r1, #64	; 0x40
 8005b44:	438a      	bics	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	01c9      	lsls	r1, r1, #7
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d007      	beq.n	8005b78 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2140      	movs	r1, #64	; 0x40
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	23e0      	movs	r3, #224	; 0xe0
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d94e      	bls.n	8005c22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_SPI_Transmit+0x11e>
 8005b8c:	2316      	movs	r3, #22
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d13f      	bne.n	8005c16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bba:	e02c      	b.n	8005c16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d112      	bne.n	8005bf0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bee:	e012      	b.n	8005c16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf0:	f7fd ffc8 	bl	8003b84 <HAL_GetTick>
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d802      	bhi.n	8005c06 <HAL_SPI_Transmit+0x18e>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	d102      	bne.n	8005c0c <HAL_SPI_Transmit+0x194>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005c0c:	231f      	movs	r3, #31
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2203      	movs	r2, #3
 8005c12:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c14:	e079      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1cd      	bne.n	8005bbc <HAL_SPI_Transmit+0x144>
 8005c20:	e04f      	b.n	8005cc2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <HAL_SPI_Transmit+0x1bc>
 8005c2a:	2316      	movs	r3, #22
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d141      	bne.n	8005cb8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c5a:	e02d      	b.n	8005cb8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d113      	bne.n	8005c92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c90:	e012      	b.n	8005cb8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c92:	f7fd ff77 	bl	8003b84 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d802      	bhi.n	8005ca8 <HAL_SPI_Transmit+0x230>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_Transmit+0x236>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005cae:	231f      	movs	r3, #31
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	701a      	strb	r2, [r3, #0]
          goto error;
 8005cb6:	e028      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cc      	bne.n	8005c5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 f95d 	bl	8005f88 <SPI_EndRxTxTransaction>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005cfe:	231f      	movs	r3, #31
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e000      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

error:
 8005d08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	225d      	movs	r2, #93	; 0x5d
 8005d0e:	2101      	movs	r1, #1
 8005d10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	225c      	movs	r2, #92	; 0x5c
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b008      	add	sp, #32
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d38:	f7fd ff24 	bl	8003b84 <HAL_GetTick>
 8005d3c:	0002      	movs	r2, r0
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	18d3      	adds	r3, r2, r3
 8005d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d48:	f7fd ff1c 	bl	8003b84 <HAL_GetTick>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d50:	4b3a      	ldr	r3, [pc, #232]	; (8005e3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	015b      	lsls	r3, r3, #5
 8005d56:	0d1b      	lsrs	r3, r3, #20
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	4353      	muls	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d5e:	e058      	b.n	8005e12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	d055      	beq.n	8005e12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d66:	f7fd ff0d 	bl	8003b84 <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d902      	bls.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d142      	bne.n	8005e02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	21e0      	movs	r1, #224	; 0xe0
 8005d88:	438a      	bics	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	2382      	movs	r3, #130	; 0x82
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d113      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d005      	beq.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d107      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	019b      	lsls	r3, r3, #6
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d110      	bne.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	491a      	ldr	r1, [pc, #104]	; (8005e40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0189      	lsls	r1, r1, #6
 8005dea:	430a      	orrs	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	225d      	movs	r2, #93	; 0x5d
 8005df2:	2101      	movs	r1, #1
 8005df4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	225c      	movs	r2, #92	; 0x5c
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e017      	b.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	425a      	negs	r2, r3
 8005e22:	4153      	adcs	r3, r2
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	001a      	movs	r2, r3
 8005e28:	1dfb      	adds	r3, r7, #7
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d197      	bne.n	8005d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b008      	add	sp, #32
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	20000004 	.word	0x20000004
 8005e40:	ffffdfff 	.word	0xffffdfff

08005e44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e52:	2317      	movs	r3, #23
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e5a:	f7fd fe93 	bl	8003b84 <HAL_GetTick>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	18d3      	adds	r3, r2, r3
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e6a:	f7fd fe8b 	bl	8003b84 <HAL_GetTick>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e7a:	4b41      	ldr	r3, [pc, #260]	; (8005f80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	0013      	movs	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	00da      	lsls	r2, r3, #3
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	0d1b      	lsrs	r3, r3, #20
 8005e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8c:	4353      	muls	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e90:	e068      	b.n	8005f64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	23c0      	movs	r3, #192	; 0xc0
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d10a      	bne.n	8005eb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	2117      	movs	r1, #23
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	d055      	beq.n	8005f64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb8:	f7fd fe64 	bl	8003b84 <HAL_GetTick>
 8005ebc:	0002      	movs	r2, r0
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d902      	bls.n	8005ece <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d142      	bne.n	8005f54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	21e0      	movs	r1, #224	; 0xe0
 8005eda:	438a      	bics	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	2382      	movs	r3, #130	; 0x82
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d113      	bne.n	8005f12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d005      	beq.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	2380      	movs	r3, #128	; 0x80
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d107      	bne.n	8005f12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2140      	movs	r1, #64	; 0x40
 8005f0e:	438a      	bics	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d110      	bne.n	8005f40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4916      	ldr	r1, [pc, #88]	; (8005f84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2180      	movs	r1, #128	; 0x80
 8005f3a:	0189      	lsls	r1, r1, #6
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	225d      	movs	r2, #93	; 0x5d
 8005f44:	2101      	movs	r1, #1
 8005f46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	225c      	movs	r2, #92	; 0x5c
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e010      	b.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d18e      	bne.n	8005e92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b00a      	add	sp, #40	; 0x28
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	20000004 	.word	0x20000004
 8005f84:	ffffdfff 	.word	0xffffdfff

08005f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	23c0      	movs	r3, #192	; 0xc0
 8005f98:	0159      	lsls	r1, r3, #5
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	0013      	movs	r3, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f7ff ff4e 	bl	8005e44 <SPI_WaitFifoStateUntilTimeout>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d007      	beq.n	8005fbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e027      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	0013      	movs	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	f7ff fead 	bl	8005d28 <SPI_WaitFlagStateUntilTimeout>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d007      	beq.n	8005fe2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e014      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	00d9      	lsls	r1, r3, #3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	0013      	movs	r3, r2
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7ff ff27 	bl	8005e44 <SPI_WaitFifoStateUntilTimeout>
 8005ff6:	1e03      	subs	r3, r0, #0
 8005ff8:	d007      	beq.n	800600a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	2220      	movs	r2, #32
 8006000:	431a      	orrs	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e000      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e044      	b.n	80060b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602a:	2b00      	cmp	r3, #0
 800602c:	d107      	bne.n	800603e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2274      	movs	r2, #116	; 0x74
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f7fd fcd1 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2224      	movs	r2, #36	; 0x24
 8006042:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2101      	movs	r1, #1
 8006050:	438a      	bics	r2, r1
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f8da 	bl	8006210 <UART_SetConfig>
 800605c:	0003      	movs	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e024      	b.n	80060b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 fa0d 	bl	8006490 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	490d      	ldr	r1, [pc, #52]	; (80060b8 <HAL_UART_Init+0xa4>)
 8006082:	400a      	ands	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2108      	movs	r1, #8
 8006092:	438a      	bics	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2101      	movs	r1, #1
 80060a2:	430a      	orrs	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 faa5 	bl	80065f8 <UART_CheckIdleState>
 80060ae:	0003      	movs	r3, r0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b002      	add	sp, #8
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	fffff7ff 	.word	0xfffff7ff

080060bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	1dbb      	adds	r3, r7, #6
 80060ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d000      	beq.n	80060d6 <HAL_UART_Transmit+0x1a>
 80060d4:	e096      	b.n	8006204 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_UART_Transmit+0x28>
 80060dc:	1dbb      	adds	r3, r7, #6
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e08e      	b.n	8006206 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	2380      	movs	r3, #128	; 0x80
 80060ee:	015b      	lsls	r3, r3, #5
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d109      	bne.n	8006108 <HAL_UART_Transmit+0x4c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2201      	movs	r2, #1
 8006100:	4013      	ands	r3, r2
 8006102:	d001      	beq.n	8006108 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e07e      	b.n	8006206 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2274      	movs	r2, #116	; 0x74
 800610c:	5c9b      	ldrb	r3, [r3, r2]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_UART_Transmit+0x5a>
 8006112:	2302      	movs	r3, #2
 8006114:	e077      	b.n	8006206 <HAL_UART_Transmit+0x14a>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2274      	movs	r2, #116	; 0x74
 800611a:	2101      	movs	r1, #1
 800611c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2280      	movs	r2, #128	; 0x80
 8006122:	2100      	movs	r1, #0
 8006124:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2221      	movs	r2, #33	; 0x21
 800612a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800612c:	f7fd fd2a 	bl	8003b84 <HAL_GetTick>
 8006130:	0003      	movs	r3, r0
 8006132:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1dba      	adds	r2, r7, #6
 8006138:	2150      	movs	r1, #80	; 0x50
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1dba      	adds	r2, r7, #6
 8006142:	2152      	movs	r1, #82	; 0x52
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	015b      	lsls	r3, r3, #5
 8006150:	429a      	cmp	r2, r3
 8006152:	d108      	bne.n	8006166 <HAL_UART_Transmit+0xaa>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e003      	b.n	800616e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2274      	movs	r2, #116	; 0x74
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006176:	e02d      	b.n	80061d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	0013      	movs	r3, r2
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	f000 fa7f 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 800618a:	1e03      	subs	r3, r0, #0
 800618c:	d001      	beq.n	8006192 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e039      	b.n	8006206 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	05d2      	lsls	r2, r2, #23
 80061a2:	0dd2      	lsrs	r2, r2, #23
 80061a4:	b292      	uxth	r2, r2
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3302      	adds	r3, #2
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e008      	b.n	80061c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	b292      	uxth	r2, r2
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2252      	movs	r2, #82	; 0x52
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b299      	uxth	r1, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2252      	movs	r2, #82	; 0x52
 80061d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2252      	movs	r2, #82	; 0x52
 80061d8:	5a9b      	ldrh	r3, [r3, r2]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1cb      	bne.n	8006178 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	0013      	movs	r3, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	2140      	movs	r1, #64	; 0x40
 80061ee:	f000 fa4b 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 80061f2:	1e03      	subs	r3, r0, #0
 80061f4:	d001      	beq.n	80061fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e005      	b.n	8006206 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b008      	add	sp, #32
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006218:	231e      	movs	r3, #30
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a8d      	ldr	r2, [pc, #564]	; (8006474 <UART_SetConfig+0x264>)
 8006240:	4013      	ands	r3, r2
 8006242:	0019      	movs	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	430a      	orrs	r2, r1
 800624c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a88      	ldr	r2, [pc, #544]	; (8006478 <UART_SetConfig+0x268>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a7f      	ldr	r2, [pc, #508]	; (800647c <UART_SetConfig+0x26c>)
 800627e:	4013      	ands	r3, r2
 8006280:	0019      	movs	r1, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a7b      	ldr	r2, [pc, #492]	; (8006480 <UART_SetConfig+0x270>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d127      	bne.n	80062e6 <UART_SetConfig+0xd6>
 8006296:	4b7b      	ldr	r3, [pc, #492]	; (8006484 <UART_SetConfig+0x274>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	2203      	movs	r2, #3
 800629c:	4013      	ands	r3, r2
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d00d      	beq.n	80062be <UART_SetConfig+0xae>
 80062a2:	d81b      	bhi.n	80062dc <UART_SetConfig+0xcc>
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d014      	beq.n	80062d2 <UART_SetConfig+0xc2>
 80062a8:	d818      	bhi.n	80062dc <UART_SetConfig+0xcc>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <UART_SetConfig+0xa4>
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d00a      	beq.n	80062c8 <UART_SetConfig+0xb8>
 80062b2:	e013      	b.n	80062dc <UART_SetConfig+0xcc>
 80062b4:	231f      	movs	r3, #31
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e021      	b.n	8006302 <UART_SetConfig+0xf2>
 80062be:	231f      	movs	r3, #31
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2202      	movs	r2, #2
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e01c      	b.n	8006302 <UART_SetConfig+0xf2>
 80062c8:	231f      	movs	r3, #31
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	2204      	movs	r2, #4
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e017      	b.n	8006302 <UART_SetConfig+0xf2>
 80062d2:	231f      	movs	r3, #31
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	2208      	movs	r2, #8
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e012      	b.n	8006302 <UART_SetConfig+0xf2>
 80062dc:	231f      	movs	r3, #31
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	2210      	movs	r2, #16
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e00d      	b.n	8006302 <UART_SetConfig+0xf2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a67      	ldr	r2, [pc, #412]	; (8006488 <UART_SetConfig+0x278>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d104      	bne.n	80062fa <UART_SetConfig+0xea>
 80062f0:	231f      	movs	r3, #31
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e003      	b.n	8006302 <UART_SetConfig+0xf2>
 80062fa:	231f      	movs	r3, #31
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	2210      	movs	r2, #16
 8006300:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	429a      	cmp	r2, r3
 800630c:	d15d      	bne.n	80063ca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800630e:	231f      	movs	r3, #31
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d015      	beq.n	8006344 <UART_SetConfig+0x134>
 8006318:	dc18      	bgt.n	800634c <UART_SetConfig+0x13c>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00d      	beq.n	800633a <UART_SetConfig+0x12a>
 800631e:	dc15      	bgt.n	800634c <UART_SetConfig+0x13c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <UART_SetConfig+0x11a>
 8006324:	2b02      	cmp	r3, #2
 8006326:	d005      	beq.n	8006334 <UART_SetConfig+0x124>
 8006328:	e010      	b.n	800634c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632a:	f7ff fa09 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 800632e:	0003      	movs	r3, r0
 8006330:	61bb      	str	r3, [r7, #24]
        break;
 8006332:	e012      	b.n	800635a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006334:	4b55      	ldr	r3, [pc, #340]	; (800648c <UART_SetConfig+0x27c>)
 8006336:	61bb      	str	r3, [r7, #24]
        break;
 8006338:	e00f      	b.n	800635a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633a:	f7ff f993 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 800633e:	0003      	movs	r3, r0
 8006340:	61bb      	str	r3, [r7, #24]
        break;
 8006342:	e00a      	b.n	800635a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	61bb      	str	r3, [r7, #24]
        break;
 800634a:	e006      	b.n	800635a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006350:	231e      	movs	r3, #30
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
        break;
 8006358:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d100      	bne.n	8006362 <UART_SetConfig+0x152>
 8006360:	e07b      	b.n	800645a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	005a      	lsls	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	18d2      	adds	r2, r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	0019      	movs	r1, r3
 8006374:	0010      	movs	r0, r2
 8006376:	f7f9 fed1 	bl	800011c <__udivsi3>
 800637a:	0003      	movs	r3, r0
 800637c:	b29b      	uxth	r3, r3
 800637e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d91c      	bls.n	80063c0 <UART_SetConfig+0x1b0>
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	025b      	lsls	r3, r3, #9
 800638c:	429a      	cmp	r2, r3
 800638e:	d217      	bcs.n	80063c0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	b29a      	uxth	r2, r3
 8006394:	200e      	movs	r0, #14
 8006396:	183b      	adds	r3, r7, r0
 8006398:	210f      	movs	r1, #15
 800639a:	438a      	bics	r2, r1
 800639c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2207      	movs	r2, #7
 80063a6:	4013      	ands	r3, r2
 80063a8:	b299      	uxth	r1, r3
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	183a      	adds	r2, r7, r0
 80063ae:	8812      	ldrh	r2, [r2, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	183a      	adds	r2, r7, r0
 80063ba:	8812      	ldrh	r2, [r2, #0]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e04c      	b.n	800645a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80063c0:	231e      	movs	r3, #30
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2201      	movs	r2, #1
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e047      	b.n	800645a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ca:	231f      	movs	r3, #31
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d015      	beq.n	8006400 <UART_SetConfig+0x1f0>
 80063d4:	dc18      	bgt.n	8006408 <UART_SetConfig+0x1f8>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d00d      	beq.n	80063f6 <UART_SetConfig+0x1e6>
 80063da:	dc15      	bgt.n	8006408 <UART_SetConfig+0x1f8>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <UART_SetConfig+0x1d6>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d005      	beq.n	80063f0 <UART_SetConfig+0x1e0>
 80063e4:	e010      	b.n	8006408 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7ff f9ab 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 80063ea:	0003      	movs	r3, r0
 80063ec:	61bb      	str	r3, [r7, #24]
        break;
 80063ee:	e012      	b.n	8006416 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f0:	4b26      	ldr	r3, [pc, #152]	; (800648c <UART_SetConfig+0x27c>)
 80063f2:	61bb      	str	r3, [r7, #24]
        break;
 80063f4:	e00f      	b.n	8006416 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063f6:	f7ff f935 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80063fa:	0003      	movs	r3, r0
 80063fc:	61bb      	str	r3, [r7, #24]
        break;
 80063fe:	e00a      	b.n	8006416 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	61bb      	str	r3, [r7, #24]
        break;
 8006406:	e006      	b.n	8006416 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800640c:	231e      	movs	r3, #30
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
        break;
 8006414:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01e      	beq.n	800645a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	085a      	lsrs	r2, r3, #1
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	18d2      	adds	r2, r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	0019      	movs	r1, r3
 800642c:	0010      	movs	r0, r2
 800642e:	f7f9 fe75 	bl	800011c <__udivsi3>
 8006432:	0003      	movs	r3, r0
 8006434:	b29b      	uxth	r3, r3
 8006436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d909      	bls.n	8006452 <UART_SetConfig+0x242>
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	025b      	lsls	r3, r3, #9
 8006444:	429a      	cmp	r2, r3
 8006446:	d204      	bcs.n	8006452 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	e003      	b.n	800645a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006452:	231e      	movs	r3, #30
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006466:	231e      	movs	r3, #30
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	781b      	ldrb	r3, [r3, #0]
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b008      	add	sp, #32
 8006472:	bd80      	pop	{r7, pc}
 8006474:	ffff69f3 	.word	0xffff69f3
 8006478:	ffffcfff 	.word	0xffffcfff
 800647c:	fffff4ff 	.word	0xfffff4ff
 8006480:	40013800 	.word	0x40013800
 8006484:	40021000 	.word	0x40021000
 8006488:	40004400 	.word	0x40004400
 800648c:	007a1200 	.word	0x007a1200

08006490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2201      	movs	r2, #1
 800649e:	4013      	ands	r3, r2
 80064a0:	d00b      	beq.n	80064ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4a4a      	ldr	r2, [pc, #296]	; (80065d4 <UART_AdvFeatureConfig+0x144>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2202      	movs	r2, #2
 80064c0:	4013      	ands	r3, r2
 80064c2:	d00b      	beq.n	80064dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4a43      	ldr	r2, [pc, #268]	; (80065d8 <UART_AdvFeatureConfig+0x148>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	0019      	movs	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	2204      	movs	r2, #4
 80064e2:	4013      	ands	r3, r2
 80064e4:	d00b      	beq.n	80064fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a3b      	ldr	r2, [pc, #236]	; (80065dc <UART_AdvFeatureConfig+0x14c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	2208      	movs	r2, #8
 8006504:	4013      	ands	r3, r2
 8006506:	d00b      	beq.n	8006520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4a34      	ldr	r2, [pc, #208]	; (80065e0 <UART_AdvFeatureConfig+0x150>)
 8006510:	4013      	ands	r3, r2
 8006512:	0019      	movs	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2210      	movs	r2, #16
 8006526:	4013      	ands	r3, r2
 8006528:	d00b      	beq.n	8006542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <UART_AdvFeatureConfig+0x154>)
 8006532:	4013      	ands	r3, r2
 8006534:	0019      	movs	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2220      	movs	r2, #32
 8006548:	4013      	ands	r3, r2
 800654a:	d00b      	beq.n	8006564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <UART_AdvFeatureConfig+0x158>)
 8006554:	4013      	ands	r3, r2
 8006556:	0019      	movs	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2240      	movs	r2, #64	; 0x40
 800656a:	4013      	ands	r3, r2
 800656c:	d01d      	beq.n	80065aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <UART_AdvFeatureConfig+0x15c>)
 8006576:	4013      	ands	r3, r2
 8006578:	0019      	movs	r1, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	035b      	lsls	r3, r3, #13
 800658e:	429a      	cmp	r2, r3
 8006590:	d10b      	bne.n	80065aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <UART_AdvFeatureConfig+0x160>)
 800659a:	4013      	ands	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2280      	movs	r2, #128	; 0x80
 80065b0:	4013      	ands	r3, r2
 80065b2:	d00b      	beq.n	80065cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <UART_AdvFeatureConfig+0x164>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }
}
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	fffdffff 	.word	0xfffdffff
 80065d8:	fffeffff 	.word	0xfffeffff
 80065dc:	fffbffff 	.word	0xfffbffff
 80065e0:	ffff7fff 	.word	0xffff7fff
 80065e4:	ffffefff 	.word	0xffffefff
 80065e8:	ffffdfff 	.word	0xffffdfff
 80065ec:	ffefffff 	.word	0xffefffff
 80065f0:	ff9fffff 	.word	0xff9fffff
 80065f4:	fff7ffff 	.word	0xfff7ffff

080065f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	2100      	movs	r1, #0
 8006606:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006608:	f7fd fabc 	bl	8003b84 <HAL_GetTick>
 800660c:	0003      	movs	r3, r0
 800660e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2208      	movs	r2, #8
 8006618:	4013      	ands	r3, r2
 800661a:	2b08      	cmp	r3, #8
 800661c:	d10c      	bne.n	8006638 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	0391      	lsls	r1, r2, #14
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <UART_CheckIdleState+0x8c>)
 8006628:	9200      	str	r2, [sp, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	f000 f82c 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d001      	beq.n	8006638 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e021      	b.n	800667c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2204      	movs	r2, #4
 8006640:	4013      	ands	r3, r2
 8006642:	2b04      	cmp	r3, #4
 8006644:	d10c      	bne.n	8006660 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	03d1      	lsls	r1, r2, #15
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <UART_CheckIdleState+0x8c>)
 8006650:	9200      	str	r2, [sp, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	f000 f818 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d001      	beq.n	8006660 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e00d      	b.n	800667c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2274      	movs	r2, #116	; 0x74
 8006676:	2100      	movs	r1, #0
 8006678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b004      	add	sp, #16
 8006682:	bd80      	pop	{r7, pc}
 8006684:	01ffffff 	.word	0x01ffffff

08006688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b094      	sub	sp, #80	; 0x50
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	1dfb      	adds	r3, r7, #7
 8006696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	e0a3      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669c:	3301      	adds	r3, #1
 800669e:	d100      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80066a0:	e09f      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fd fa6f 	bl	8003b84 <HAL_GetTick>
 80066a6:	0002      	movs	r2, r0
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d13d      	bne.n	8006734 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b8:	f3ef 8310 	mrs	r3, PRIMASK
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c0:	647b      	str	r3, [r7, #68]	; 0x44
 80066c2:	2301      	movs	r3, #1
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	f383 8810 	msr	PRIMASK, r3
}
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	494c      	ldr	r1, [pc, #304]	; (800680c <UART_WaitOnFlagUntilTimeout+0x184>)
 80066da:	400a      	ands	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	f383 8810 	msr	PRIMASK, r3
}
 80066e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ea:	f3ef 8310 	mrs	r3, PRIMASK
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	643b      	str	r3, [r7, #64]	; 0x40
 80066f4:	2301      	movs	r3, #1
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	f383 8810 	msr	PRIMASK, r3
}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2101      	movs	r1, #1
 800670c:	438a      	bics	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006716:	f383 8810 	msr	PRIMASK, r3
}
 800671a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2274      	movs	r2, #116	; 0x74
 800672c:	2100      	movs	r1, #0
 800672e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e067      	b.n	8006804 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2204      	movs	r2, #4
 800673c:	4013      	ands	r3, r2
 800673e:	d050      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	401a      	ands	r2, r3
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	429a      	cmp	r2, r3
 8006752:	d146      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2280      	movs	r2, #128	; 0x80
 800675a:	0112      	lsls	r2, r2, #4
 800675c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	613b      	str	r3, [r7, #16]
  return(result);
 8006764:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4923      	ldr	r1, [pc, #140]	; (800680c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006780:	400a      	ands	r2, r1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f383 8810 	msr	PRIMASK, r3
}
 800678e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006790:	f3ef 8310 	mrs	r3, PRIMASK
 8006794:	61fb      	str	r3, [r7, #28]
  return(result);
 8006796:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	64bb      	str	r3, [r7, #72]	; 0x48
 800679a:	2301      	movs	r3, #1
 800679c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f383 8810 	msr	PRIMASK, r3
}
 80067a4:	46c0      	nop			; (mov r8, r8)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2101      	movs	r1, #1
 80067b2:	438a      	bics	r2, r1
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	f383 8810 	msr	PRIMASK, r3
}
 80067c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	2120      	movs	r1, #32
 80067d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2274      	movs	r2, #116	; 0x74
 80067da:	2100      	movs	r1, #0
 80067dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e010      	b.n	8006804 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	425a      	negs	r2, r3
 80067f2:	4153      	adcs	r3, r2
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	001a      	movs	r2, r3
 80067f8:	1dfb      	adds	r3, r7, #7
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d100      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006800:	e74b      	b.n	800669a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b014      	add	sp, #80	; 0x50
 800680a:	bd80      	pop	{r7, pc}
 800680c:	fffffe5f 	.word	0xfffffe5f

08006810 <__errno>:
 8006810:	4b01      	ldr	r3, [pc, #4]	; (8006818 <__errno+0x8>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	4770      	bx	lr
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20000010 	.word	0x20000010

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	2600      	movs	r6, #0
 8006820:	4d0c      	ldr	r5, [pc, #48]	; (8006854 <__libc_init_array+0x38>)
 8006822:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <__libc_init_array+0x3c>)
 8006824:	1b64      	subs	r4, r4, r5
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	2600      	movs	r6, #0
 800682e:	f001 fc05 	bl	800803c <_init>
 8006832:	4d0a      	ldr	r5, [pc, #40]	; (800685c <__libc_init_array+0x40>)
 8006834:	4c0a      	ldr	r4, [pc, #40]	; (8006860 <__libc_init_array+0x44>)
 8006836:	1b64      	subs	r4, r4, r5
 8006838:	10a4      	asrs	r4, r4, #2
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	00b3      	lsls	r3, r6, #2
 8006842:	58eb      	ldr	r3, [r5, r3]
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	00b3      	lsls	r3, r6, #2
 800684c:	58eb      	ldr	r3, [r5, r3]
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	08008238 	.word	0x08008238
 8006858:	08008238 	.word	0x08008238
 800685c:	08008238 	.word	0x08008238
 8006860:	0800823c 	.word	0x0800823c

08006864 <malloc>:
 8006864:	b510      	push	{r4, lr}
 8006866:	4b03      	ldr	r3, [pc, #12]	; (8006874 <malloc+0x10>)
 8006868:	0001      	movs	r1, r0
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	f000 f86a 	bl	8006944 <_malloc_r>
 8006870:	bd10      	pop	{r4, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	20000010 	.word	0x20000010

08006878 <free>:
 8006878:	b510      	push	{r4, lr}
 800687a:	4b03      	ldr	r3, [pc, #12]	; (8006888 <free+0x10>)
 800687c:	0001      	movs	r1, r0
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	f000 f816 	bl	80068b0 <_free_r>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	20000010 	.word	0x20000010

0800688c <memcpy>:
 800688c:	2300      	movs	r3, #0
 800688e:	b510      	push	{r4, lr}
 8006890:	429a      	cmp	r2, r3
 8006892:	d100      	bne.n	8006896 <memcpy+0xa>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	5ccc      	ldrb	r4, [r1, r3]
 8006898:	54c4      	strb	r4, [r0, r3]
 800689a:	3301      	adds	r3, #1
 800689c:	e7f8      	b.n	8006890 <memcpy+0x4>

0800689e <memset>:
 800689e:	0003      	movs	r3, r0
 80068a0:	1882      	adds	r2, r0, r2
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d100      	bne.n	80068a8 <memset+0xa>
 80068a6:	4770      	bx	lr
 80068a8:	7019      	strb	r1, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	e7f9      	b.n	80068a2 <memset+0x4>
	...

080068b0 <_free_r>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	0005      	movs	r5, r0
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d010      	beq.n	80068da <_free_r+0x2a>
 80068b8:	1f0c      	subs	r4, r1, #4
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da00      	bge.n	80068c2 <_free_r+0x12>
 80068c0:	18e4      	adds	r4, r4, r3
 80068c2:	0028      	movs	r0, r5
 80068c4:	f000 f8d0 	bl	8006a68 <__malloc_lock>
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <_free_r+0x90>)
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <_free_r+0x2c>
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	6014      	str	r4, [r2, #0]
 80068d4:	0028      	movs	r0, r5
 80068d6:	f000 f8cf 	bl	8006a78 <__malloc_unlock>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d908      	bls.n	80068f2 <_free_r+0x42>
 80068e0:	6821      	ldr	r1, [r4, #0]
 80068e2:	1860      	adds	r0, r4, r1
 80068e4:	4283      	cmp	r3, r0
 80068e6:	d1f3      	bne.n	80068d0 <_free_r+0x20>
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	1841      	adds	r1, r0, r1
 80068ee:	6021      	str	r1, [r4, #0]
 80068f0:	e7ee      	b.n	80068d0 <_free_r+0x20>
 80068f2:	001a      	movs	r2, r3
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <_free_r+0x4e>
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	d9f9      	bls.n	80068f2 <_free_r+0x42>
 80068fe:	6811      	ldr	r1, [r2, #0]
 8006900:	1850      	adds	r0, r2, r1
 8006902:	42a0      	cmp	r0, r4
 8006904:	d10b      	bne.n	800691e <_free_r+0x6e>
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	1809      	adds	r1, r1, r0
 800690a:	1850      	adds	r0, r2, r1
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	4283      	cmp	r3, r0
 8006910:	d1e0      	bne.n	80068d4 <_free_r+0x24>
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	1841      	adds	r1, r0, r1
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	6053      	str	r3, [r2, #4]
 800691c:	e7da      	b.n	80068d4 <_free_r+0x24>
 800691e:	42a0      	cmp	r0, r4
 8006920:	d902      	bls.n	8006928 <_free_r+0x78>
 8006922:	230c      	movs	r3, #12
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	e7d5      	b.n	80068d4 <_free_r+0x24>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	1860      	adds	r0, r4, r1
 800692c:	4283      	cmp	r3, r0
 800692e:	d103      	bne.n	8006938 <_free_r+0x88>
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	1841      	adds	r1, r0, r1
 8006936:	6021      	str	r1, [r4, #0]
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	6054      	str	r4, [r2, #4]
 800693c:	e7ca      	b.n	80068d4 <_free_r+0x24>
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	2000009c 	.word	0x2000009c

08006944 <_malloc_r>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	2303      	movs	r3, #3
 8006948:	1ccd      	adds	r5, r1, #3
 800694a:	439d      	bics	r5, r3
 800694c:	3508      	adds	r5, #8
 800694e:	0006      	movs	r6, r0
 8006950:	2d0c      	cmp	r5, #12
 8006952:	d21f      	bcs.n	8006994 <_malloc_r+0x50>
 8006954:	250c      	movs	r5, #12
 8006956:	42a9      	cmp	r1, r5
 8006958:	d81e      	bhi.n	8006998 <_malloc_r+0x54>
 800695a:	0030      	movs	r0, r6
 800695c:	f000 f884 	bl	8006a68 <__malloc_lock>
 8006960:	4925      	ldr	r1, [pc, #148]	; (80069f8 <_malloc_r+0xb4>)
 8006962:	680a      	ldr	r2, [r1, #0]
 8006964:	0014      	movs	r4, r2
 8006966:	2c00      	cmp	r4, #0
 8006968:	d11a      	bne.n	80069a0 <_malloc_r+0x5c>
 800696a:	4f24      	ldr	r7, [pc, #144]	; (80069fc <_malloc_r+0xb8>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <_malloc_r+0x38>
 8006972:	0021      	movs	r1, r4
 8006974:	0030      	movs	r0, r6
 8006976:	f000 f843 	bl	8006a00 <_sbrk_r>
 800697a:	6038      	str	r0, [r7, #0]
 800697c:	0029      	movs	r1, r5
 800697e:	0030      	movs	r0, r6
 8006980:	f000 f83e 	bl	8006a00 <_sbrk_r>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d12b      	bne.n	80069e0 <_malloc_r+0x9c>
 8006988:	230c      	movs	r3, #12
 800698a:	0030      	movs	r0, r6
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	f000 f873 	bl	8006a78 <__malloc_unlock>
 8006992:	e003      	b.n	800699c <_malloc_r+0x58>
 8006994:	2d00      	cmp	r5, #0
 8006996:	dade      	bge.n	8006956 <_malloc_r+0x12>
 8006998:	230c      	movs	r3, #12
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	2000      	movs	r0, #0
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	1b5b      	subs	r3, r3, r5
 80069a4:	d419      	bmi.n	80069da <_malloc_r+0x96>
 80069a6:	2b0b      	cmp	r3, #11
 80069a8:	d903      	bls.n	80069b2 <_malloc_r+0x6e>
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	18e4      	adds	r4, r4, r3
 80069ae:	6025      	str	r5, [r4, #0]
 80069b0:	e003      	b.n	80069ba <_malloc_r+0x76>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	42a2      	cmp	r2, r4
 80069b6:	d10e      	bne.n	80069d6 <_malloc_r+0x92>
 80069b8:	600b      	str	r3, [r1, #0]
 80069ba:	0030      	movs	r0, r6
 80069bc:	f000 f85c 	bl	8006a78 <__malloc_unlock>
 80069c0:	0020      	movs	r0, r4
 80069c2:	2207      	movs	r2, #7
 80069c4:	300b      	adds	r0, #11
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	4390      	bics	r0, r2
 80069ca:	1ac2      	subs	r2, r0, r3
 80069cc:	4298      	cmp	r0, r3
 80069ce:	d0e6      	beq.n	800699e <_malloc_r+0x5a>
 80069d0:	1a1b      	subs	r3, r3, r0
 80069d2:	50a3      	str	r3, [r4, r2]
 80069d4:	e7e3      	b.n	800699e <_malloc_r+0x5a>
 80069d6:	6053      	str	r3, [r2, #4]
 80069d8:	e7ef      	b.n	80069ba <_malloc_r+0x76>
 80069da:	0022      	movs	r2, r4
 80069dc:	6864      	ldr	r4, [r4, #4]
 80069de:	e7c2      	b.n	8006966 <_malloc_r+0x22>
 80069e0:	2303      	movs	r3, #3
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	439c      	bics	r4, r3
 80069e6:	42a0      	cmp	r0, r4
 80069e8:	d0e1      	beq.n	80069ae <_malloc_r+0x6a>
 80069ea:	1a21      	subs	r1, r4, r0
 80069ec:	0030      	movs	r0, r6
 80069ee:	f000 f807 	bl	8006a00 <_sbrk_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d1db      	bne.n	80069ae <_malloc_r+0x6a>
 80069f6:	e7c7      	b.n	8006988 <_malloc_r+0x44>
 80069f8:	2000009c 	.word	0x2000009c
 80069fc:	200000a0 	.word	0x200000a0

08006a00 <_sbrk_r>:
 8006a00:	2300      	movs	r3, #0
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	4d06      	ldr	r5, [pc, #24]	; (8006a20 <_sbrk_r+0x20>)
 8006a06:	0004      	movs	r4, r0
 8006a08:	0008      	movs	r0, r1
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fc ff7c 	bl	8003908 <_sbrk>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d103      	bne.n	8006a1c <_sbrk_r+0x1c>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d000      	beq.n	8006a1c <_sbrk_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	20000228 	.word	0x20000228

08006a24 <_vsiprintf_r>:
 8006a24:	b500      	push	{lr}
 8006a26:	b09b      	sub	sp, #108	; 0x6c
 8006a28:	9100      	str	r1, [sp, #0]
 8006a2a:	9104      	str	r1, [sp, #16]
 8006a2c:	4906      	ldr	r1, [pc, #24]	; (8006a48 <_vsiprintf_r+0x24>)
 8006a2e:	9105      	str	r1, [sp, #20]
 8006a30:	9102      	str	r1, [sp, #8]
 8006a32:	4906      	ldr	r1, [pc, #24]	; (8006a4c <_vsiprintf_r+0x28>)
 8006a34:	9103      	str	r1, [sp, #12]
 8006a36:	4669      	mov	r1, sp
 8006a38:	f000 f888 	bl	8006b4c <_svfiprintf_r>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9a00      	ldr	r2, [sp, #0]
 8006a40:	7013      	strb	r3, [r2, #0]
 8006a42:	b01b      	add	sp, #108	; 0x6c
 8006a44:	bd00      	pop	{pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	7fffffff 	.word	0x7fffffff
 8006a4c:	ffff0208 	.word	0xffff0208

08006a50 <vsiprintf>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	0013      	movs	r3, r2
 8006a54:	000a      	movs	r2, r1
 8006a56:	0001      	movs	r1, r0
 8006a58:	4802      	ldr	r0, [pc, #8]	; (8006a64 <vsiprintf+0x14>)
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	f7ff ffe2 	bl	8006a24 <_vsiprintf_r>
 8006a60:	bd10      	pop	{r4, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	20000010 	.word	0x20000010

08006a68 <__malloc_lock>:
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	4802      	ldr	r0, [pc, #8]	; (8006a74 <__malloc_lock+0xc>)
 8006a6c:	f000 faf0 	bl	8007050 <__retarget_lock_acquire_recursive>
 8006a70:	bd10      	pop	{r4, pc}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	20000230 	.word	0x20000230

08006a78 <__malloc_unlock>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4802      	ldr	r0, [pc, #8]	; (8006a84 <__malloc_unlock+0xc>)
 8006a7c:	f000 fae9 	bl	8007052 <__retarget_lock_release_recursive>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	20000230 	.word	0x20000230

08006a88 <__ssputs_r>:
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	688e      	ldr	r6, [r1, #8]
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	0007      	movs	r7, r0
 8006a90:	000c      	movs	r4, r1
 8006a92:	9203      	str	r2, [sp, #12]
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	429e      	cmp	r6, r3
 8006a98:	d83c      	bhi.n	8006b14 <__ssputs_r+0x8c>
 8006a9a:	2390      	movs	r3, #144	; 0x90
 8006a9c:	898a      	ldrh	r2, [r1, #12]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	421a      	tst	r2, r3
 8006aa2:	d034      	beq.n	8006b0e <__ssputs_r+0x86>
 8006aa4:	2503      	movs	r5, #3
 8006aa6:	6909      	ldr	r1, [r1, #16]
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	6963      	ldr	r3, [r4, #20]
 8006ab0:	9802      	ldr	r0, [sp, #8]
 8006ab2:	435d      	muls	r5, r3
 8006ab4:	0feb      	lsrs	r3, r5, #31
 8006ab6:	195d      	adds	r5, r3, r5
 8006ab8:	9b01      	ldr	r3, [sp, #4]
 8006aba:	106d      	asrs	r5, r5, #1
 8006abc:	3301      	adds	r3, #1
 8006abe:	181b      	adds	r3, r3, r0
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	d900      	bls.n	8006ac6 <__ssputs_r+0x3e>
 8006ac4:	001d      	movs	r5, r3
 8006ac6:	0553      	lsls	r3, r2, #21
 8006ac8:	d532      	bpl.n	8006b30 <__ssputs_r+0xa8>
 8006aca:	0029      	movs	r1, r5
 8006acc:	0038      	movs	r0, r7
 8006ace:	f7ff ff39 	bl	8006944 <_malloc_r>
 8006ad2:	1e06      	subs	r6, r0, #0
 8006ad4:	d109      	bne.n	8006aea <__ssputs_r+0x62>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	2001      	movs	r0, #1
 8006ade:	89a2      	ldrh	r2, [r4, #12]
 8006ae0:	4240      	negs	r0, r0
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	b005      	add	sp, #20
 8006ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aea:	9a02      	ldr	r2, [sp, #8]
 8006aec:	6921      	ldr	r1, [r4, #16]
 8006aee:	f7ff fecd 	bl	800688c <memcpy>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <__ssputs_r+0xc0>)
 8006af6:	401a      	ands	r2, r3
 8006af8:	2380      	movs	r3, #128	; 0x80
 8006afa:	4313      	orrs	r3, r2
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	6126      	str	r6, [r4, #16]
 8006b02:	18f6      	adds	r6, r6, r3
 8006b04:	6026      	str	r6, [r4, #0]
 8006b06:	6165      	str	r5, [r4, #20]
 8006b08:	9e01      	ldr	r6, [sp, #4]
 8006b0a:	1aed      	subs	r5, r5, r3
 8006b0c:	60a5      	str	r5, [r4, #8]
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	429e      	cmp	r6, r3
 8006b12:	d900      	bls.n	8006b16 <__ssputs_r+0x8e>
 8006b14:	9e01      	ldr	r6, [sp, #4]
 8006b16:	0032      	movs	r2, r6
 8006b18:	9903      	ldr	r1, [sp, #12]
 8006b1a:	6820      	ldr	r0, [r4, #0]
 8006b1c:	f000 faa5 	bl	800706a <memmove>
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	2000      	movs	r0, #0
 8006b24:	1b9b      	subs	r3, r3, r6
 8006b26:	60a3      	str	r3, [r4, #8]
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	199e      	adds	r6, r3, r6
 8006b2c:	6026      	str	r6, [r4, #0]
 8006b2e:	e7da      	b.n	8006ae6 <__ssputs_r+0x5e>
 8006b30:	002a      	movs	r2, r5
 8006b32:	0038      	movs	r0, r7
 8006b34:	f000 faac 	bl	8007090 <_realloc_r>
 8006b38:	1e06      	subs	r6, r0, #0
 8006b3a:	d1e0      	bne.n	8006afe <__ssputs_r+0x76>
 8006b3c:	0038      	movs	r0, r7
 8006b3e:	6921      	ldr	r1, [r4, #16]
 8006b40:	f7ff feb6 	bl	80068b0 <_free_r>
 8006b44:	e7c7      	b.n	8006ad6 <__ssputs_r+0x4e>
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	fffffb7f 	.word	0xfffffb7f

08006b4c <_svfiprintf_r>:
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4e:	b0a1      	sub	sp, #132	; 0x84
 8006b50:	9003      	str	r0, [sp, #12]
 8006b52:	001d      	movs	r5, r3
 8006b54:	898b      	ldrh	r3, [r1, #12]
 8006b56:	000f      	movs	r7, r1
 8006b58:	0016      	movs	r6, r2
 8006b5a:	061b      	lsls	r3, r3, #24
 8006b5c:	d511      	bpl.n	8006b82 <_svfiprintf_r+0x36>
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10e      	bne.n	8006b82 <_svfiprintf_r+0x36>
 8006b64:	2140      	movs	r1, #64	; 0x40
 8006b66:	f7ff feed 	bl	8006944 <_malloc_r>
 8006b6a:	6038      	str	r0, [r7, #0]
 8006b6c:	6138      	str	r0, [r7, #16]
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d105      	bne.n	8006b7e <_svfiprintf_r+0x32>
 8006b72:	230c      	movs	r3, #12
 8006b74:	9a03      	ldr	r2, [sp, #12]
 8006b76:	3801      	subs	r0, #1
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	b021      	add	sp, #132	; 0x84
 8006b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	2300      	movs	r3, #0
 8006b84:	ac08      	add	r4, sp, #32
 8006b86:	6163      	str	r3, [r4, #20]
 8006b88:	3320      	adds	r3, #32
 8006b8a:	7663      	strb	r3, [r4, #25]
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	76a3      	strb	r3, [r4, #26]
 8006b90:	9507      	str	r5, [sp, #28]
 8006b92:	0035      	movs	r5, r6
 8006b94:	782b      	ldrb	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <_svfiprintf_r+0x52>
 8006b9a:	2b25      	cmp	r3, #37	; 0x25
 8006b9c:	d147      	bne.n	8006c2e <_svfiprintf_r+0xe2>
 8006b9e:	1bab      	subs	r3, r5, r6
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d00c      	beq.n	8006bc0 <_svfiprintf_r+0x74>
 8006ba6:	0032      	movs	r2, r6
 8006ba8:	0039      	movs	r1, r7
 8006baa:	9803      	ldr	r0, [sp, #12]
 8006bac:	f7ff ff6c 	bl	8006a88 <__ssputs_r>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d100      	bne.n	8006bb6 <_svfiprintf_r+0x6a>
 8006bb4:	e0ae      	b.n	8006d14 <_svfiprintf_r+0x1c8>
 8006bb6:	6962      	ldr	r2, [r4, #20]
 8006bb8:	9b05      	ldr	r3, [sp, #20]
 8006bba:	4694      	mov	ip, r2
 8006bbc:	4463      	add	r3, ip
 8006bbe:	6163      	str	r3, [r4, #20]
 8006bc0:	782b      	ldrb	r3, [r5, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d100      	bne.n	8006bc8 <_svfiprintf_r+0x7c>
 8006bc6:	e0a5      	b.n	8006d14 <_svfiprintf_r+0x1c8>
 8006bc8:	2201      	movs	r2, #1
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4252      	negs	r2, r2
 8006bce:	6062      	str	r2, [r4, #4]
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	3254      	adds	r2, #84	; 0x54
 8006bd4:	1852      	adds	r2, r2, r1
 8006bd6:	1c6e      	adds	r6, r5, #1
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	60e3      	str	r3, [r4, #12]
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	7013      	strb	r3, [r2, #0]
 8006be0:	65a3      	str	r3, [r4, #88]	; 0x58
 8006be2:	2205      	movs	r2, #5
 8006be4:	7831      	ldrb	r1, [r6, #0]
 8006be6:	4854      	ldr	r0, [pc, #336]	; (8006d38 <_svfiprintf_r+0x1ec>)
 8006be8:	f000 fa34 	bl	8007054 <memchr>
 8006bec:	1c75      	adds	r5, r6, #1
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d11f      	bne.n	8006c32 <_svfiprintf_r+0xe6>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	06d3      	lsls	r3, r2, #27
 8006bf6:	d504      	bpl.n	8006c02 <_svfiprintf_r+0xb6>
 8006bf8:	2353      	movs	r3, #83	; 0x53
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	185b      	adds	r3, r3, r1
 8006bfe:	2120      	movs	r1, #32
 8006c00:	7019      	strb	r1, [r3, #0]
 8006c02:	0713      	lsls	r3, r2, #28
 8006c04:	d504      	bpl.n	8006c10 <_svfiprintf_r+0xc4>
 8006c06:	2353      	movs	r3, #83	; 0x53
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	185b      	adds	r3, r3, r1
 8006c0c:	212b      	movs	r1, #43	; 0x2b
 8006c0e:	7019      	strb	r1, [r3, #0]
 8006c10:	7833      	ldrb	r3, [r6, #0]
 8006c12:	2b2a      	cmp	r3, #42	; 0x2a
 8006c14:	d016      	beq.n	8006c44 <_svfiprintf_r+0xf8>
 8006c16:	0035      	movs	r5, r6
 8006c18:	2100      	movs	r1, #0
 8006c1a:	200a      	movs	r0, #10
 8006c1c:	68e3      	ldr	r3, [r4, #12]
 8006c1e:	782a      	ldrb	r2, [r5, #0]
 8006c20:	1c6e      	adds	r6, r5, #1
 8006c22:	3a30      	subs	r2, #48	; 0x30
 8006c24:	2a09      	cmp	r2, #9
 8006c26:	d94e      	bls.n	8006cc6 <_svfiprintf_r+0x17a>
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	d111      	bne.n	8006c50 <_svfiprintf_r+0x104>
 8006c2c:	e017      	b.n	8006c5e <_svfiprintf_r+0x112>
 8006c2e:	3501      	adds	r5, #1
 8006c30:	e7b0      	b.n	8006b94 <_svfiprintf_r+0x48>
 8006c32:	4b41      	ldr	r3, [pc, #260]	; (8006d38 <_svfiprintf_r+0x1ec>)
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	1ac0      	subs	r0, r0, r3
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4083      	lsls	r3, r0
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	002e      	movs	r6, r5
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	e7ce      	b.n	8006be2 <_svfiprintf_r+0x96>
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	9107      	str	r1, [sp, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	db01      	blt.n	8006c54 <_svfiprintf_r+0x108>
 8006c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c52:	e004      	b.n	8006c5e <_svfiprintf_r+0x112>
 8006c54:	425b      	negs	r3, r3
 8006c56:	60e3      	str	r3, [r4, #12]
 8006c58:	2302      	movs	r3, #2
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	782b      	ldrb	r3, [r5, #0]
 8006c60:	2b2e      	cmp	r3, #46	; 0x2e
 8006c62:	d10a      	bne.n	8006c7a <_svfiprintf_r+0x12e>
 8006c64:	786b      	ldrb	r3, [r5, #1]
 8006c66:	2b2a      	cmp	r3, #42	; 0x2a
 8006c68:	d135      	bne.n	8006cd6 <_svfiprintf_r+0x18a>
 8006c6a:	9b07      	ldr	r3, [sp, #28]
 8006c6c:	3502      	adds	r5, #2
 8006c6e:	1d1a      	adds	r2, r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	9207      	str	r2, [sp, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db2b      	blt.n	8006cd0 <_svfiprintf_r+0x184>
 8006c78:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7a:	4e30      	ldr	r6, [pc, #192]	; (8006d3c <_svfiprintf_r+0x1f0>)
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	0030      	movs	r0, r6
 8006c80:	7829      	ldrb	r1, [r5, #0]
 8006c82:	f000 f9e7 	bl	8007054 <memchr>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d006      	beq.n	8006c98 <_svfiprintf_r+0x14c>
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	1b80      	subs	r0, r0, r6
 8006c8e:	4083      	lsls	r3, r0
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	3501      	adds	r5, #1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	7829      	ldrb	r1, [r5, #0]
 8006c9a:	2206      	movs	r2, #6
 8006c9c:	4828      	ldr	r0, [pc, #160]	; (8006d40 <_svfiprintf_r+0x1f4>)
 8006c9e:	1c6e      	adds	r6, r5, #1
 8006ca0:	7621      	strb	r1, [r4, #24]
 8006ca2:	f000 f9d7 	bl	8007054 <memchr>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d03c      	beq.n	8006d24 <_svfiprintf_r+0x1d8>
 8006caa:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <_svfiprintf_r+0x1f8>)
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d125      	bne.n	8006cfc <_svfiprintf_r+0x1b0>
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	9b07      	ldr	r3, [sp, #28]
 8006cb4:	3307      	adds	r3, #7
 8006cb6:	4393      	bics	r3, r2
 8006cb8:	3308      	adds	r3, #8
 8006cba:	9307      	str	r3, [sp, #28]
 8006cbc:	6963      	ldr	r3, [r4, #20]
 8006cbe:	9a04      	ldr	r2, [sp, #16]
 8006cc0:	189b      	adds	r3, r3, r2
 8006cc2:	6163      	str	r3, [r4, #20]
 8006cc4:	e765      	b.n	8006b92 <_svfiprintf_r+0x46>
 8006cc6:	4343      	muls	r3, r0
 8006cc8:	0035      	movs	r5, r6
 8006cca:	2101      	movs	r1, #1
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	e7a6      	b.n	8006c1e <_svfiprintf_r+0xd2>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	425b      	negs	r3, r3
 8006cd4:	e7d0      	b.n	8006c78 <_svfiprintf_r+0x12c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	200a      	movs	r0, #10
 8006cda:	001a      	movs	r2, r3
 8006cdc:	3501      	adds	r5, #1
 8006cde:	6063      	str	r3, [r4, #4]
 8006ce0:	7829      	ldrb	r1, [r5, #0]
 8006ce2:	1c6e      	adds	r6, r5, #1
 8006ce4:	3930      	subs	r1, #48	; 0x30
 8006ce6:	2909      	cmp	r1, #9
 8006ce8:	d903      	bls.n	8006cf2 <_svfiprintf_r+0x1a6>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0c5      	beq.n	8006c7a <_svfiprintf_r+0x12e>
 8006cee:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf0:	e7c3      	b.n	8006c7a <_svfiprintf_r+0x12e>
 8006cf2:	4342      	muls	r2, r0
 8006cf4:	0035      	movs	r5, r6
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	1852      	adds	r2, r2, r1
 8006cfa:	e7f1      	b.n	8006ce0 <_svfiprintf_r+0x194>
 8006cfc:	ab07      	add	r3, sp, #28
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	003a      	movs	r2, r7
 8006d02:	0021      	movs	r1, r4
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <_svfiprintf_r+0x1fc>)
 8006d06:	9803      	ldr	r0, [sp, #12]
 8006d08:	e000      	b.n	8006d0c <_svfiprintf_r+0x1c0>
 8006d0a:	bf00      	nop
 8006d0c:	9004      	str	r0, [sp, #16]
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	3301      	adds	r3, #1
 8006d12:	d1d3      	bne.n	8006cbc <_svfiprintf_r+0x170>
 8006d14:	89bb      	ldrh	r3, [r7, #12]
 8006d16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d18:	065b      	lsls	r3, r3, #25
 8006d1a:	d400      	bmi.n	8006d1e <_svfiprintf_r+0x1d2>
 8006d1c:	e72d      	b.n	8006b7a <_svfiprintf_r+0x2e>
 8006d1e:	2001      	movs	r0, #1
 8006d20:	4240      	negs	r0, r0
 8006d22:	e72a      	b.n	8006b7a <_svfiprintf_r+0x2e>
 8006d24:	ab07      	add	r3, sp, #28
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	003a      	movs	r2, r7
 8006d2a:	0021      	movs	r1, r4
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <_svfiprintf_r+0x1fc>)
 8006d2e:	9803      	ldr	r0, [sp, #12]
 8006d30:	f000 f87c 	bl	8006e2c <_printf_i>
 8006d34:	e7ea      	b.n	8006d0c <_svfiprintf_r+0x1c0>
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	080081c4 	.word	0x080081c4
 8006d3c:	080081ca 	.word	0x080081ca
 8006d40:	080081ce 	.word	0x080081ce
 8006d44:	00000000 	.word	0x00000000
 8006d48:	08006a89 	.word	0x08006a89

08006d4c <_printf_common>:
 8006d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4e:	0015      	movs	r5, r2
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	688a      	ldr	r2, [r1, #8]
 8006d54:	690b      	ldr	r3, [r1, #16]
 8006d56:	000c      	movs	r4, r1
 8006d58:	9000      	str	r0, [sp, #0]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	da00      	bge.n	8006d60 <_printf_common+0x14>
 8006d5e:	0013      	movs	r3, r2
 8006d60:	0022      	movs	r2, r4
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	3243      	adds	r2, #67	; 0x43
 8006d66:	7812      	ldrb	r2, [r2, #0]
 8006d68:	2a00      	cmp	r2, #0
 8006d6a:	d001      	beq.n	8006d70 <_printf_common+0x24>
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	069b      	lsls	r3, r3, #26
 8006d74:	d502      	bpl.n	8006d7c <_printf_common+0x30>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	3302      	adds	r3, #2
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	2306      	movs	r3, #6
 8006d80:	0017      	movs	r7, r2
 8006d82:	401f      	ands	r7, r3
 8006d84:	421a      	tst	r2, r3
 8006d86:	d027      	beq.n	8006dd8 <_printf_common+0x8c>
 8006d88:	0023      	movs	r3, r4
 8006d8a:	3343      	adds	r3, #67	; 0x43
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	1e5a      	subs	r2, r3, #1
 8006d90:	4193      	sbcs	r3, r2
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	0692      	lsls	r2, r2, #26
 8006d96:	d430      	bmi.n	8006dfa <_printf_common+0xae>
 8006d98:	0022      	movs	r2, r4
 8006d9a:	9901      	ldr	r1, [sp, #4]
 8006d9c:	9800      	ldr	r0, [sp, #0]
 8006d9e:	9e08      	ldr	r6, [sp, #32]
 8006da0:	3243      	adds	r2, #67	; 0x43
 8006da2:	47b0      	blx	r6
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d025      	beq.n	8006df4 <_printf_common+0xa8>
 8006da8:	2306      	movs	r3, #6
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	682a      	ldr	r2, [r5, #0]
 8006dae:	68e1      	ldr	r1, [r4, #12]
 8006db0:	2500      	movs	r5, #0
 8006db2:	4003      	ands	r3, r0
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d103      	bne.n	8006dc0 <_printf_common+0x74>
 8006db8:	1a8d      	subs	r5, r1, r2
 8006dba:	43eb      	mvns	r3, r5
 8006dbc:	17db      	asrs	r3, r3, #31
 8006dbe:	401d      	ands	r5, r3
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	6922      	ldr	r2, [r4, #16]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	dd01      	ble.n	8006dcc <_printf_common+0x80>
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	18ed      	adds	r5, r5, r3
 8006dcc:	2700      	movs	r7, #0
 8006dce:	42bd      	cmp	r5, r7
 8006dd0:	d120      	bne.n	8006e14 <_printf_common+0xc8>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e010      	b.n	8006df8 <_printf_common+0xac>
 8006dd6:	3701      	adds	r7, #1
 8006dd8:	68e3      	ldr	r3, [r4, #12]
 8006dda:	682a      	ldr	r2, [r5, #0]
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	42bb      	cmp	r3, r7
 8006de0:	ddd2      	ble.n	8006d88 <_printf_common+0x3c>
 8006de2:	0022      	movs	r2, r4
 8006de4:	2301      	movs	r3, #1
 8006de6:	9901      	ldr	r1, [sp, #4]
 8006de8:	9800      	ldr	r0, [sp, #0]
 8006dea:	9e08      	ldr	r6, [sp, #32]
 8006dec:	3219      	adds	r2, #25
 8006dee:	47b0      	blx	r6
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d1f0      	bne.n	8006dd6 <_printf_common+0x8a>
 8006df4:	2001      	movs	r0, #1
 8006df6:	4240      	negs	r0, r0
 8006df8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dfa:	2030      	movs	r0, #48	; 0x30
 8006dfc:	18e1      	adds	r1, r4, r3
 8006dfe:	3143      	adds	r1, #67	; 0x43
 8006e00:	7008      	strb	r0, [r1, #0]
 8006e02:	0021      	movs	r1, r4
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	3145      	adds	r1, #69	; 0x45
 8006e08:	7809      	ldrb	r1, [r1, #0]
 8006e0a:	18a2      	adds	r2, r4, r2
 8006e0c:	3243      	adds	r2, #67	; 0x43
 8006e0e:	3302      	adds	r3, #2
 8006e10:	7011      	strb	r1, [r2, #0]
 8006e12:	e7c1      	b.n	8006d98 <_printf_common+0x4c>
 8006e14:	0022      	movs	r2, r4
 8006e16:	2301      	movs	r3, #1
 8006e18:	9901      	ldr	r1, [sp, #4]
 8006e1a:	9800      	ldr	r0, [sp, #0]
 8006e1c:	9e08      	ldr	r6, [sp, #32]
 8006e1e:	321a      	adds	r2, #26
 8006e20:	47b0      	blx	r6
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d0e6      	beq.n	8006df4 <_printf_common+0xa8>
 8006e26:	3701      	adds	r7, #1
 8006e28:	e7d1      	b.n	8006dce <_printf_common+0x82>
	...

08006e2c <_printf_i>:
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2e:	b08b      	sub	sp, #44	; 0x2c
 8006e30:	9206      	str	r2, [sp, #24]
 8006e32:	000a      	movs	r2, r1
 8006e34:	3243      	adds	r2, #67	; 0x43
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	9005      	str	r0, [sp, #20]
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	7e0a      	ldrb	r2, [r1, #24]
 8006e3e:	000c      	movs	r4, r1
 8006e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e42:	2a78      	cmp	r2, #120	; 0x78
 8006e44:	d806      	bhi.n	8006e54 <_printf_i+0x28>
 8006e46:	2a62      	cmp	r2, #98	; 0x62
 8006e48:	d808      	bhi.n	8006e5c <_printf_i+0x30>
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d100      	bne.n	8006e50 <_printf_i+0x24>
 8006e4e:	e0c0      	b.n	8006fd2 <_printf_i+0x1a6>
 8006e50:	2a58      	cmp	r2, #88	; 0x58
 8006e52:	d052      	beq.n	8006efa <_printf_i+0xce>
 8006e54:	0026      	movs	r6, r4
 8006e56:	3642      	adds	r6, #66	; 0x42
 8006e58:	7032      	strb	r2, [r6, #0]
 8006e5a:	e022      	b.n	8006ea2 <_printf_i+0x76>
 8006e5c:	0010      	movs	r0, r2
 8006e5e:	3863      	subs	r0, #99	; 0x63
 8006e60:	2815      	cmp	r0, #21
 8006e62:	d8f7      	bhi.n	8006e54 <_printf_i+0x28>
 8006e64:	f7f9 f950 	bl	8000108 <__gnu_thumb1_case_shi>
 8006e68:	001f0016 	.word	0x001f0016
 8006e6c:	fff6fff6 	.word	0xfff6fff6
 8006e70:	fff6fff6 	.word	0xfff6fff6
 8006e74:	fff6001f 	.word	0xfff6001f
 8006e78:	fff6fff6 	.word	0xfff6fff6
 8006e7c:	00a8fff6 	.word	0x00a8fff6
 8006e80:	009a0036 	.word	0x009a0036
 8006e84:	fff6fff6 	.word	0xfff6fff6
 8006e88:	fff600b9 	.word	0xfff600b9
 8006e8c:	fff60036 	.word	0xfff60036
 8006e90:	009efff6 	.word	0x009efff6
 8006e94:	0026      	movs	r6, r4
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	3642      	adds	r6, #66	; 0x42
 8006e9a:	1d11      	adds	r1, r2, #4
 8006e9c:	6019      	str	r1, [r3, #0]
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	7033      	strb	r3, [r6, #0]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0a7      	b.n	8006ff6 <_printf_i+0x1ca>
 8006ea6:	6808      	ldr	r0, [r1, #0]
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	1d0a      	adds	r2, r1, #4
 8006eac:	0605      	lsls	r5, r0, #24
 8006eae:	d50b      	bpl.n	8006ec8 <_printf_i+0x9c>
 8006eb0:	680d      	ldr	r5, [r1, #0]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	2d00      	cmp	r5, #0
 8006eb6:	da03      	bge.n	8006ec0 <_printf_i+0x94>
 8006eb8:	232d      	movs	r3, #45	; 0x2d
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	426d      	negs	r5, r5
 8006ebe:	7013      	strb	r3, [r2, #0]
 8006ec0:	4b61      	ldr	r3, [pc, #388]	; (8007048 <_printf_i+0x21c>)
 8006ec2:	270a      	movs	r7, #10
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	e032      	b.n	8006f2e <_printf_i+0x102>
 8006ec8:	680d      	ldr	r5, [r1, #0]
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	0641      	lsls	r1, r0, #25
 8006ece:	d5f1      	bpl.n	8006eb4 <_printf_i+0x88>
 8006ed0:	b22d      	sxth	r5, r5
 8006ed2:	e7ef      	b.n	8006eb4 <_printf_i+0x88>
 8006ed4:	680d      	ldr	r5, [r1, #0]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	1d08      	adds	r0, r1, #4
 8006eda:	6018      	str	r0, [r3, #0]
 8006edc:	062e      	lsls	r6, r5, #24
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0xb8>
 8006ee0:	680d      	ldr	r5, [r1, #0]
 8006ee2:	e003      	b.n	8006eec <_printf_i+0xc0>
 8006ee4:	066d      	lsls	r5, r5, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0xb4>
 8006ee8:	680d      	ldr	r5, [r1, #0]
 8006eea:	b2ad      	uxth	r5, r5
 8006eec:	4b56      	ldr	r3, [pc, #344]	; (8007048 <_printf_i+0x21c>)
 8006eee:	270a      	movs	r7, #10
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	2a6f      	cmp	r2, #111	; 0x6f
 8006ef4:	d117      	bne.n	8006f26 <_printf_i+0xfa>
 8006ef6:	2708      	movs	r7, #8
 8006ef8:	e015      	b.n	8006f26 <_printf_i+0xfa>
 8006efa:	3145      	adds	r1, #69	; 0x45
 8006efc:	700a      	strb	r2, [r1, #0]
 8006efe:	4a52      	ldr	r2, [pc, #328]	; (8007048 <_printf_i+0x21c>)
 8006f00:	9203      	str	r2, [sp, #12]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6821      	ldr	r1, [r4, #0]
 8006f06:	ca20      	ldmia	r2!, {r5}
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	0608      	lsls	r0, r1, #24
 8006f0c:	d550      	bpl.n	8006fb0 <_printf_i+0x184>
 8006f0e:	07cb      	lsls	r3, r1, #31
 8006f10:	d502      	bpl.n	8006f18 <_printf_i+0xec>
 8006f12:	2320      	movs	r3, #32
 8006f14:	4319      	orrs	r1, r3
 8006f16:	6021      	str	r1, [r4, #0]
 8006f18:	2710      	movs	r7, #16
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	d103      	bne.n	8006f26 <_printf_i+0xfa>
 8006f1e:	2320      	movs	r3, #32
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	439a      	bics	r2, r3
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	0023      	movs	r3, r4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	3343      	adds	r3, #67	; 0x43
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	6863      	ldr	r3, [r4, #4]
 8006f30:	60a3      	str	r3, [r4, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db03      	blt.n	8006f3e <_printf_i+0x112>
 8006f36:	2204      	movs	r2, #4
 8006f38:	6821      	ldr	r1, [r4, #0]
 8006f3a:	4391      	bics	r1, r2
 8006f3c:	6021      	str	r1, [r4, #0]
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	d102      	bne.n	8006f48 <_printf_i+0x11c>
 8006f42:	9e04      	ldr	r6, [sp, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00c      	beq.n	8006f62 <_printf_i+0x136>
 8006f48:	9e04      	ldr	r6, [sp, #16]
 8006f4a:	0028      	movs	r0, r5
 8006f4c:	0039      	movs	r1, r7
 8006f4e:	f7f9 f96b 	bl	8000228 <__aeabi_uidivmod>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	3e01      	subs	r6, #1
 8006f56:	5c5b      	ldrb	r3, [r3, r1]
 8006f58:	7033      	strb	r3, [r6, #0]
 8006f5a:	002b      	movs	r3, r5
 8006f5c:	0005      	movs	r5, r0
 8006f5e:	429f      	cmp	r7, r3
 8006f60:	d9f3      	bls.n	8006f4a <_printf_i+0x11e>
 8006f62:	2f08      	cmp	r7, #8
 8006f64:	d109      	bne.n	8006f7a <_printf_i+0x14e>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	07db      	lsls	r3, r3, #31
 8006f6a:	d506      	bpl.n	8006f7a <_printf_i+0x14e>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	6922      	ldr	r2, [r4, #16]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	dc02      	bgt.n	8006f7a <_printf_i+0x14e>
 8006f74:	2330      	movs	r3, #48	; 0x30
 8006f76:	3e01      	subs	r6, #1
 8006f78:	7033      	strb	r3, [r6, #0]
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	1b9b      	subs	r3, r3, r6
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	9b07      	ldr	r3, [sp, #28]
 8006f82:	0021      	movs	r1, r4
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	9805      	ldr	r0, [sp, #20]
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	aa09      	add	r2, sp, #36	; 0x24
 8006f8c:	f7ff fede 	bl	8006d4c <_printf_common>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d135      	bne.n	8007000 <_printf_i+0x1d4>
 8006f94:	2001      	movs	r0, #1
 8006f96:	4240      	negs	r0, r0
 8006f98:	b00b      	add	sp, #44	; 0x2c
 8006f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	6809      	ldr	r1, [r1, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	0022      	movs	r2, r4
 8006fa6:	2178      	movs	r1, #120	; 0x78
 8006fa8:	3245      	adds	r2, #69	; 0x45
 8006faa:	7011      	strb	r1, [r2, #0]
 8006fac:	4a27      	ldr	r2, [pc, #156]	; (800704c <_printf_i+0x220>)
 8006fae:	e7a7      	b.n	8006f00 <_printf_i+0xd4>
 8006fb0:	0648      	lsls	r0, r1, #25
 8006fb2:	d5ac      	bpl.n	8006f0e <_printf_i+0xe2>
 8006fb4:	b2ad      	uxth	r5, r5
 8006fb6:	e7aa      	b.n	8006f0e <_printf_i+0xe2>
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	680d      	ldr	r5, [r1, #0]
 8006fbc:	1d10      	adds	r0, r2, #4
 8006fbe:	6949      	ldr	r1, [r1, #20]
 8006fc0:	6018      	str	r0, [r3, #0]
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	062e      	lsls	r6, r5, #24
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0x1a0>
 8006fc8:	6019      	str	r1, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0x1a6>
 8006fcc:	066d      	lsls	r5, r5, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0x19c>
 8006fd0:	8019      	strh	r1, [r3, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9e04      	ldr	r6, [sp, #16]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	e7d2      	b.n	8006f80 <_printf_i+0x154>
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	1d11      	adds	r1, r2, #4
 8006fde:	6019      	str	r1, [r3, #0]
 8006fe0:	6816      	ldr	r6, [r2, #0]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	0030      	movs	r0, r6
 8006fe6:	6862      	ldr	r2, [r4, #4]
 8006fe8:	f000 f834 	bl	8007054 <memchr>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d001      	beq.n	8006ff4 <_printf_i+0x1c8>
 8006ff0:	1b80      	subs	r0, r0, r6
 8006ff2:	6060      	str	r0, [r4, #4]
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9a04      	ldr	r2, [sp, #16]
 8006ffc:	7013      	strb	r3, [r2, #0]
 8006ffe:	e7bf      	b.n	8006f80 <_printf_i+0x154>
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	0032      	movs	r2, r6
 8007004:	9906      	ldr	r1, [sp, #24]
 8007006:	9805      	ldr	r0, [sp, #20]
 8007008:	9d07      	ldr	r5, [sp, #28]
 800700a:	47a8      	blx	r5
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d0c1      	beq.n	8006f94 <_printf_i+0x168>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	079b      	lsls	r3, r3, #30
 8007014:	d415      	bmi.n	8007042 <_printf_i+0x216>
 8007016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007018:	68e0      	ldr	r0, [r4, #12]
 800701a:	4298      	cmp	r0, r3
 800701c:	dabc      	bge.n	8006f98 <_printf_i+0x16c>
 800701e:	0018      	movs	r0, r3
 8007020:	e7ba      	b.n	8006f98 <_printf_i+0x16c>
 8007022:	0022      	movs	r2, r4
 8007024:	2301      	movs	r3, #1
 8007026:	9906      	ldr	r1, [sp, #24]
 8007028:	9805      	ldr	r0, [sp, #20]
 800702a:	9e07      	ldr	r6, [sp, #28]
 800702c:	3219      	adds	r2, #25
 800702e:	47b0      	blx	r6
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d0af      	beq.n	8006f94 <_printf_i+0x168>
 8007034:	3501      	adds	r5, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	42ab      	cmp	r3, r5
 800703e:	dcf0      	bgt.n	8007022 <_printf_i+0x1f6>
 8007040:	e7e9      	b.n	8007016 <_printf_i+0x1ea>
 8007042:	2500      	movs	r5, #0
 8007044:	e7f7      	b.n	8007036 <_printf_i+0x20a>
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	080081d5 	.word	0x080081d5
 800704c:	080081e6 	.word	0x080081e6

08007050 <__retarget_lock_acquire_recursive>:
 8007050:	4770      	bx	lr

08007052 <__retarget_lock_release_recursive>:
 8007052:	4770      	bx	lr

08007054 <memchr>:
 8007054:	b2c9      	uxtb	r1, r1
 8007056:	1882      	adds	r2, r0, r2
 8007058:	4290      	cmp	r0, r2
 800705a:	d101      	bne.n	8007060 <memchr+0xc>
 800705c:	2000      	movs	r0, #0
 800705e:	4770      	bx	lr
 8007060:	7803      	ldrb	r3, [r0, #0]
 8007062:	428b      	cmp	r3, r1
 8007064:	d0fb      	beq.n	800705e <memchr+0xa>
 8007066:	3001      	adds	r0, #1
 8007068:	e7f6      	b.n	8007058 <memchr+0x4>

0800706a <memmove>:
 800706a:	b510      	push	{r4, lr}
 800706c:	4288      	cmp	r0, r1
 800706e:	d902      	bls.n	8007076 <memmove+0xc>
 8007070:	188b      	adds	r3, r1, r2
 8007072:	4298      	cmp	r0, r3
 8007074:	d303      	bcc.n	800707e <memmove+0x14>
 8007076:	2300      	movs	r3, #0
 8007078:	e007      	b.n	800708a <memmove+0x20>
 800707a:	5c8b      	ldrb	r3, [r1, r2]
 800707c:	5483      	strb	r3, [r0, r2]
 800707e:	3a01      	subs	r2, #1
 8007080:	d2fb      	bcs.n	800707a <memmove+0x10>
 8007082:	bd10      	pop	{r4, pc}
 8007084:	5ccc      	ldrb	r4, [r1, r3]
 8007086:	54c4      	strb	r4, [r0, r3]
 8007088:	3301      	adds	r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	d1fa      	bne.n	8007084 <memmove+0x1a>
 800708e:	e7f8      	b.n	8007082 <memmove+0x18>

08007090 <_realloc_r>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	0007      	movs	r7, r0
 8007094:	000d      	movs	r5, r1
 8007096:	0016      	movs	r6, r2
 8007098:	2900      	cmp	r1, #0
 800709a:	d105      	bne.n	80070a8 <_realloc_r+0x18>
 800709c:	0011      	movs	r1, r2
 800709e:	f7ff fc51 	bl	8006944 <_malloc_r>
 80070a2:	0004      	movs	r4, r0
 80070a4:	0020      	movs	r0, r4
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	d103      	bne.n	80070b4 <_realloc_r+0x24>
 80070ac:	f7ff fc00 	bl	80068b0 <_free_r>
 80070b0:	0034      	movs	r4, r6
 80070b2:	e7f7      	b.n	80070a4 <_realloc_r+0x14>
 80070b4:	f000 f812 	bl	80070dc <_malloc_usable_size_r>
 80070b8:	002c      	movs	r4, r5
 80070ba:	42b0      	cmp	r0, r6
 80070bc:	d2f2      	bcs.n	80070a4 <_realloc_r+0x14>
 80070be:	0031      	movs	r1, r6
 80070c0:	0038      	movs	r0, r7
 80070c2:	f7ff fc3f 	bl	8006944 <_malloc_r>
 80070c6:	1e04      	subs	r4, r0, #0
 80070c8:	d0ec      	beq.n	80070a4 <_realloc_r+0x14>
 80070ca:	0029      	movs	r1, r5
 80070cc:	0032      	movs	r2, r6
 80070ce:	f7ff fbdd 	bl	800688c <memcpy>
 80070d2:	0029      	movs	r1, r5
 80070d4:	0038      	movs	r0, r7
 80070d6:	f7ff fbeb 	bl	80068b0 <_free_r>
 80070da:	e7e3      	b.n	80070a4 <_realloc_r+0x14>

080070dc <_malloc_usable_size_r>:
 80070dc:	1f0b      	subs	r3, r1, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	1f18      	subs	r0, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da01      	bge.n	80070ea <_malloc_usable_size_r+0xe>
 80070e6:	580b      	ldr	r3, [r1, r0]
 80070e8:	18c0      	adds	r0, r0, r3
 80070ea:	4770      	bx	lr

080070ec <pow>:
 80070ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ee:	001d      	movs	r5, r3
 80070f0:	0014      	movs	r4, r2
 80070f2:	9000      	str	r0, [sp, #0]
 80070f4:	9101      	str	r1, [sp, #4]
 80070f6:	f000 f8df 	bl	80072b8 <__ieee754_pow>
 80070fa:	4b54      	ldr	r3, [pc, #336]	; (800724c <pow+0x160>)
 80070fc:	0006      	movs	r6, r0
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	000f      	movs	r7, r1
 8007102:	b25b      	sxtb	r3, r3
 8007104:	3301      	adds	r3, #1
 8007106:	d018      	beq.n	800713a <pow+0x4e>
 8007108:	0022      	movs	r2, r4
 800710a:	002b      	movs	r3, r5
 800710c:	0020      	movs	r0, r4
 800710e:	0029      	movs	r1, r5
 8007110:	f7fa fe3c 	bl	8001d8c <__aeabi_dcmpun>
 8007114:	2800      	cmp	r0, #0
 8007116:	d110      	bne.n	800713a <pow+0x4e>
 8007118:	9a00      	ldr	r2, [sp, #0]
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	0010      	movs	r0, r2
 800711e:	0019      	movs	r1, r3
 8007120:	f7fa fe34 	bl	8001d8c <__aeabi_dcmpun>
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	2800      	cmp	r0, #0
 800712a:	d00a      	beq.n	8007142 <pow+0x56>
 800712c:	0020      	movs	r0, r4
 800712e:	0029      	movs	r1, r5
 8007130:	f7f9 f890 	bl	8000254 <__aeabi_dcmpeq>
 8007134:	2800      	cmp	r0, #0
 8007136:	d000      	beq.n	800713a <pow+0x4e>
 8007138:	e084      	b.n	8007244 <pow+0x158>
 800713a:	0030      	movs	r0, r6
 800713c:	0039      	movs	r1, r7
 800713e:	b003      	add	sp, #12
 8007140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007142:	9800      	ldr	r0, [sp, #0]
 8007144:	9901      	ldr	r1, [sp, #4]
 8007146:	f7f9 f885 	bl	8000254 <__aeabi_dcmpeq>
 800714a:	2800      	cmp	r0, #0
 800714c:	d01c      	beq.n	8007188 <pow+0x9c>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	0020      	movs	r0, r4
 8007154:	0029      	movs	r1, r5
 8007156:	f7f9 f87d 	bl	8000254 <__aeabi_dcmpeq>
 800715a:	2800      	cmp	r0, #0
 800715c:	d172      	bne.n	8007244 <pow+0x158>
 800715e:	0020      	movs	r0, r4
 8007160:	0029      	movs	r1, r5
 8007162:	f000 fe61 	bl	8007e28 <finite>
 8007166:	2800      	cmp	r0, #0
 8007168:	d0e7      	beq.n	800713a <pow+0x4e>
 800716a:	2200      	movs	r2, #0
 800716c:	2300      	movs	r3, #0
 800716e:	0020      	movs	r0, r4
 8007170:	0029      	movs	r1, r5
 8007172:	f7f9 f875 	bl	8000260 <__aeabi_dcmplt>
 8007176:	2800      	cmp	r0, #0
 8007178:	d0df      	beq.n	800713a <pow+0x4e>
 800717a:	f7ff fb49 	bl	8006810 <__errno>
 800717e:	2321      	movs	r3, #33	; 0x21
 8007180:	2600      	movs	r6, #0
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	4f32      	ldr	r7, [pc, #200]	; (8007250 <pow+0x164>)
 8007186:	e7d8      	b.n	800713a <pow+0x4e>
 8007188:	0030      	movs	r0, r6
 800718a:	0039      	movs	r1, r7
 800718c:	f000 fe4c 	bl	8007e28 <finite>
 8007190:	2800      	cmp	r0, #0
 8007192:	d139      	bne.n	8007208 <pow+0x11c>
 8007194:	9800      	ldr	r0, [sp, #0]
 8007196:	9901      	ldr	r1, [sp, #4]
 8007198:	f000 fe46 	bl	8007e28 <finite>
 800719c:	2800      	cmp	r0, #0
 800719e:	d033      	beq.n	8007208 <pow+0x11c>
 80071a0:	0020      	movs	r0, r4
 80071a2:	0029      	movs	r1, r5
 80071a4:	f000 fe40 	bl	8007e28 <finite>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d02d      	beq.n	8007208 <pow+0x11c>
 80071ac:	0032      	movs	r2, r6
 80071ae:	003b      	movs	r3, r7
 80071b0:	0030      	movs	r0, r6
 80071b2:	0039      	movs	r1, r7
 80071b4:	f7fa fdea 	bl	8001d8c <__aeabi_dcmpun>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d00c      	beq.n	80071d6 <pow+0xea>
 80071bc:	f7ff fb28 	bl	8006810 <__errno>
 80071c0:	2321      	movs	r3, #33	; 0x21
 80071c2:	2200      	movs	r2, #0
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	0010      	movs	r0, r2
 80071ca:	0019      	movs	r1, r3
 80071cc:	f7f9 fbda 	bl	8000984 <__aeabi_ddiv>
 80071d0:	0006      	movs	r6, r0
 80071d2:	000f      	movs	r7, r1
 80071d4:	e7b1      	b.n	800713a <pow+0x4e>
 80071d6:	f7ff fb1b 	bl	8006810 <__errno>
 80071da:	2322      	movs	r3, #34	; 0x22
 80071dc:	2200      	movs	r2, #0
 80071de:	6003      	str	r3, [r0, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	9800      	ldr	r0, [sp, #0]
 80071e4:	9901      	ldr	r1, [sp, #4]
 80071e6:	f7f9 f83b 	bl	8000260 <__aeabi_dcmplt>
 80071ea:	2600      	movs	r6, #0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d009      	beq.n	8007204 <pow+0x118>
 80071f0:	0020      	movs	r0, r4
 80071f2:	0029      	movs	r1, r5
 80071f4:	f000 fe26 	bl	8007e44 <rint>
 80071f8:	0022      	movs	r2, r4
 80071fa:	002b      	movs	r3, r5
 80071fc:	f7f9 f82a 	bl	8000254 <__aeabi_dcmpeq>
 8007200:	2800      	cmp	r0, #0
 8007202:	d0bf      	beq.n	8007184 <pow+0x98>
 8007204:	4f13      	ldr	r7, [pc, #76]	; (8007254 <pow+0x168>)
 8007206:	e798      	b.n	800713a <pow+0x4e>
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	0030      	movs	r0, r6
 800720e:	0039      	movs	r1, r7
 8007210:	f7f9 f820 	bl	8000254 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d100      	bne.n	800721a <pow+0x12e>
 8007218:	e78f      	b.n	800713a <pow+0x4e>
 800721a:	9800      	ldr	r0, [sp, #0]
 800721c:	9901      	ldr	r1, [sp, #4]
 800721e:	f000 fe03 	bl	8007e28 <finite>
 8007222:	2800      	cmp	r0, #0
 8007224:	d100      	bne.n	8007228 <pow+0x13c>
 8007226:	e788      	b.n	800713a <pow+0x4e>
 8007228:	0020      	movs	r0, r4
 800722a:	0029      	movs	r1, r5
 800722c:	f000 fdfc 	bl	8007e28 <finite>
 8007230:	2800      	cmp	r0, #0
 8007232:	d100      	bne.n	8007236 <pow+0x14a>
 8007234:	e781      	b.n	800713a <pow+0x4e>
 8007236:	f7ff faeb 	bl	8006810 <__errno>
 800723a:	2322      	movs	r3, #34	; 0x22
 800723c:	2600      	movs	r6, #0
 800723e:	2700      	movs	r7, #0
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	e77a      	b.n	800713a <pow+0x4e>
 8007244:	2600      	movs	r6, #0
 8007246:	4f04      	ldr	r7, [pc, #16]	; (8007258 <pow+0x16c>)
 8007248:	e777      	b.n	800713a <pow+0x4e>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	20000074 	.word	0x20000074
 8007250:	fff00000 	.word	0xfff00000
 8007254:	7ff00000 	.word	0x7ff00000
 8007258:	3ff00000 	.word	0x3ff00000

0800725c <sqrt>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	0004      	movs	r4, r0
 8007260:	000d      	movs	r5, r1
 8007262:	f000 fd29 	bl	8007cb8 <__ieee754_sqrt>
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <sqrt+0x58>)
 8007268:	0006      	movs	r6, r0
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	000f      	movs	r7, r1
 800726e:	b25b      	sxtb	r3, r3
 8007270:	3301      	adds	r3, #1
 8007272:	d01b      	beq.n	80072ac <sqrt+0x50>
 8007274:	0022      	movs	r2, r4
 8007276:	002b      	movs	r3, r5
 8007278:	0020      	movs	r0, r4
 800727a:	0029      	movs	r1, r5
 800727c:	f7fa fd86 	bl	8001d8c <__aeabi_dcmpun>
 8007280:	2800      	cmp	r0, #0
 8007282:	d113      	bne.n	80072ac <sqrt+0x50>
 8007284:	2200      	movs	r2, #0
 8007286:	2300      	movs	r3, #0
 8007288:	0020      	movs	r0, r4
 800728a:	0029      	movs	r1, r5
 800728c:	f7f8 ffe8 	bl	8000260 <__aeabi_dcmplt>
 8007290:	2800      	cmp	r0, #0
 8007292:	d00b      	beq.n	80072ac <sqrt+0x50>
 8007294:	f7ff fabc 	bl	8006810 <__errno>
 8007298:	2321      	movs	r3, #33	; 0x21
 800729a:	2200      	movs	r2, #0
 800729c:	6003      	str	r3, [r0, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	0010      	movs	r0, r2
 80072a2:	0019      	movs	r1, r3
 80072a4:	f7f9 fb6e 	bl	8000984 <__aeabi_ddiv>
 80072a8:	0006      	movs	r6, r0
 80072aa:	000f      	movs	r7, r1
 80072ac:	0030      	movs	r0, r6
 80072ae:	0039      	movs	r1, r7
 80072b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20000074 	.word	0x20000074

080072b8 <__ieee754_pow>:
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b095      	sub	sp, #84	; 0x54
 80072bc:	9202      	str	r2, [sp, #8]
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	9a03      	ldr	r2, [sp, #12]
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	9b02      	ldr	r3, [sp, #8]
 80072c8:	0055      	lsls	r5, r2, #1
 80072ca:	001a      	movs	r2, r3
 80072cc:	086d      	lsrs	r5, r5, #1
 80072ce:	0007      	movs	r7, r0
 80072d0:	000e      	movs	r6, r1
 80072d2:	432a      	orrs	r2, r5
 80072d4:	d101      	bne.n	80072da <__ieee754_pow+0x22>
 80072d6:	f000 fcb6 	bl	8007c46 <__ieee754_pow+0x98e>
 80072da:	4a82      	ldr	r2, [pc, #520]	; (80074e4 <__ieee754_pow+0x22c>)
 80072dc:	004c      	lsls	r4, r1, #1
 80072de:	9108      	str	r1, [sp, #32]
 80072e0:	9000      	str	r0, [sp, #0]
 80072e2:	0864      	lsrs	r4, r4, #1
 80072e4:	4294      	cmp	r4, r2
 80072e6:	dc0d      	bgt.n	8007304 <__ieee754_pow+0x4c>
 80072e8:	d104      	bne.n	80072f4 <__ieee754_pow+0x3c>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d110      	bne.n	8007310 <__ieee754_pow+0x58>
 80072ee:	42a5      	cmp	r5, r4
 80072f0:	dd03      	ble.n	80072fa <__ieee754_pow+0x42>
 80072f2:	e00d      	b.n	8007310 <__ieee754_pow+0x58>
 80072f4:	4a7b      	ldr	r2, [pc, #492]	; (80074e4 <__ieee754_pow+0x22c>)
 80072f6:	4295      	cmp	r5, r2
 80072f8:	dc04      	bgt.n	8007304 <__ieee754_pow+0x4c>
 80072fa:	4a7a      	ldr	r2, [pc, #488]	; (80074e4 <__ieee754_pow+0x22c>)
 80072fc:	4295      	cmp	r5, r2
 80072fe:	d10d      	bne.n	800731c <__ieee754_pow+0x64>
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <__ieee754_pow+0x64>
 8007304:	4b78      	ldr	r3, [pc, #480]	; (80074e8 <__ieee754_pow+0x230>)
 8007306:	18e4      	adds	r4, r4, r3
 8007308:	4327      	orrs	r7, r4
 800730a:	d101      	bne.n	8007310 <__ieee754_pow+0x58>
 800730c:	f000 fc9b 	bl	8007c46 <__ieee754_pow+0x98e>
 8007310:	4876      	ldr	r0, [pc, #472]	; (80074ec <__ieee754_pow+0x234>)
 8007312:	f000 fd91 	bl	8007e38 <nan>
 8007316:	9000      	str	r0, [sp, #0]
 8007318:	9101      	str	r1, [sp, #4]
 800731a:	e092      	b.n	8007442 <__ieee754_pow+0x18a>
 800731c:	2200      	movs	r2, #0
 800731e:	9206      	str	r2, [sp, #24]
 8007320:	2e00      	cmp	r6, #0
 8007322:	da69      	bge.n	80073f8 <__ieee754_pow+0x140>
 8007324:	4a72      	ldr	r2, [pc, #456]	; (80074f0 <__ieee754_pow+0x238>)
 8007326:	4295      	cmp	r5, r2
 8007328:	dc64      	bgt.n	80073f4 <__ieee754_pow+0x13c>
 800732a:	4a72      	ldr	r2, [pc, #456]	; (80074f4 <__ieee754_pow+0x23c>)
 800732c:	4295      	cmp	r5, r2
 800732e:	dd11      	ble.n	8007354 <__ieee754_pow+0x9c>
 8007330:	4971      	ldr	r1, [pc, #452]	; (80074f8 <__ieee754_pow+0x240>)
 8007332:	152a      	asrs	r2, r5, #20
 8007334:	1852      	adds	r2, r2, r1
 8007336:	2a14      	cmp	r2, #20
 8007338:	dd3c      	ble.n	80073b4 <__ieee754_pow+0xfc>
 800733a:	2134      	movs	r1, #52	; 0x34
 800733c:	1a8a      	subs	r2, r1, r2
 800733e:	9902      	ldr	r1, [sp, #8]
 8007340:	40d1      	lsrs	r1, r2
 8007342:	0008      	movs	r0, r1
 8007344:	4090      	lsls	r0, r2
 8007346:	4298      	cmp	r0, r3
 8007348:	d104      	bne.n	8007354 <__ieee754_pow+0x9c>
 800734a:	2201      	movs	r2, #1
 800734c:	4011      	ands	r1, r2
 800734e:	1892      	adds	r2, r2, r2
 8007350:	1a52      	subs	r2, r2, r1
 8007352:	9206      	str	r2, [sp, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d03c      	beq.n	80073d2 <__ieee754_pow+0x11a>
 8007358:	0038      	movs	r0, r7
 800735a:	0031      	movs	r1, r6
 800735c:	f000 fd60 	bl	8007e20 <fabs>
 8007360:	9000      	str	r0, [sp, #0]
 8007362:	9101      	str	r1, [sp, #4]
 8007364:	2f00      	cmp	r7, #0
 8007366:	d000      	beq.n	800736a <__ieee754_pow+0xb2>
 8007368:	e094      	b.n	8007494 <__ieee754_pow+0x1dc>
 800736a:	2c00      	cmp	r4, #0
 800736c:	d005      	beq.n	800737a <__ieee754_pow+0xc2>
 800736e:	4a63      	ldr	r2, [pc, #396]	; (80074fc <__ieee754_pow+0x244>)
 8007370:	00b3      	lsls	r3, r6, #2
 8007372:	089b      	lsrs	r3, r3, #2
 8007374:	4293      	cmp	r3, r2
 8007376:	d000      	beq.n	800737a <__ieee754_pow+0xc2>
 8007378:	e08c      	b.n	8007494 <__ieee754_pow+0x1dc>
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	da07      	bge.n	8007390 <__ieee754_pow+0xd8>
 8007380:	9a00      	ldr	r2, [sp, #0]
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	2000      	movs	r0, #0
 8007386:	495d      	ldr	r1, [pc, #372]	; (80074fc <__ieee754_pow+0x244>)
 8007388:	f7f9 fafc 	bl	8000984 <__aeabi_ddiv>
 800738c:	9000      	str	r0, [sp, #0]
 800738e:	9101      	str	r1, [sp, #4]
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da55      	bge.n	8007442 <__ieee754_pow+0x18a>
 8007396:	4b54      	ldr	r3, [pc, #336]	; (80074e8 <__ieee754_pow+0x230>)
 8007398:	18e4      	adds	r4, r4, r3
 800739a:	9b06      	ldr	r3, [sp, #24]
 800739c:	431c      	orrs	r4, r3
 800739e:	d000      	beq.n	80073a2 <__ieee754_pow+0xea>
 80073a0:	e06c      	b.n	800747c <__ieee754_pow+0x1c4>
 80073a2:	9a00      	ldr	r2, [sp, #0]
 80073a4:	9b01      	ldr	r3, [sp, #4]
 80073a6:	0010      	movs	r0, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	f7fa f95d 	bl	8001668 <__aeabi_dsub>
 80073ae:	0002      	movs	r2, r0
 80073b0:	000b      	movs	r3, r1
 80073b2:	e01c      	b.n	80073ee <__ieee754_pow+0x136>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1cf      	bne.n	8007358 <__ieee754_pow+0xa0>
 80073b8:	3314      	adds	r3, #20
 80073ba:	1a9a      	subs	r2, r3, r2
 80073bc:	002b      	movs	r3, r5
 80073be:	4113      	asrs	r3, r2
 80073c0:	0019      	movs	r1, r3
 80073c2:	4091      	lsls	r1, r2
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d104      	bne.n	80073d2 <__ieee754_pow+0x11a>
 80073c8:	2201      	movs	r2, #1
 80073ca:	4013      	ands	r3, r2
 80073cc:	1892      	adds	r2, r2, r2
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	9306      	str	r3, [sp, #24]
 80073d2:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <__ieee754_pow+0x244>)
 80073d4:	429d      	cmp	r5, r3
 80073d6:	d138      	bne.n	800744a <__ieee754_pow+0x192>
 80073d8:	0038      	movs	r0, r7
 80073da:	0031      	movs	r1, r6
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	9000      	str	r0, [sp, #0]
 80073e0:	9101      	str	r1, [sp, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da2d      	bge.n	8007442 <__ieee754_pow+0x18a>
 80073e6:	003a      	movs	r2, r7
 80073e8:	0033      	movs	r3, r6
 80073ea:	2000      	movs	r0, #0
 80073ec:	4943      	ldr	r1, [pc, #268]	; (80074fc <__ieee754_pow+0x244>)
 80073ee:	f7f9 fac9 	bl	8000984 <__aeabi_ddiv>
 80073f2:	e790      	b.n	8007316 <__ieee754_pow+0x5e>
 80073f4:	2202      	movs	r2, #2
 80073f6:	9206      	str	r2, [sp, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1ad      	bne.n	8007358 <__ieee754_pow+0xa0>
 80073fc:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <__ieee754_pow+0x22c>)
 80073fe:	429d      	cmp	r5, r3
 8007400:	d1e7      	bne.n	80073d2 <__ieee754_pow+0x11a>
 8007402:	4b39      	ldr	r3, [pc, #228]	; (80074e8 <__ieee754_pow+0x230>)
 8007404:	18e3      	adds	r3, r4, r3
 8007406:	431f      	orrs	r7, r3
 8007408:	d101      	bne.n	800740e <__ieee754_pow+0x156>
 800740a:	f000 fc1c 	bl	8007c46 <__ieee754_pow+0x98e>
 800740e:	4b39      	ldr	r3, [pc, #228]	; (80074f4 <__ieee754_pow+0x23c>)
 8007410:	429c      	cmp	r4, r3
 8007412:	dd0b      	ble.n	800742c <__ieee754_pow+0x174>
 8007414:	9b02      	ldr	r3, [sp, #8]
 8007416:	9c03      	ldr	r4, [sp, #12]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	9401      	str	r4, [sp, #4]
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	da0f      	bge.n	8007442 <__ieee754_pow+0x18a>
 8007422:	2300      	movs	r3, #0
 8007424:	2400      	movs	r4, #0
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	9401      	str	r4, [sp, #4]
 800742a:	e00a      	b.n	8007442 <__ieee754_pow+0x18a>
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	daf7      	bge.n	8007422 <__ieee754_pow+0x16a>
 8007432:	2280      	movs	r2, #128	; 0x80
 8007434:	0612      	lsls	r2, r2, #24
 8007436:	4694      	mov	ip, r2
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	4463      	add	r3, ip
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	9800      	ldr	r0, [sp, #0]
 8007444:	9901      	ldr	r1, [sp, #4]
 8007446:	b015      	add	sp, #84	; 0x54
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	9a04      	ldr	r2, [sp, #16]
 800744e:	05db      	lsls	r3, r3, #23
 8007450:	429a      	cmp	r2, r3
 8007452:	d106      	bne.n	8007462 <__ieee754_pow+0x1aa>
 8007454:	003a      	movs	r2, r7
 8007456:	0033      	movs	r3, r6
 8007458:	0038      	movs	r0, r7
 800745a:	0031      	movs	r1, r6
 800745c:	f7f9 fe98 	bl	8001190 <__aeabi_dmul>
 8007460:	e759      	b.n	8007316 <__ieee754_pow+0x5e>
 8007462:	4b27      	ldr	r3, [pc, #156]	; (8007500 <__ieee754_pow+0x248>)
 8007464:	9a04      	ldr	r2, [sp, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d000      	beq.n	800746c <__ieee754_pow+0x1b4>
 800746a:	e775      	b.n	8007358 <__ieee754_pow+0xa0>
 800746c:	2e00      	cmp	r6, #0
 800746e:	da00      	bge.n	8007472 <__ieee754_pow+0x1ba>
 8007470:	e772      	b.n	8007358 <__ieee754_pow+0xa0>
 8007472:	0038      	movs	r0, r7
 8007474:	0031      	movs	r1, r6
 8007476:	f000 fc1f 	bl	8007cb8 <__ieee754_sqrt>
 800747a:	e74c      	b.n	8007316 <__ieee754_pow+0x5e>
 800747c:	9b06      	ldr	r3, [sp, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d1df      	bne.n	8007442 <__ieee754_pow+0x18a>
 8007482:	9800      	ldr	r0, [sp, #0]
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	0002      	movs	r2, r0
 8007488:	9801      	ldr	r0, [sp, #4]
 800748a:	0609      	lsls	r1, r1, #24
 800748c:	1843      	adds	r3, r0, r1
 800748e:	9200      	str	r2, [sp, #0]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	e7d6      	b.n	8007442 <__ieee754_pow+0x18a>
 8007494:	0ff3      	lsrs	r3, r6, #31
 8007496:	3b01      	subs	r3, #1
 8007498:	9310      	str	r3, [sp, #64]	; 0x40
 800749a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	4313      	orrs	r3, r2
 80074a0:	d104      	bne.n	80074ac <__ieee754_pow+0x1f4>
 80074a2:	003a      	movs	r2, r7
 80074a4:	0033      	movs	r3, r6
 80074a6:	0038      	movs	r0, r7
 80074a8:	0031      	movs	r1, r6
 80074aa:	e77e      	b.n	80073aa <__ieee754_pow+0xf2>
 80074ac:	4b15      	ldr	r3, [pc, #84]	; (8007504 <__ieee754_pow+0x24c>)
 80074ae:	429d      	cmp	r5, r3
 80074b0:	dc00      	bgt.n	80074b4 <__ieee754_pow+0x1fc>
 80074b2:	e0f5      	b.n	80076a0 <__ieee754_pow+0x3e8>
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <__ieee754_pow+0x250>)
 80074b6:	429d      	cmp	r5, r3
 80074b8:	dd0a      	ble.n	80074d0 <__ieee754_pow+0x218>
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <__ieee754_pow+0x23c>)
 80074bc:	429c      	cmp	r4, r3
 80074be:	dc0d      	bgt.n	80074dc <__ieee754_pow+0x224>
 80074c0:	9b04      	ldr	r3, [sp, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	daad      	bge.n	8007422 <__ieee754_pow+0x16a>
 80074c6:	4a11      	ldr	r2, [pc, #68]	; (800750c <__ieee754_pow+0x254>)
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <__ieee754_pow+0x258>)
 80074ca:	0010      	movs	r0, r2
 80074cc:	0019      	movs	r1, r3
 80074ce:	e7c5      	b.n	800745c <__ieee754_pow+0x1a4>
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <__ieee754_pow+0x25c>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	ddf4      	ble.n	80074c0 <__ieee754_pow+0x208>
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <__ieee754_pow+0x244>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	dd1d      	ble.n	8007518 <__ieee754_pow+0x260>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dcf1      	bgt.n	80074c6 <__ieee754_pow+0x20e>
 80074e2:	e79e      	b.n	8007422 <__ieee754_pow+0x16a>
 80074e4:	7ff00000 	.word	0x7ff00000
 80074e8:	c0100000 	.word	0xc0100000
 80074ec:	080081c9 	.word	0x080081c9
 80074f0:	433fffff 	.word	0x433fffff
 80074f4:	3fefffff 	.word	0x3fefffff
 80074f8:	fffffc01 	.word	0xfffffc01
 80074fc:	3ff00000 	.word	0x3ff00000
 8007500:	3fe00000 	.word	0x3fe00000
 8007504:	41e00000 	.word	0x41e00000
 8007508:	43f00000 	.word	0x43f00000
 800750c:	8800759c 	.word	0x8800759c
 8007510:	7e37e43c 	.word	0x7e37e43c
 8007514:	3feffffe 	.word	0x3feffffe
 8007518:	2200      	movs	r2, #0
 800751a:	9800      	ldr	r0, [sp, #0]
 800751c:	9901      	ldr	r1, [sp, #4]
 800751e:	4b52      	ldr	r3, [pc, #328]	; (8007668 <__ieee754_pow+0x3b0>)
 8007520:	f7fa f8a2 	bl	8001668 <__aeabi_dsub>
 8007524:	22c0      	movs	r2, #192	; 0xc0
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <__ieee754_pow+0x3b4>)
 8007528:	05d2      	lsls	r2, r2, #23
 800752a:	0004      	movs	r4, r0
 800752c:	000d      	movs	r5, r1
 800752e:	f7f9 fe2f 	bl	8001190 <__aeabi_dmul>
 8007532:	4a4f      	ldr	r2, [pc, #316]	; (8007670 <__ieee754_pow+0x3b8>)
 8007534:	9000      	str	r0, [sp, #0]
 8007536:	9101      	str	r1, [sp, #4]
 8007538:	4b4e      	ldr	r3, [pc, #312]	; (8007674 <__ieee754_pow+0x3bc>)
 800753a:	0020      	movs	r0, r4
 800753c:	0029      	movs	r1, r5
 800753e:	f7f9 fe27 	bl	8001190 <__aeabi_dmul>
 8007542:	2200      	movs	r2, #0
 8007544:	9004      	str	r0, [sp, #16]
 8007546:	9105      	str	r1, [sp, #20]
 8007548:	4b4b      	ldr	r3, [pc, #300]	; (8007678 <__ieee754_pow+0x3c0>)
 800754a:	0020      	movs	r0, r4
 800754c:	0029      	movs	r1, r5
 800754e:	f7f9 fe1f 	bl	8001190 <__aeabi_dmul>
 8007552:	0002      	movs	r2, r0
 8007554:	000b      	movs	r3, r1
 8007556:	4849      	ldr	r0, [pc, #292]	; (800767c <__ieee754_pow+0x3c4>)
 8007558:	4949      	ldr	r1, [pc, #292]	; (8007680 <__ieee754_pow+0x3c8>)
 800755a:	f7fa f885 	bl	8001668 <__aeabi_dsub>
 800755e:	0022      	movs	r2, r4
 8007560:	002b      	movs	r3, r5
 8007562:	f7f9 fe15 	bl	8001190 <__aeabi_dmul>
 8007566:	0002      	movs	r2, r0
 8007568:	000b      	movs	r3, r1
 800756a:	2000      	movs	r0, #0
 800756c:	4945      	ldr	r1, [pc, #276]	; (8007684 <__ieee754_pow+0x3cc>)
 800756e:	f7fa f87b 	bl	8001668 <__aeabi_dsub>
 8007572:	0022      	movs	r2, r4
 8007574:	0006      	movs	r6, r0
 8007576:	000f      	movs	r7, r1
 8007578:	002b      	movs	r3, r5
 800757a:	0020      	movs	r0, r4
 800757c:	0029      	movs	r1, r5
 800757e:	f7f9 fe07 	bl	8001190 <__aeabi_dmul>
 8007582:	0002      	movs	r2, r0
 8007584:	000b      	movs	r3, r1
 8007586:	0030      	movs	r0, r6
 8007588:	0039      	movs	r1, r7
 800758a:	f7f9 fe01 	bl	8001190 <__aeabi_dmul>
 800758e:	4a3e      	ldr	r2, [pc, #248]	; (8007688 <__ieee754_pow+0x3d0>)
 8007590:	4b36      	ldr	r3, [pc, #216]	; (800766c <__ieee754_pow+0x3b4>)
 8007592:	f7f9 fdfd 	bl	8001190 <__aeabi_dmul>
 8007596:	0002      	movs	r2, r0
 8007598:	000b      	movs	r3, r1
 800759a:	9804      	ldr	r0, [sp, #16]
 800759c:	9905      	ldr	r1, [sp, #20]
 800759e:	f7fa f863 	bl	8001668 <__aeabi_dsub>
 80075a2:	0002      	movs	r2, r0
 80075a4:	000b      	movs	r3, r1
 80075a6:	0004      	movs	r4, r0
 80075a8:	000d      	movs	r5, r1
 80075aa:	9800      	ldr	r0, [sp, #0]
 80075ac:	9901      	ldr	r1, [sp, #4]
 80075ae:	f7f8 fe7f 	bl	80002b0 <__aeabi_dadd>
 80075b2:	9a00      	ldr	r2, [sp, #0]
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	2000      	movs	r0, #0
 80075b8:	000f      	movs	r7, r1
 80075ba:	0006      	movs	r6, r0
 80075bc:	f7fa f854 	bl	8001668 <__aeabi_dsub>
 80075c0:	0002      	movs	r2, r0
 80075c2:	000b      	movs	r3, r1
 80075c4:	0020      	movs	r0, r4
 80075c6:	0029      	movs	r1, r5
 80075c8:	f7fa f84e 	bl	8001668 <__aeabi_dsub>
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075d0:	3b01      	subs	r3, #1
 80075d2:	9004      	str	r0, [sp, #16]
 80075d4:	9105      	str	r1, [sp, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	d000      	beq.n	80075dc <__ieee754_pow+0x324>
 80075da:	e1e0      	b.n	800799e <__ieee754_pow+0x6e6>
 80075dc:	2300      	movs	r3, #0
 80075de:	4c2b      	ldr	r4, [pc, #172]	; (800768c <__ieee754_pow+0x3d4>)
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	9401      	str	r4, [sp, #4]
 80075e4:	9c02      	ldr	r4, [sp, #8]
 80075e6:	9d03      	ldr	r5, [sp, #12]
 80075e8:	9802      	ldr	r0, [sp, #8]
 80075ea:	9903      	ldr	r1, [sp, #12]
 80075ec:	2400      	movs	r4, #0
 80075ee:	002b      	movs	r3, r5
 80075f0:	0022      	movs	r2, r4
 80075f2:	f7fa f839 	bl	8001668 <__aeabi_dsub>
 80075f6:	0032      	movs	r2, r6
 80075f8:	003b      	movs	r3, r7
 80075fa:	f7f9 fdc9 	bl	8001190 <__aeabi_dmul>
 80075fe:	9a02      	ldr	r2, [sp, #8]
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	9006      	str	r0, [sp, #24]
 8007604:	9107      	str	r1, [sp, #28]
 8007606:	9804      	ldr	r0, [sp, #16]
 8007608:	9905      	ldr	r1, [sp, #20]
 800760a:	f7f9 fdc1 	bl	8001190 <__aeabi_dmul>
 800760e:	0002      	movs	r2, r0
 8007610:	000b      	movs	r3, r1
 8007612:	9806      	ldr	r0, [sp, #24]
 8007614:	9907      	ldr	r1, [sp, #28]
 8007616:	f7f8 fe4b 	bl	80002b0 <__aeabi_dadd>
 800761a:	0022      	movs	r2, r4
 800761c:	002b      	movs	r3, r5
 800761e:	9004      	str	r0, [sp, #16]
 8007620:	9105      	str	r1, [sp, #20]
 8007622:	0030      	movs	r0, r6
 8007624:	0039      	movs	r1, r7
 8007626:	f7f9 fdb3 	bl	8001190 <__aeabi_dmul>
 800762a:	0006      	movs	r6, r0
 800762c:	000f      	movs	r7, r1
 800762e:	000b      	movs	r3, r1
 8007630:	0002      	movs	r2, r0
 8007632:	9804      	ldr	r0, [sp, #16]
 8007634:	9905      	ldr	r1, [sp, #20]
 8007636:	9606      	str	r6, [sp, #24]
 8007638:	9707      	str	r7, [sp, #28]
 800763a:	f7f8 fe39 	bl	80002b0 <__aeabi_dadd>
 800763e:	4b14      	ldr	r3, [pc, #80]	; (8007690 <__ieee754_pow+0x3d8>)
 8007640:	0005      	movs	r5, r0
 8007642:	000c      	movs	r4, r1
 8007644:	9108      	str	r1, [sp, #32]
 8007646:	4299      	cmp	r1, r3
 8007648:	dc00      	bgt.n	800764c <__ieee754_pow+0x394>
 800764a:	e2da      	b.n	8007c02 <__ieee754_pow+0x94a>
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <__ieee754_pow+0x3dc>)
 800764e:	18cb      	adds	r3, r1, r3
 8007650:	4303      	orrs	r3, r0
 8007652:	d100      	bne.n	8007656 <__ieee754_pow+0x39e>
 8007654:	e1dc      	b.n	8007a10 <__ieee754_pow+0x758>
 8007656:	9800      	ldr	r0, [sp, #0]
 8007658:	9901      	ldr	r1, [sp, #4]
 800765a:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <__ieee754_pow+0x3e0>)
 800765c:	4b0f      	ldr	r3, [pc, #60]	; (800769c <__ieee754_pow+0x3e4>)
 800765e:	f7f9 fd97 	bl	8001190 <__aeabi_dmul>
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <__ieee754_pow+0x3e0>)
 8007664:	4b0d      	ldr	r3, [pc, #52]	; (800769c <__ieee754_pow+0x3e4>)
 8007666:	e6f9      	b.n	800745c <__ieee754_pow+0x1a4>
 8007668:	3ff00000 	.word	0x3ff00000
 800766c:	3ff71547 	.word	0x3ff71547
 8007670:	f85ddf44 	.word	0xf85ddf44
 8007674:	3e54ae0b 	.word	0x3e54ae0b
 8007678:	3fd00000 	.word	0x3fd00000
 800767c:	55555555 	.word	0x55555555
 8007680:	3fd55555 	.word	0x3fd55555
 8007684:	3fe00000 	.word	0x3fe00000
 8007688:	652b82fe 	.word	0x652b82fe
 800768c:	bff00000 	.word	0xbff00000
 8007690:	408fffff 	.word	0x408fffff
 8007694:	bf700000 	.word	0xbf700000
 8007698:	8800759c 	.word	0x8800759c
 800769c:	7e37e43c 	.word	0x7e37e43c
 80076a0:	4bc0      	ldr	r3, [pc, #768]	; (80079a4 <__ieee754_pow+0x6ec>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	4233      	tst	r3, r6
 80076a6:	d10a      	bne.n	80076be <__ieee754_pow+0x406>
 80076a8:	9800      	ldr	r0, [sp, #0]
 80076aa:	9901      	ldr	r1, [sp, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	4bbe      	ldr	r3, [pc, #760]	; (80079a8 <__ieee754_pow+0x6f0>)
 80076b0:	f7f9 fd6e 	bl	8001190 <__aeabi_dmul>
 80076b4:	2235      	movs	r2, #53	; 0x35
 80076b6:	9000      	str	r0, [sp, #0]
 80076b8:	9101      	str	r1, [sp, #4]
 80076ba:	9c01      	ldr	r4, [sp, #4]
 80076bc:	4252      	negs	r2, r2
 80076be:	49bb      	ldr	r1, [pc, #748]	; (80079ac <__ieee754_pow+0x6f4>)
 80076c0:	1523      	asrs	r3, r4, #20
 80076c2:	185b      	adds	r3, r3, r1
 80076c4:	189b      	adds	r3, r3, r2
 80076c6:	0324      	lsls	r4, r4, #12
 80076c8:	4db9      	ldr	r5, [pc, #740]	; (80079b0 <__ieee754_pow+0x6f8>)
 80076ca:	930d      	str	r3, [sp, #52]	; 0x34
 80076cc:	4bb9      	ldr	r3, [pc, #740]	; (80079b4 <__ieee754_pow+0x6fc>)
 80076ce:	0b22      	lsrs	r2, r4, #12
 80076d0:	4315      	orrs	r5, r2
 80076d2:	2400      	movs	r4, #0
 80076d4:	429a      	cmp	r2, r3
 80076d6:	dd09      	ble.n	80076ec <__ieee754_pow+0x434>
 80076d8:	4bb7      	ldr	r3, [pc, #732]	; (80079b8 <__ieee754_pow+0x700>)
 80076da:	3401      	adds	r4, #1
 80076dc:	429a      	cmp	r2, r3
 80076de:	dd05      	ble.n	80076ec <__ieee754_pow+0x434>
 80076e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e2:	191b      	adds	r3, r3, r4
 80076e4:	2400      	movs	r4, #0
 80076e6:	930d      	str	r3, [sp, #52]	; 0x34
 80076e8:	4bb4      	ldr	r3, [pc, #720]	; (80079bc <__ieee754_pow+0x704>)
 80076ea:	18ed      	adds	r5, r5, r3
 80076ec:	9800      	ldr	r0, [sp, #0]
 80076ee:	9901      	ldr	r1, [sp, #4]
 80076f0:	0029      	movs	r1, r5
 80076f2:	00e3      	lsls	r3, r4, #3
 80076f4:	9311      	str	r3, [sp, #68]	; 0x44
 80076f6:	4bb2      	ldr	r3, [pc, #712]	; (80079c0 <__ieee754_pow+0x708>)
 80076f8:	00e2      	lsls	r2, r4, #3
 80076fa:	189b      	adds	r3, r3, r2
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	900e      	str	r0, [sp, #56]	; 0x38
 8007702:	910f      	str	r1, [sp, #60]	; 0x3c
 8007704:	920a      	str	r2, [sp, #40]	; 0x28
 8007706:	930b      	str	r3, [sp, #44]	; 0x2c
 8007708:	f7f9 ffae 	bl	8001668 <__aeabi_dsub>
 800770c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800770e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007710:	0006      	movs	r6, r0
 8007712:	000f      	movs	r7, r1
 8007714:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007718:	f7f8 fdca 	bl	80002b0 <__aeabi_dadd>
 800771c:	0002      	movs	r2, r0
 800771e:	000b      	movs	r3, r1
 8007720:	2000      	movs	r0, #0
 8007722:	49a3      	ldr	r1, [pc, #652]	; (80079b0 <__ieee754_pow+0x6f8>)
 8007724:	f7f9 f92e 	bl	8000984 <__aeabi_ddiv>
 8007728:	0002      	movs	r2, r0
 800772a:	000b      	movs	r3, r1
 800772c:	9012      	str	r0, [sp, #72]	; 0x48
 800772e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007730:	0030      	movs	r0, r6
 8007732:	0039      	movs	r1, r7
 8007734:	f7f9 fd2c 	bl	8001190 <__aeabi_dmul>
 8007738:	9008      	str	r0, [sp, #32]
 800773a:	9109      	str	r1, [sp, #36]	; 0x24
 800773c:	9a08      	ldr	r2, [sp, #32]
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	9204      	str	r2, [sp, #16]
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	0589      	lsls	r1, r1, #22
 800774a:	106d      	asrs	r5, r5, #1
 800774c:	430d      	orrs	r5, r1
 800774e:	2180      	movs	r1, #128	; 0x80
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	9a04      	ldr	r2, [sp, #16]
 8007754:	9b05      	ldr	r3, [sp, #20]
 8007756:	9200      	str	r2, [sp, #0]
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	0309      	lsls	r1, r1, #12
 800775e:	186d      	adds	r5, r5, r1
 8007760:	04a1      	lsls	r1, r4, #18
 8007762:	186b      	adds	r3, r5, r1
 8007764:	9800      	ldr	r0, [sp, #0]
 8007766:	9901      	ldr	r1, [sp, #4]
 8007768:	0014      	movs	r4, r2
 800776a:	001d      	movs	r5, r3
 800776c:	f7f9 fd10 	bl	8001190 <__aeabi_dmul>
 8007770:	0002      	movs	r2, r0
 8007772:	000b      	movs	r3, r1
 8007774:	0030      	movs	r0, r6
 8007776:	0039      	movs	r1, r7
 8007778:	f7f9 ff76 	bl	8001668 <__aeabi_dsub>
 800777c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800777e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007780:	0006      	movs	r6, r0
 8007782:	000f      	movs	r7, r1
 8007784:	0020      	movs	r0, r4
 8007786:	0029      	movs	r1, r5
 8007788:	f7f9 ff6e 	bl	8001668 <__aeabi_dsub>
 800778c:	0002      	movs	r2, r0
 800778e:	000b      	movs	r3, r1
 8007790:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007792:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007794:	f7f9 ff68 	bl	8001668 <__aeabi_dsub>
 8007798:	9a00      	ldr	r2, [sp, #0]
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	f7f9 fcf8 	bl	8001190 <__aeabi_dmul>
 80077a0:	0002      	movs	r2, r0
 80077a2:	000b      	movs	r3, r1
 80077a4:	0030      	movs	r0, r6
 80077a6:	0039      	movs	r1, r7
 80077a8:	f7f9 ff5e 	bl	8001668 <__aeabi_dsub>
 80077ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077b0:	f7f9 fcee 	bl	8001190 <__aeabi_dmul>
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b8:	900a      	str	r0, [sp, #40]	; 0x28
 80077ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80077bc:	0010      	movs	r0, r2
 80077be:	0019      	movs	r1, r3
 80077c0:	f7f9 fce6 	bl	8001190 <__aeabi_dmul>
 80077c4:	0006      	movs	r6, r0
 80077c6:	000f      	movs	r7, r1
 80077c8:	4a7e      	ldr	r2, [pc, #504]	; (80079c4 <__ieee754_pow+0x70c>)
 80077ca:	4b7f      	ldr	r3, [pc, #508]	; (80079c8 <__ieee754_pow+0x710>)
 80077cc:	f7f9 fce0 	bl	8001190 <__aeabi_dmul>
 80077d0:	4a7e      	ldr	r2, [pc, #504]	; (80079cc <__ieee754_pow+0x714>)
 80077d2:	4b7f      	ldr	r3, [pc, #508]	; (80079d0 <__ieee754_pow+0x718>)
 80077d4:	f7f8 fd6c 	bl	80002b0 <__aeabi_dadd>
 80077d8:	0032      	movs	r2, r6
 80077da:	003b      	movs	r3, r7
 80077dc:	f7f9 fcd8 	bl	8001190 <__aeabi_dmul>
 80077e0:	4a7c      	ldr	r2, [pc, #496]	; (80079d4 <__ieee754_pow+0x71c>)
 80077e2:	4b7d      	ldr	r3, [pc, #500]	; (80079d8 <__ieee754_pow+0x720>)
 80077e4:	f7f8 fd64 	bl	80002b0 <__aeabi_dadd>
 80077e8:	0032      	movs	r2, r6
 80077ea:	003b      	movs	r3, r7
 80077ec:	f7f9 fcd0 	bl	8001190 <__aeabi_dmul>
 80077f0:	4a7a      	ldr	r2, [pc, #488]	; (80079dc <__ieee754_pow+0x724>)
 80077f2:	4b7b      	ldr	r3, [pc, #492]	; (80079e0 <__ieee754_pow+0x728>)
 80077f4:	f7f8 fd5c 	bl	80002b0 <__aeabi_dadd>
 80077f8:	0032      	movs	r2, r6
 80077fa:	003b      	movs	r3, r7
 80077fc:	f7f9 fcc8 	bl	8001190 <__aeabi_dmul>
 8007800:	4a78      	ldr	r2, [pc, #480]	; (80079e4 <__ieee754_pow+0x72c>)
 8007802:	4b79      	ldr	r3, [pc, #484]	; (80079e8 <__ieee754_pow+0x730>)
 8007804:	f7f8 fd54 	bl	80002b0 <__aeabi_dadd>
 8007808:	0032      	movs	r2, r6
 800780a:	003b      	movs	r3, r7
 800780c:	f7f9 fcc0 	bl	8001190 <__aeabi_dmul>
 8007810:	4a76      	ldr	r2, [pc, #472]	; (80079ec <__ieee754_pow+0x734>)
 8007812:	4b77      	ldr	r3, [pc, #476]	; (80079f0 <__ieee754_pow+0x738>)
 8007814:	f7f8 fd4c 	bl	80002b0 <__aeabi_dadd>
 8007818:	0032      	movs	r2, r6
 800781a:	0004      	movs	r4, r0
 800781c:	000d      	movs	r5, r1
 800781e:	003b      	movs	r3, r7
 8007820:	0030      	movs	r0, r6
 8007822:	0039      	movs	r1, r7
 8007824:	f7f9 fcb4 	bl	8001190 <__aeabi_dmul>
 8007828:	0002      	movs	r2, r0
 800782a:	000b      	movs	r3, r1
 800782c:	0020      	movs	r0, r4
 800782e:	0029      	movs	r1, r5
 8007830:	f7f9 fcae 	bl	8001190 <__aeabi_dmul>
 8007834:	9a00      	ldr	r2, [sp, #0]
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	0004      	movs	r4, r0
 800783a:	000d      	movs	r5, r1
 800783c:	9808      	ldr	r0, [sp, #32]
 800783e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007840:	f7f8 fd36 	bl	80002b0 <__aeabi_dadd>
 8007844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007848:	f7f9 fca2 	bl	8001190 <__aeabi_dmul>
 800784c:	0022      	movs	r2, r4
 800784e:	002b      	movs	r3, r5
 8007850:	f7f8 fd2e 	bl	80002b0 <__aeabi_dadd>
 8007854:	9a00      	ldr	r2, [sp, #0]
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	900e      	str	r0, [sp, #56]	; 0x38
 800785a:	910f      	str	r1, [sp, #60]	; 0x3c
 800785c:	0010      	movs	r0, r2
 800785e:	0019      	movs	r1, r3
 8007860:	f7f9 fc96 	bl	8001190 <__aeabi_dmul>
 8007864:	2200      	movs	r2, #0
 8007866:	4b63      	ldr	r3, [pc, #396]	; (80079f4 <__ieee754_pow+0x73c>)
 8007868:	0004      	movs	r4, r0
 800786a:	000d      	movs	r5, r1
 800786c:	f7f8 fd20 	bl	80002b0 <__aeabi_dadd>
 8007870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007874:	f7f8 fd1c 	bl	80002b0 <__aeabi_dadd>
 8007878:	9e04      	ldr	r6, [sp, #16]
 800787a:	000f      	movs	r7, r1
 800787c:	0032      	movs	r2, r6
 800787e:	000b      	movs	r3, r1
 8007880:	9800      	ldr	r0, [sp, #0]
 8007882:	9901      	ldr	r1, [sp, #4]
 8007884:	f7f9 fc84 	bl	8001190 <__aeabi_dmul>
 8007888:	2200      	movs	r2, #0
 800788a:	9000      	str	r0, [sp, #0]
 800788c:	9101      	str	r1, [sp, #4]
 800788e:	4b59      	ldr	r3, [pc, #356]	; (80079f4 <__ieee754_pow+0x73c>)
 8007890:	0030      	movs	r0, r6
 8007892:	0039      	movs	r1, r7
 8007894:	f7f9 fee8 	bl	8001668 <__aeabi_dsub>
 8007898:	0022      	movs	r2, r4
 800789a:	002b      	movs	r3, r5
 800789c:	f7f9 fee4 	bl	8001668 <__aeabi_dsub>
 80078a0:	0002      	movs	r2, r0
 80078a2:	000b      	movs	r3, r1
 80078a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078a8:	f7f9 fede 	bl	8001668 <__aeabi_dsub>
 80078ac:	9a08      	ldr	r2, [sp, #32]
 80078ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b0:	f7f9 fc6e 	bl	8001190 <__aeabi_dmul>
 80078b4:	0032      	movs	r2, r6
 80078b6:	0004      	movs	r4, r0
 80078b8:	000d      	movs	r5, r1
 80078ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078be:	003b      	movs	r3, r7
 80078c0:	f7f9 fc66 	bl	8001190 <__aeabi_dmul>
 80078c4:	0002      	movs	r2, r0
 80078c6:	000b      	movs	r3, r1
 80078c8:	0020      	movs	r0, r4
 80078ca:	0029      	movs	r1, r5
 80078cc:	f7f8 fcf0 	bl	80002b0 <__aeabi_dadd>
 80078d0:	0004      	movs	r4, r0
 80078d2:	000d      	movs	r5, r1
 80078d4:	0002      	movs	r2, r0
 80078d6:	000b      	movs	r3, r1
 80078d8:	9800      	ldr	r0, [sp, #0]
 80078da:	9901      	ldr	r1, [sp, #4]
 80078dc:	f7f8 fce8 	bl	80002b0 <__aeabi_dadd>
 80078e0:	22e0      	movs	r2, #224	; 0xe0
 80078e2:	9e04      	ldr	r6, [sp, #16]
 80078e4:	4b44      	ldr	r3, [pc, #272]	; (80079f8 <__ieee754_pow+0x740>)
 80078e6:	0030      	movs	r0, r6
 80078e8:	0612      	lsls	r2, r2, #24
 80078ea:	000f      	movs	r7, r1
 80078ec:	f7f9 fc50 	bl	8001190 <__aeabi_dmul>
 80078f0:	9008      	str	r0, [sp, #32]
 80078f2:	9109      	str	r1, [sp, #36]	; 0x24
 80078f4:	9a00      	ldr	r2, [sp, #0]
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	0030      	movs	r0, r6
 80078fa:	0039      	movs	r1, r7
 80078fc:	f7f9 feb4 	bl	8001668 <__aeabi_dsub>
 8007900:	0002      	movs	r2, r0
 8007902:	000b      	movs	r3, r1
 8007904:	0020      	movs	r0, r4
 8007906:	0029      	movs	r1, r5
 8007908:	f7f9 feae 	bl	8001668 <__aeabi_dsub>
 800790c:	4a3b      	ldr	r2, [pc, #236]	; (80079fc <__ieee754_pow+0x744>)
 800790e:	4b3a      	ldr	r3, [pc, #232]	; (80079f8 <__ieee754_pow+0x740>)
 8007910:	f7f9 fc3e 	bl	8001190 <__aeabi_dmul>
 8007914:	4a3a      	ldr	r2, [pc, #232]	; (8007a00 <__ieee754_pow+0x748>)
 8007916:	0004      	movs	r4, r0
 8007918:	000d      	movs	r5, r1
 800791a:	0030      	movs	r0, r6
 800791c:	0039      	movs	r1, r7
 800791e:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <__ieee754_pow+0x74c>)
 8007920:	f7f9 fc36 	bl	8001190 <__aeabi_dmul>
 8007924:	0002      	movs	r2, r0
 8007926:	000b      	movs	r3, r1
 8007928:	0020      	movs	r0, r4
 800792a:	0029      	movs	r1, r5
 800792c:	f7f8 fcc0 	bl	80002b0 <__aeabi_dadd>
 8007930:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <__ieee754_pow+0x750>)
 8007934:	189b      	adds	r3, r3, r2
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f7f8 fcb9 	bl	80002b0 <__aeabi_dadd>
 800793e:	900a      	str	r0, [sp, #40]	; 0x28
 8007940:	910b      	str	r1, [sp, #44]	; 0x2c
 8007942:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007944:	f7fa fa76 	bl	8001e34 <__aeabi_i2d>
 8007948:	0004      	movs	r4, r0
 800794a:	000d      	movs	r5, r1
 800794c:	9808      	ldr	r0, [sp, #32]
 800794e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007950:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007952:	4b2e      	ldr	r3, [pc, #184]	; (8007a0c <__ieee754_pow+0x754>)
 8007954:	189b      	adds	r3, r3, r2
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	9200      	str	r2, [sp, #0]
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007962:	f7f8 fca5 	bl	80002b0 <__aeabi_dadd>
 8007966:	9a00      	ldr	r2, [sp, #0]
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	f7f8 fca1 	bl	80002b0 <__aeabi_dadd>
 800796e:	0022      	movs	r2, r4
 8007970:	002b      	movs	r3, r5
 8007972:	f7f8 fc9d 	bl	80002b0 <__aeabi_dadd>
 8007976:	9804      	ldr	r0, [sp, #16]
 8007978:	0022      	movs	r2, r4
 800797a:	002b      	movs	r3, r5
 800797c:	0006      	movs	r6, r0
 800797e:	000f      	movs	r7, r1
 8007980:	f7f9 fe72 	bl	8001668 <__aeabi_dsub>
 8007984:	9a00      	ldr	r2, [sp, #0]
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	f7f9 fe6e 	bl	8001668 <__aeabi_dsub>
 800798c:	9a08      	ldr	r2, [sp, #32]
 800798e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007990:	f7f9 fe6a 	bl	8001668 <__aeabi_dsub>
 8007994:	0002      	movs	r2, r0
 8007996:	000b      	movs	r3, r1
 8007998:	980a      	ldr	r0, [sp, #40]	; 0x28
 800799a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800799c:	e614      	b.n	80075c8 <__ieee754_pow+0x310>
 800799e:	2300      	movs	r3, #0
 80079a0:	4c03      	ldr	r4, [pc, #12]	; (80079b0 <__ieee754_pow+0x6f8>)
 80079a2:	e61d      	b.n	80075e0 <__ieee754_pow+0x328>
 80079a4:	7ff00000 	.word	0x7ff00000
 80079a8:	43400000 	.word	0x43400000
 80079ac:	fffffc01 	.word	0xfffffc01
 80079b0:	3ff00000 	.word	0x3ff00000
 80079b4:	0003988e 	.word	0x0003988e
 80079b8:	000bb679 	.word	0x000bb679
 80079bc:	fff00000 	.word	0xfff00000
 80079c0:	080081f8 	.word	0x080081f8
 80079c4:	4a454eef 	.word	0x4a454eef
 80079c8:	3fca7e28 	.word	0x3fca7e28
 80079cc:	93c9db65 	.word	0x93c9db65
 80079d0:	3fcd864a 	.word	0x3fcd864a
 80079d4:	a91d4101 	.word	0xa91d4101
 80079d8:	3fd17460 	.word	0x3fd17460
 80079dc:	518f264d 	.word	0x518f264d
 80079e0:	3fd55555 	.word	0x3fd55555
 80079e4:	db6fabff 	.word	0xdb6fabff
 80079e8:	3fdb6db6 	.word	0x3fdb6db6
 80079ec:	33333303 	.word	0x33333303
 80079f0:	3fe33333 	.word	0x3fe33333
 80079f4:	40080000 	.word	0x40080000
 80079f8:	3feec709 	.word	0x3feec709
 80079fc:	dc3a03fd 	.word	0xdc3a03fd
 8007a00:	145b01f5 	.word	0x145b01f5
 8007a04:	be3e2fe0 	.word	0xbe3e2fe0
 8007a08:	08008218 	.word	0x08008218
 8007a0c:	08008208 	.word	0x08008208
 8007a10:	4a8f      	ldr	r2, [pc, #572]	; (8007c50 <__ieee754_pow+0x998>)
 8007a12:	4b90      	ldr	r3, [pc, #576]	; (8007c54 <__ieee754_pow+0x99c>)
 8007a14:	9804      	ldr	r0, [sp, #16]
 8007a16:	9905      	ldr	r1, [sp, #20]
 8007a18:	f7f8 fc4a 	bl	80002b0 <__aeabi_dadd>
 8007a1c:	0032      	movs	r2, r6
 8007a1e:	9002      	str	r0, [sp, #8]
 8007a20:	9103      	str	r1, [sp, #12]
 8007a22:	003b      	movs	r3, r7
 8007a24:	0028      	movs	r0, r5
 8007a26:	0021      	movs	r1, r4
 8007a28:	f7f9 fe1e 	bl	8001668 <__aeabi_dsub>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	000b      	movs	r3, r1
 8007a30:	9802      	ldr	r0, [sp, #8]
 8007a32:	9903      	ldr	r1, [sp, #12]
 8007a34:	f7f8 fc28 	bl	8000288 <__aeabi_dcmpgt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d000      	beq.n	8007a3e <__ieee754_pow+0x786>
 8007a3c:	e60b      	b.n	8007656 <__ieee754_pow+0x39e>
 8007a3e:	2100      	movs	r1, #0
 8007a40:	4a85      	ldr	r2, [pc, #532]	; (8007c58 <__ieee754_pow+0x9a0>)
 8007a42:	0063      	lsls	r3, r4, #1
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	9102      	str	r1, [sp, #8]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	dd25      	ble.n	8007a98 <__ieee754_pow+0x7e0>
 8007a4c:	4a83      	ldr	r2, [pc, #524]	; (8007c5c <__ieee754_pow+0x9a4>)
 8007a4e:	151b      	asrs	r3, r3, #20
 8007a50:	189b      	adds	r3, r3, r2
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	0352      	lsls	r2, r2, #13
 8007a56:	4694      	mov	ip, r2
 8007a58:	411a      	asrs	r2, r3
 8007a5a:	1914      	adds	r4, r2, r4
 8007a5c:	4b80      	ldr	r3, [pc, #512]	; (8007c60 <__ieee754_pow+0x9a8>)
 8007a5e:	0060      	lsls	r0, r4, #1
 8007a60:	4d80      	ldr	r5, [pc, #512]	; (8007c64 <__ieee754_pow+0x9ac>)
 8007a62:	0d40      	lsrs	r0, r0, #21
 8007a64:	18c0      	adds	r0, r0, r3
 8007a66:	4105      	asrs	r5, r0
 8007a68:	0021      	movs	r1, r4
 8007a6a:	43a9      	bics	r1, r5
 8007a6c:	000b      	movs	r3, r1
 8007a6e:	4661      	mov	r1, ip
 8007a70:	0324      	lsls	r4, r4, #12
 8007a72:	0b24      	lsrs	r4, r4, #12
 8007a74:	4321      	orrs	r1, r4
 8007a76:	2414      	movs	r4, #20
 8007a78:	1a20      	subs	r0, r4, r0
 8007a7a:	4101      	asrs	r1, r0
 8007a7c:	9102      	str	r1, [sp, #8]
 8007a7e:	9908      	ldr	r1, [sp, #32]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2900      	cmp	r1, #0
 8007a84:	da02      	bge.n	8007a8c <__ieee754_pow+0x7d4>
 8007a86:	9902      	ldr	r1, [sp, #8]
 8007a88:	4249      	negs	r1, r1
 8007a8a:	9102      	str	r1, [sp, #8]
 8007a8c:	0030      	movs	r0, r6
 8007a8e:	0039      	movs	r1, r7
 8007a90:	f7f9 fdea 	bl	8001668 <__aeabi_dsub>
 8007a94:	9006      	str	r0, [sp, #24]
 8007a96:	9107      	str	r1, [sp, #28]
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	9b05      	ldr	r3, [sp, #20]
 8007a9c:	9806      	ldr	r0, [sp, #24]
 8007a9e:	9907      	ldr	r1, [sp, #28]
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	f7f8 fc05 	bl	80002b0 <__aeabi_dadd>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	0030      	movs	r0, r6
 8007aaa:	4b6f      	ldr	r3, [pc, #444]	; (8007c68 <__ieee754_pow+0x9b0>)
 8007aac:	000f      	movs	r7, r1
 8007aae:	f7f9 fb6f 	bl	8001190 <__aeabi_dmul>
 8007ab2:	9a06      	ldr	r2, [sp, #24]
 8007ab4:	9b07      	ldr	r3, [sp, #28]
 8007ab6:	9008      	str	r0, [sp, #32]
 8007ab8:	9109      	str	r1, [sp, #36]	; 0x24
 8007aba:	0030      	movs	r0, r6
 8007abc:	0039      	movs	r1, r7
 8007abe:	f7f9 fdd3 	bl	8001668 <__aeabi_dsub>
 8007ac2:	0002      	movs	r2, r0
 8007ac4:	000b      	movs	r3, r1
 8007ac6:	9804      	ldr	r0, [sp, #16]
 8007ac8:	9905      	ldr	r1, [sp, #20]
 8007aca:	f7f9 fdcd 	bl	8001668 <__aeabi_dsub>
 8007ace:	4a67      	ldr	r2, [pc, #412]	; (8007c6c <__ieee754_pow+0x9b4>)
 8007ad0:	4b67      	ldr	r3, [pc, #412]	; (8007c70 <__ieee754_pow+0x9b8>)
 8007ad2:	f7f9 fb5d 	bl	8001190 <__aeabi_dmul>
 8007ad6:	4a67      	ldr	r2, [pc, #412]	; (8007c74 <__ieee754_pow+0x9bc>)
 8007ad8:	0004      	movs	r4, r0
 8007ada:	000d      	movs	r5, r1
 8007adc:	0030      	movs	r0, r6
 8007ade:	0039      	movs	r1, r7
 8007ae0:	4b65      	ldr	r3, [pc, #404]	; (8007c78 <__ieee754_pow+0x9c0>)
 8007ae2:	f7f9 fb55 	bl	8001190 <__aeabi_dmul>
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	000b      	movs	r3, r1
 8007aea:	0020      	movs	r0, r4
 8007aec:	0029      	movs	r1, r5
 8007aee:	f7f8 fbdf 	bl	80002b0 <__aeabi_dadd>
 8007af2:	0004      	movs	r4, r0
 8007af4:	000d      	movs	r5, r1
 8007af6:	0002      	movs	r2, r0
 8007af8:	000b      	movs	r3, r1
 8007afa:	9808      	ldr	r0, [sp, #32]
 8007afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007afe:	f7f8 fbd7 	bl	80002b0 <__aeabi_dadd>
 8007b02:	9a08      	ldr	r2, [sp, #32]
 8007b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b06:	0006      	movs	r6, r0
 8007b08:	000f      	movs	r7, r1
 8007b0a:	f7f9 fdad 	bl	8001668 <__aeabi_dsub>
 8007b0e:	0002      	movs	r2, r0
 8007b10:	000b      	movs	r3, r1
 8007b12:	0020      	movs	r0, r4
 8007b14:	0029      	movs	r1, r5
 8007b16:	f7f9 fda7 	bl	8001668 <__aeabi_dsub>
 8007b1a:	0032      	movs	r2, r6
 8007b1c:	9004      	str	r0, [sp, #16]
 8007b1e:	9105      	str	r1, [sp, #20]
 8007b20:	003b      	movs	r3, r7
 8007b22:	0030      	movs	r0, r6
 8007b24:	0039      	movs	r1, r7
 8007b26:	f7f9 fb33 	bl	8001190 <__aeabi_dmul>
 8007b2a:	0004      	movs	r4, r0
 8007b2c:	000d      	movs	r5, r1
 8007b2e:	4a53      	ldr	r2, [pc, #332]	; (8007c7c <__ieee754_pow+0x9c4>)
 8007b30:	4b53      	ldr	r3, [pc, #332]	; (8007c80 <__ieee754_pow+0x9c8>)
 8007b32:	f7f9 fb2d 	bl	8001190 <__aeabi_dmul>
 8007b36:	4a53      	ldr	r2, [pc, #332]	; (8007c84 <__ieee754_pow+0x9cc>)
 8007b38:	4b53      	ldr	r3, [pc, #332]	; (8007c88 <__ieee754_pow+0x9d0>)
 8007b3a:	f7f9 fd95 	bl	8001668 <__aeabi_dsub>
 8007b3e:	0022      	movs	r2, r4
 8007b40:	002b      	movs	r3, r5
 8007b42:	f7f9 fb25 	bl	8001190 <__aeabi_dmul>
 8007b46:	4a51      	ldr	r2, [pc, #324]	; (8007c8c <__ieee754_pow+0x9d4>)
 8007b48:	4b51      	ldr	r3, [pc, #324]	; (8007c90 <__ieee754_pow+0x9d8>)
 8007b4a:	f7f8 fbb1 	bl	80002b0 <__aeabi_dadd>
 8007b4e:	0022      	movs	r2, r4
 8007b50:	002b      	movs	r3, r5
 8007b52:	f7f9 fb1d 	bl	8001190 <__aeabi_dmul>
 8007b56:	4a4f      	ldr	r2, [pc, #316]	; (8007c94 <__ieee754_pow+0x9dc>)
 8007b58:	4b4f      	ldr	r3, [pc, #316]	; (8007c98 <__ieee754_pow+0x9e0>)
 8007b5a:	f7f9 fd85 	bl	8001668 <__aeabi_dsub>
 8007b5e:	0022      	movs	r2, r4
 8007b60:	002b      	movs	r3, r5
 8007b62:	f7f9 fb15 	bl	8001190 <__aeabi_dmul>
 8007b66:	4a4d      	ldr	r2, [pc, #308]	; (8007c9c <__ieee754_pow+0x9e4>)
 8007b68:	4b4d      	ldr	r3, [pc, #308]	; (8007ca0 <__ieee754_pow+0x9e8>)
 8007b6a:	f7f8 fba1 	bl	80002b0 <__aeabi_dadd>
 8007b6e:	0022      	movs	r2, r4
 8007b70:	002b      	movs	r3, r5
 8007b72:	f7f9 fb0d 	bl	8001190 <__aeabi_dmul>
 8007b76:	0002      	movs	r2, r0
 8007b78:	000b      	movs	r3, r1
 8007b7a:	0030      	movs	r0, r6
 8007b7c:	0039      	movs	r1, r7
 8007b7e:	f7f9 fd73 	bl	8001668 <__aeabi_dsub>
 8007b82:	0004      	movs	r4, r0
 8007b84:	000d      	movs	r5, r1
 8007b86:	0002      	movs	r2, r0
 8007b88:	000b      	movs	r3, r1
 8007b8a:	0030      	movs	r0, r6
 8007b8c:	0039      	movs	r1, r7
 8007b8e:	f7f9 faff 	bl	8001190 <__aeabi_dmul>
 8007b92:	2380      	movs	r3, #128	; 0x80
 8007b94:	9006      	str	r0, [sp, #24]
 8007b96:	9107      	str	r1, [sp, #28]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	0020      	movs	r0, r4
 8007b9c:	0029      	movs	r1, r5
 8007b9e:	05db      	lsls	r3, r3, #23
 8007ba0:	f7f9 fd62 	bl	8001668 <__aeabi_dsub>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	000b      	movs	r3, r1
 8007ba8:	9806      	ldr	r0, [sp, #24]
 8007baa:	9907      	ldr	r1, [sp, #28]
 8007bac:	f7f8 feea 	bl	8000984 <__aeabi_ddiv>
 8007bb0:	9a04      	ldr	r2, [sp, #16]
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	0004      	movs	r4, r0
 8007bb6:	000d      	movs	r5, r1
 8007bb8:	0030      	movs	r0, r6
 8007bba:	0039      	movs	r1, r7
 8007bbc:	f7f9 fae8 	bl	8001190 <__aeabi_dmul>
 8007bc0:	9a04      	ldr	r2, [sp, #16]
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	f7f8 fb74 	bl	80002b0 <__aeabi_dadd>
 8007bc8:	0002      	movs	r2, r0
 8007bca:	000b      	movs	r3, r1
 8007bcc:	0020      	movs	r0, r4
 8007bce:	0029      	movs	r1, r5
 8007bd0:	f7f9 fd4a 	bl	8001668 <__aeabi_dsub>
 8007bd4:	0032      	movs	r2, r6
 8007bd6:	003b      	movs	r3, r7
 8007bd8:	f7f9 fd46 	bl	8001668 <__aeabi_dsub>
 8007bdc:	0002      	movs	r2, r0
 8007bde:	000b      	movs	r3, r1
 8007be0:	2000      	movs	r0, #0
 8007be2:	4930      	ldr	r1, [pc, #192]	; (8007ca4 <__ieee754_pow+0x9ec>)
 8007be4:	f7f9 fd40 	bl	8001668 <__aeabi_dsub>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	051b      	lsls	r3, r3, #20
 8007bec:	185b      	adds	r3, r3, r1
 8007bee:	151a      	asrs	r2, r3, #20
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	dc26      	bgt.n	8007c42 <__ieee754_pow+0x98a>
 8007bf4:	9a02      	ldr	r2, [sp, #8]
 8007bf6:	f000 f9ad 	bl	8007f54 <scalbn>
 8007bfa:	9a00      	ldr	r2, [sp, #0]
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	f7ff fc2d 	bl	800745c <__ieee754_pow+0x1a4>
 8007c02:	4a29      	ldr	r2, [pc, #164]	; (8007ca8 <__ieee754_pow+0x9f0>)
 8007c04:	004b      	lsls	r3, r1, #1
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	dc00      	bgt.n	8007c0e <__ieee754_pow+0x956>
 8007c0c:	e717      	b.n	8007a3e <__ieee754_pow+0x786>
 8007c0e:	4b27      	ldr	r3, [pc, #156]	; (8007cac <__ieee754_pow+0x9f4>)
 8007c10:	18cb      	adds	r3, r1, r3
 8007c12:	4303      	orrs	r3, r0
 8007c14:	d009      	beq.n	8007c2a <__ieee754_pow+0x972>
 8007c16:	9800      	ldr	r0, [sp, #0]
 8007c18:	9901      	ldr	r1, [sp, #4]
 8007c1a:	4a25      	ldr	r2, [pc, #148]	; (8007cb0 <__ieee754_pow+0x9f8>)
 8007c1c:	4b25      	ldr	r3, [pc, #148]	; (8007cb4 <__ieee754_pow+0x9fc>)
 8007c1e:	f7f9 fab7 	bl	8001190 <__aeabi_dmul>
 8007c22:	4a23      	ldr	r2, [pc, #140]	; (8007cb0 <__ieee754_pow+0x9f8>)
 8007c24:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <__ieee754_pow+0x9fc>)
 8007c26:	f7ff fc19 	bl	800745c <__ieee754_pow+0x1a4>
 8007c2a:	0032      	movs	r2, r6
 8007c2c:	003b      	movs	r3, r7
 8007c2e:	f7f9 fd1b 	bl	8001668 <__aeabi_dsub>
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	f7f8 fb31 	bl	800029c <__aeabi_dcmpge>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d100      	bne.n	8007c40 <__ieee754_pow+0x988>
 8007c3e:	e6fe      	b.n	8007a3e <__ieee754_pow+0x786>
 8007c40:	e7e9      	b.n	8007c16 <__ieee754_pow+0x95e>
 8007c42:	0019      	movs	r1, r3
 8007c44:	e7d9      	b.n	8007bfa <__ieee754_pow+0x942>
 8007c46:	2300      	movs	r3, #0
 8007c48:	4c16      	ldr	r4, [pc, #88]	; (8007ca4 <__ieee754_pow+0x9ec>)
 8007c4a:	f7ff fbec 	bl	8007426 <__ieee754_pow+0x16e>
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	652b82fe 	.word	0x652b82fe
 8007c54:	3c971547 	.word	0x3c971547
 8007c58:	3fe00000 	.word	0x3fe00000
 8007c5c:	fffffc02 	.word	0xfffffc02
 8007c60:	fffffc01 	.word	0xfffffc01
 8007c64:	000fffff 	.word	0x000fffff
 8007c68:	3fe62e43 	.word	0x3fe62e43
 8007c6c:	fefa39ef 	.word	0xfefa39ef
 8007c70:	3fe62e42 	.word	0x3fe62e42
 8007c74:	0ca86c39 	.word	0x0ca86c39
 8007c78:	be205c61 	.word	0xbe205c61
 8007c7c:	72bea4d0 	.word	0x72bea4d0
 8007c80:	3e663769 	.word	0x3e663769
 8007c84:	c5d26bf1 	.word	0xc5d26bf1
 8007c88:	3ebbbd41 	.word	0x3ebbbd41
 8007c8c:	af25de2c 	.word	0xaf25de2c
 8007c90:	3f11566a 	.word	0x3f11566a
 8007c94:	16bebd93 	.word	0x16bebd93
 8007c98:	3f66c16c 	.word	0x3f66c16c
 8007c9c:	5555553e 	.word	0x5555553e
 8007ca0:	3fc55555 	.word	0x3fc55555
 8007ca4:	3ff00000 	.word	0x3ff00000
 8007ca8:	4090cbff 	.word	0x4090cbff
 8007cac:	3f6f3400 	.word	0x3f6f3400
 8007cb0:	c2f8f359 	.word	0xc2f8f359
 8007cb4:	01a56e1f 	.word	0x01a56e1f

08007cb8 <__ieee754_sqrt>:
 8007cb8:	4b56      	ldr	r3, [pc, #344]	; (8007e14 <__ieee754_sqrt+0x15c>)
 8007cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cbc:	0002      	movs	r2, r0
 8007cbe:	0005      	movs	r5, r0
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	000c      	movs	r4, r1
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	4008      	ands	r0, r1
 8007cc8:	4298      	cmp	r0, r3
 8007cca:	d10f      	bne.n	8007cec <__ieee754_sqrt+0x34>
 8007ccc:	000b      	movs	r3, r1
 8007cce:	0028      	movs	r0, r5
 8007cd0:	f7f9 fa5e 	bl	8001190 <__aeabi_dmul>
 8007cd4:	0002      	movs	r2, r0
 8007cd6:	000b      	movs	r3, r1
 8007cd8:	0028      	movs	r0, r5
 8007cda:	0021      	movs	r1, r4
 8007cdc:	f7f8 fae8 	bl	80002b0 <__aeabi_dadd>
 8007ce0:	0005      	movs	r5, r0
 8007ce2:	000c      	movs	r4, r1
 8007ce4:	0028      	movs	r0, r5
 8007ce6:	0021      	movs	r1, r4
 8007ce8:	b005      	add	sp, #20
 8007cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cec:	2900      	cmp	r1, #0
 8007cee:	dc10      	bgt.n	8007d12 <__ieee754_sqrt+0x5a>
 8007cf0:	004b      	lsls	r3, r1, #1
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	432b      	orrs	r3, r5
 8007cf6:	d0f5      	beq.n	8007ce4 <__ieee754_sqrt+0x2c>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4281      	cmp	r1, r0
 8007cfc:	d100      	bne.n	8007d00 <__ieee754_sqrt+0x48>
 8007cfe:	e080      	b.n	8007e02 <__ieee754_sqrt+0x14a>
 8007d00:	000b      	movs	r3, r1
 8007d02:	0028      	movs	r0, r5
 8007d04:	f7f9 fcb0 	bl	8001668 <__aeabi_dsub>
 8007d08:	0002      	movs	r2, r0
 8007d0a:	000b      	movs	r3, r1
 8007d0c:	f7f8 fe3a 	bl	8000984 <__aeabi_ddiv>
 8007d10:	e7e6      	b.n	8007ce0 <__ieee754_sqrt+0x28>
 8007d12:	1508      	asrs	r0, r1, #20
 8007d14:	d075      	beq.n	8007e02 <__ieee754_sqrt+0x14a>
 8007d16:	4b40      	ldr	r3, [pc, #256]	; (8007e18 <__ieee754_sqrt+0x160>)
 8007d18:	0309      	lsls	r1, r1, #12
 8007d1a:	18c4      	adds	r4, r0, r3
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	0b09      	lsrs	r1, r1, #12
 8007d20:	035b      	lsls	r3, r3, #13
 8007d22:	4319      	orrs	r1, r3
 8007d24:	07c3      	lsls	r3, r0, #31
 8007d26:	d403      	bmi.n	8007d30 <__ieee754_sqrt+0x78>
 8007d28:	0fd3      	lsrs	r3, r2, #31
 8007d2a:	0049      	lsls	r1, r1, #1
 8007d2c:	18c9      	adds	r1, r1, r3
 8007d2e:	0052      	lsls	r2, r2, #1
 8007d30:	1063      	asrs	r3, r4, #1
 8007d32:	2400      	movs	r4, #0
 8007d34:	0049      	lsls	r1, r1, #1
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	0fd3      	lsrs	r3, r2, #31
 8007d3a:	18cb      	adds	r3, r1, r3
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	2516      	movs	r5, #22
 8007d40:	0020      	movs	r0, r4
 8007d42:	0052      	lsls	r2, r2, #1
 8007d44:	0389      	lsls	r1, r1, #14
 8007d46:	1846      	adds	r6, r0, r1
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	dc02      	bgt.n	8007d52 <__ieee754_sqrt+0x9a>
 8007d4c:	1870      	adds	r0, r6, r1
 8007d4e:	1b9b      	subs	r3, r3, r6
 8007d50:	1864      	adds	r4, r4, r1
 8007d52:	0fd6      	lsrs	r6, r2, #31
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	3d01      	subs	r5, #1
 8007d58:	18f3      	adds	r3, r6, r3
 8007d5a:	0052      	lsls	r2, r2, #1
 8007d5c:	0849      	lsrs	r1, r1, #1
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	d1f1      	bne.n	8007d46 <__ieee754_sqrt+0x8e>
 8007d62:	2620      	movs	r6, #32
 8007d64:	2780      	movs	r7, #128	; 0x80
 8007d66:	0029      	movs	r1, r5
 8007d68:	9601      	str	r6, [sp, #4]
 8007d6a:	063f      	lsls	r7, r7, #24
 8007d6c:	197e      	adds	r6, r7, r5
 8007d6e:	46b4      	mov	ip, r6
 8007d70:	4283      	cmp	r3, r0
 8007d72:	dc02      	bgt.n	8007d7a <__ieee754_sqrt+0xc2>
 8007d74:	d114      	bne.n	8007da0 <__ieee754_sqrt+0xe8>
 8007d76:	4296      	cmp	r6, r2
 8007d78:	d812      	bhi.n	8007da0 <__ieee754_sqrt+0xe8>
 8007d7a:	4665      	mov	r5, ip
 8007d7c:	4666      	mov	r6, ip
 8007d7e:	19ed      	adds	r5, r5, r7
 8007d80:	9002      	str	r0, [sp, #8]
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	da03      	bge.n	8007d8e <__ieee754_sqrt+0xd6>
 8007d86:	43ee      	mvns	r6, r5
 8007d88:	0ff6      	lsrs	r6, r6, #31
 8007d8a:	1986      	adds	r6, r0, r6
 8007d8c:	9602      	str	r6, [sp, #8]
 8007d8e:	1a1b      	subs	r3, r3, r0
 8007d90:	4562      	cmp	r2, ip
 8007d92:	4180      	sbcs	r0, r0
 8007d94:	4240      	negs	r0, r0
 8007d96:	1a1b      	subs	r3, r3, r0
 8007d98:	4660      	mov	r0, ip
 8007d9a:	1a12      	subs	r2, r2, r0
 8007d9c:	9802      	ldr	r0, [sp, #8]
 8007d9e:	19c9      	adds	r1, r1, r7
 8007da0:	0fd6      	lsrs	r6, r2, #31
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	18f3      	adds	r3, r6, r3
 8007da6:	9e01      	ldr	r6, [sp, #4]
 8007da8:	0052      	lsls	r2, r2, #1
 8007daa:	3e01      	subs	r6, #1
 8007dac:	087f      	lsrs	r7, r7, #1
 8007dae:	9601      	str	r6, [sp, #4]
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	d1db      	bne.n	8007d6c <__ieee754_sqrt+0xb4>
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <__ieee754_sqrt+0x108>
 8007db8:	1c4b      	adds	r3, r1, #1
 8007dba:	d127      	bne.n	8007e0c <__ieee754_sqrt+0x154>
 8007dbc:	0031      	movs	r1, r6
 8007dbe:	3401      	adds	r4, #1
 8007dc0:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <__ieee754_sqrt+0x164>)
 8007dc2:	1060      	asrs	r0, r4, #1
 8007dc4:	18c0      	adds	r0, r0, r3
 8007dc6:	0849      	lsrs	r1, r1, #1
 8007dc8:	07e3      	lsls	r3, r4, #31
 8007dca:	d502      	bpl.n	8007dd2 <__ieee754_sqrt+0x11a>
 8007dcc:	2380      	movs	r3, #128	; 0x80
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	4319      	orrs	r1, r3
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	000d      	movs	r5, r1
 8007dd6:	051c      	lsls	r4, r3, #20
 8007dd8:	1823      	adds	r3, r4, r0
 8007dda:	001c      	movs	r4, r3
 8007ddc:	e782      	b.n	8007ce4 <__ieee754_sqrt+0x2c>
 8007dde:	0ad1      	lsrs	r1, r2, #11
 8007de0:	3b15      	subs	r3, #21
 8007de2:	0552      	lsls	r2, r2, #21
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d0fa      	beq.n	8007dde <__ieee754_sqrt+0x126>
 8007de8:	2480      	movs	r4, #128	; 0x80
 8007dea:	0364      	lsls	r4, r4, #13
 8007dec:	4221      	tst	r1, r4
 8007dee:	d00a      	beq.n	8007e06 <__ieee754_sqrt+0x14e>
 8007df0:	2420      	movs	r4, #32
 8007df2:	0016      	movs	r6, r2
 8007df4:	1a24      	subs	r4, r4, r0
 8007df6:	40e6      	lsrs	r6, r4
 8007df8:	1e45      	subs	r5, r0, #1
 8007dfa:	4082      	lsls	r2, r0
 8007dfc:	4331      	orrs	r1, r6
 8007dfe:	1b58      	subs	r0, r3, r5
 8007e00:	e789      	b.n	8007d16 <__ieee754_sqrt+0x5e>
 8007e02:	2300      	movs	r3, #0
 8007e04:	e7ee      	b.n	8007de4 <__ieee754_sqrt+0x12c>
 8007e06:	0049      	lsls	r1, r1, #1
 8007e08:	3001      	adds	r0, #1
 8007e0a:	e7ef      	b.n	8007dec <__ieee754_sqrt+0x134>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	3101      	adds	r1, #1
 8007e10:	4399      	bics	r1, r3
 8007e12:	e7d5      	b.n	8007dc0 <__ieee754_sqrt+0x108>
 8007e14:	7ff00000 	.word	0x7ff00000
 8007e18:	fffffc01 	.word	0xfffffc01
 8007e1c:	3fe00000 	.word	0x3fe00000

08007e20 <fabs>:
 8007e20:	004b      	lsls	r3, r1, #1
 8007e22:	0859      	lsrs	r1, r3, #1
 8007e24:	4770      	bx	lr
	...

08007e28 <finite>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <finite+0xc>)
 8007e2a:	0048      	lsls	r0, r1, #1
 8007e2c:	0840      	lsrs	r0, r0, #1
 8007e2e:	18c0      	adds	r0, r0, r3
 8007e30:	0fc0      	lsrs	r0, r0, #31
 8007e32:	4770      	bx	lr
 8007e34:	80100000 	.word	0x80100000

08007e38 <nan>:
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4901      	ldr	r1, [pc, #4]	; (8007e40 <nan+0x8>)
 8007e3c:	4770      	bx	lr
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	7ff80000 	.word	0x7ff80000

08007e44 <rint>:
 8007e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e46:	004a      	lsls	r2, r1, #1
 8007e48:	4e3e      	ldr	r6, [pc, #248]	; (8007f44 <rint+0x100>)
 8007e4a:	0d52      	lsrs	r2, r2, #21
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	1996      	adds	r6, r2, r6
 8007e50:	000d      	movs	r5, r1
 8007e52:	0003      	movs	r3, r0
 8007e54:	9101      	str	r1, [sp, #4]
 8007e56:	0fcc      	lsrs	r4, r1, #31
 8007e58:	2e13      	cmp	r6, #19
 8007e5a:	dc57      	bgt.n	8007f0c <rint+0xc8>
 8007e5c:	2e00      	cmp	r6, #0
 8007e5e:	da2a      	bge.n	8007eb6 <rint+0x72>
 8007e60:	004a      	lsls	r2, r1, #1
 8007e62:	0852      	lsrs	r2, r2, #1
 8007e64:	4302      	orrs	r2, r0
 8007e66:	d024      	beq.n	8007eb2 <rint+0x6e>
 8007e68:	030a      	lsls	r2, r1, #12
 8007e6a:	0b12      	lsrs	r2, r2, #12
 8007e6c:	4302      	orrs	r2, r0
 8007e6e:	4253      	negs	r3, r2
 8007e70:	4313      	orrs	r3, r2
 8007e72:	2280      	movs	r2, #128	; 0x80
 8007e74:	0c4d      	lsrs	r5, r1, #17
 8007e76:	0312      	lsls	r2, r2, #12
 8007e78:	0b1b      	lsrs	r3, r3, #12
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	046d      	lsls	r5, r5, #17
 8007e7e:	432b      	orrs	r3, r5
 8007e80:	0019      	movs	r1, r3
 8007e82:	4b31      	ldr	r3, [pc, #196]	; (8007f48 <rint+0x104>)
 8007e84:	00e2      	lsls	r2, r4, #3
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	681e      	ldr	r6, [r3, #0]
 8007e8a:	685f      	ldr	r7, [r3, #4]
 8007e8c:	0002      	movs	r2, r0
 8007e8e:	000b      	movs	r3, r1
 8007e90:	0030      	movs	r0, r6
 8007e92:	0039      	movs	r1, r7
 8007e94:	f7f8 fa0c 	bl	80002b0 <__aeabi_dadd>
 8007e98:	9002      	str	r0, [sp, #8]
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	9802      	ldr	r0, [sp, #8]
 8007e9e:	9903      	ldr	r1, [sp, #12]
 8007ea0:	003b      	movs	r3, r7
 8007ea2:	0032      	movs	r2, r6
 8007ea4:	f7f9 fbe0 	bl	8001668 <__aeabi_dsub>
 8007ea8:	004b      	lsls	r3, r1, #1
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	07e4      	lsls	r4, r4, #31
 8007eae:	4323      	orrs	r3, r4
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	b005      	add	sp, #20
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb6:	4a25      	ldr	r2, [pc, #148]	; (8007f4c <rint+0x108>)
 8007eb8:	4132      	asrs	r2, r6
 8007eba:	0017      	movs	r7, r2
 8007ebc:	400f      	ands	r7, r1
 8007ebe:	4307      	orrs	r7, r0
 8007ec0:	d0f7      	beq.n	8007eb2 <rint+0x6e>
 8007ec2:	0852      	lsrs	r2, r2, #1
 8007ec4:	0011      	movs	r1, r2
 8007ec6:	4029      	ands	r1, r5
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	d00a      	beq.n	8007ee2 <rint+0x9e>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2e13      	cmp	r6, #19
 8007ed0:	d101      	bne.n	8007ed6 <rint+0x92>
 8007ed2:	2380      	movs	r3, #128	; 0x80
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	2780      	movs	r7, #128	; 0x80
 8007ed8:	02ff      	lsls	r7, r7, #11
 8007eda:	4137      	asrs	r7, r6
 8007edc:	4395      	bics	r5, r2
 8007ede:	432f      	orrs	r7, r5
 8007ee0:	9701      	str	r7, [sp, #4]
 8007ee2:	9901      	ldr	r1, [sp, #4]
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	000b      	movs	r3, r1
 8007ee8:	4917      	ldr	r1, [pc, #92]	; (8007f48 <rint+0x104>)
 8007eea:	00e4      	lsls	r4, r4, #3
 8007eec:	190c      	adds	r4, r1, r4
 8007eee:	6865      	ldr	r5, [r4, #4]
 8007ef0:	6824      	ldr	r4, [r4, #0]
 8007ef2:	0020      	movs	r0, r4
 8007ef4:	0029      	movs	r1, r5
 8007ef6:	f7f8 f9db 	bl	80002b0 <__aeabi_dadd>
 8007efa:	9002      	str	r0, [sp, #8]
 8007efc:	9103      	str	r1, [sp, #12]
 8007efe:	9802      	ldr	r0, [sp, #8]
 8007f00:	9903      	ldr	r1, [sp, #12]
 8007f02:	0022      	movs	r2, r4
 8007f04:	002b      	movs	r3, r5
 8007f06:	f7f9 fbaf 	bl	8001668 <__aeabi_dsub>
 8007f0a:	e7d2      	b.n	8007eb2 <rint+0x6e>
 8007f0c:	2e33      	cmp	r6, #51	; 0x33
 8007f0e:	dd08      	ble.n	8007f22 <rint+0xde>
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	429e      	cmp	r6, r3
 8007f16:	d1cc      	bne.n	8007eb2 <rint+0x6e>
 8007f18:	0002      	movs	r2, r0
 8007f1a:	000b      	movs	r3, r1
 8007f1c:	f7f8 f9c8 	bl	80002b0 <__aeabi_dadd>
 8007f20:	e7c7      	b.n	8007eb2 <rint+0x6e>
 8007f22:	2601      	movs	r6, #1
 8007f24:	4d0a      	ldr	r5, [pc, #40]	; (8007f50 <rint+0x10c>)
 8007f26:	4276      	negs	r6, r6
 8007f28:	1952      	adds	r2, r2, r5
 8007f2a:	40d6      	lsrs	r6, r2
 8007f2c:	4206      	tst	r6, r0
 8007f2e:	d0c0      	beq.n	8007eb2 <rint+0x6e>
 8007f30:	0876      	lsrs	r6, r6, #1
 8007f32:	4206      	tst	r6, r0
 8007f34:	d0d5      	beq.n	8007ee2 <rint+0x9e>
 8007f36:	2180      	movs	r1, #128	; 0x80
 8007f38:	05c9      	lsls	r1, r1, #23
 8007f3a:	4111      	asrs	r1, r2
 8007f3c:	43b3      	bics	r3, r6
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	e7cf      	b.n	8007ee2 <rint+0x9e>
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	fffffc01 	.word	0xfffffc01
 8007f48:	08008228 	.word	0x08008228
 8007f4c:	000fffff 	.word	0x000fffff
 8007f50:	fffffbed 	.word	0xfffffbed

08007f54 <scalbn>:
 8007f54:	004b      	lsls	r3, r1, #1
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	0d5b      	lsrs	r3, r3, #21
 8007f5a:	0014      	movs	r4, r2
 8007f5c:	000a      	movs	r2, r1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <scalbn+0x2a>
 8007f62:	004b      	lsls	r3, r1, #1
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	4303      	orrs	r3, r0
 8007f68:	d010      	beq.n	8007f8c <scalbn+0x38>
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <scalbn+0xb4>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f7f9 f90f 	bl	8001190 <__aeabi_dmul>
 8007f72:	4b26      	ldr	r3, [pc, #152]	; (800800c <scalbn+0xb8>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	da0a      	bge.n	8007f8e <scalbn+0x3a>
 8007f78:	4a25      	ldr	r2, [pc, #148]	; (8008010 <scalbn+0xbc>)
 8007f7a:	4b26      	ldr	r3, [pc, #152]	; (8008014 <scalbn+0xc0>)
 8007f7c:	e019      	b.n	8007fb2 <scalbn+0x5e>
 8007f7e:	4d26      	ldr	r5, [pc, #152]	; (8008018 <scalbn+0xc4>)
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	d108      	bne.n	8007f96 <scalbn+0x42>
 8007f84:	0002      	movs	r2, r0
 8007f86:	000b      	movs	r3, r1
 8007f88:	f7f8 f992 	bl	80002b0 <__aeabi_dadd>
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	000a      	movs	r2, r1
 8007f90:	004b      	lsls	r3, r1, #1
 8007f92:	0d5b      	lsrs	r3, r3, #21
 8007f94:	3b36      	subs	r3, #54	; 0x36
 8007f96:	4d21      	ldr	r5, [pc, #132]	; (800801c <scalbn+0xc8>)
 8007f98:	18e3      	adds	r3, r4, r3
 8007f9a:	42ab      	cmp	r3, r5
 8007f9c:	dd0c      	ble.n	8007fb8 <scalbn+0x64>
 8007f9e:	4c20      	ldr	r4, [pc, #128]	; (8008020 <scalbn+0xcc>)
 8007fa0:	4d20      	ldr	r5, [pc, #128]	; (8008024 <scalbn+0xd0>)
 8007fa2:	2900      	cmp	r1, #0
 8007fa4:	da01      	bge.n	8007faa <scalbn+0x56>
 8007fa6:	4c1e      	ldr	r4, [pc, #120]	; (8008020 <scalbn+0xcc>)
 8007fa8:	4d1f      	ldr	r5, [pc, #124]	; (8008028 <scalbn+0xd4>)
 8007faa:	0020      	movs	r0, r4
 8007fac:	0029      	movs	r1, r5
 8007fae:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <scalbn+0xcc>)
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <scalbn+0xd0>)
 8007fb2:	f7f9 f8ed 	bl	8001190 <__aeabi_dmul>
 8007fb6:	e7e9      	b.n	8007f8c <scalbn+0x38>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dd05      	ble.n	8007fc8 <scalbn+0x74>
 8007fbc:	4c1b      	ldr	r4, [pc, #108]	; (800802c <scalbn+0xd8>)
 8007fbe:	051b      	lsls	r3, r3, #20
 8007fc0:	4022      	ands	r2, r4
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	0011      	movs	r1, r2
 8007fc6:	e7e1      	b.n	8007f8c <scalbn+0x38>
 8007fc8:	001d      	movs	r5, r3
 8007fca:	3535      	adds	r5, #53	; 0x35
 8007fcc:	da13      	bge.n	8007ff6 <scalbn+0xa2>
 8007fce:	4a18      	ldr	r2, [pc, #96]	; (8008030 <scalbn+0xdc>)
 8007fd0:	0fcb      	lsrs	r3, r1, #31
 8007fd2:	4294      	cmp	r4, r2
 8007fd4:	dd08      	ble.n	8007fe8 <scalbn+0x94>
 8007fd6:	4812      	ldr	r0, [pc, #72]	; (8008020 <scalbn+0xcc>)
 8007fd8:	4912      	ldr	r1, [pc, #72]	; (8008024 <scalbn+0xd0>)
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <scalbn+0x8e>
 8007fde:	4810      	ldr	r0, [pc, #64]	; (8008020 <scalbn+0xcc>)
 8007fe0:	4911      	ldr	r1, [pc, #68]	; (8008028 <scalbn+0xd4>)
 8007fe2:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <scalbn+0xcc>)
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <scalbn+0xd0>)
 8007fe6:	e7e4      	b.n	8007fb2 <scalbn+0x5e>
 8007fe8:	4809      	ldr	r0, [pc, #36]	; (8008010 <scalbn+0xbc>)
 8007fea:	490a      	ldr	r1, [pc, #40]	; (8008014 <scalbn+0xc0>)
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0c3      	beq.n	8007f78 <scalbn+0x24>
 8007ff0:	4807      	ldr	r0, [pc, #28]	; (8008010 <scalbn+0xbc>)
 8007ff2:	4910      	ldr	r1, [pc, #64]	; (8008034 <scalbn+0xe0>)
 8007ff4:	e7c0      	b.n	8007f78 <scalbn+0x24>
 8007ff6:	4c0d      	ldr	r4, [pc, #52]	; (800802c <scalbn+0xd8>)
 8007ff8:	3336      	adds	r3, #54	; 0x36
 8007ffa:	4022      	ands	r2, r4
 8007ffc:	051b      	lsls	r3, r3, #20
 8007ffe:	4313      	orrs	r3, r2
 8008000:	0019      	movs	r1, r3
 8008002:	2200      	movs	r2, #0
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <scalbn+0xe4>)
 8008006:	e7d4      	b.n	8007fb2 <scalbn+0x5e>
 8008008:	43500000 	.word	0x43500000
 800800c:	ffff3cb0 	.word	0xffff3cb0
 8008010:	c2f8f359 	.word	0xc2f8f359
 8008014:	01a56e1f 	.word	0x01a56e1f
 8008018:	000007ff 	.word	0x000007ff
 800801c:	000007fe 	.word	0x000007fe
 8008020:	8800759c 	.word	0x8800759c
 8008024:	7e37e43c 	.word	0x7e37e43c
 8008028:	fe37e43c 	.word	0xfe37e43c
 800802c:	800fffff 	.word	0x800fffff
 8008030:	0000c350 	.word	0x0000c350
 8008034:	81a56e1f 	.word	0x81a56e1f
 8008038:	3c900000 	.word	0x3c900000

0800803c <_init>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr

08008048 <_fini>:
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804e:	bc08      	pop	{r3}
 8008050:	469e      	mov	lr, r3
 8008052:	4770      	bx	lr
